[
  {
    "objectID": "translations.html",
    "href": "translations.html",
    "title": "Translated Cheatsheets",
    "section": "",
    "text": "Non-English translations of both Posit and community-contributed cheatsheets."
  },
  {
    "objectID": "translations.html#bengali",
    "href": "translations.html#bengali",
    "title": "Translated Cheatsheets",
    "section": "Bengali",
    "text": "Bengali\n\n\n\n\ndata import"
  },
  {
    "objectID": "translations.html#chinese",
    "href": "translations.html#chinese",
    "title": "Translated Cheatsheets",
    "section": "Chinese",
    "text": "Chinese\n\n\n\n\nbase R\ndata transformation (cn)\ndata visualization\nkeras (cn)\nsparklyr (cn)\nsparklyr (tw)\ntidyr (cn)"
  },
  {
    "objectID": "translations.html#dutch",
    "href": "translations.html#dutch",
    "title": "Translated Cheatsheets",
    "section": "Dutch",
    "text": "Dutch\n\n\n\n\ndata visualization\ndata wrangling\npackage development\nrmarkdown"
  },
  {
    "objectID": "translations.html#french",
    "href": "translations.html#french",
    "title": "Translated Cheatsheets",
    "section": "French",
    "text": "French\n\n\n\n\ncaret\ndata visualization\ndata wrangling\nquanteda\nregex\nrstudio ide\nshiny"
  },
  {
    "objectID": "translations.html#german",
    "href": "translations.html#german",
    "title": "Translated Cheatsheets",
    "section": "German",
    "text": "German\n\n\n\n\nbase R\ndata transformation\ndata visualization\ndata wrangling\npackage development\nrmarkdown\nshiny\nsparklyr"
  },
  {
    "objectID": "translations.html#greek",
    "href": "translations.html#greek",
    "title": "Translated Cheatsheets",
    "section": "Greek",
    "text": "Greek\n\n\n\n\nbase R\nrstudio ide"
  },
  {
    "objectID": "translations.html#italian",
    "href": "translations.html#italian",
    "title": "Translated Cheatsheets",
    "section": "Italian",
    "text": "Italian\n\n\n\n\npackage development\nrmarkdown\nrstudio ide"
  },
  {
    "objectID": "translations.html#japanese",
    "href": "translations.html#japanese",
    "title": "Translated Cheatsheets",
    "section": "Japanese",
    "text": "Japanese\n\n\n\n\nbase R\ndata visualization\ndata wrangling\nfactors\nkeras\nrmarkdown\nrstudio ide\nsparklyr"
  },
  {
    "objectID": "translations.html#korean",
    "href": "translations.html#korean",
    "title": "Translated Cheatsheets",
    "section": "Korean",
    "text": "Korean\n\n\n\n\ncaret\npackage development\npurrr\nrmarkdown\nsyntax"
  },
  {
    "objectID": "translations.html#persian",
    "href": "translations.html#persian",
    "title": "Translated Cheatsheets",
    "section": "Persian",
    "text": "Persian\n\n\n\n\ndata import"
  },
  {
    "objectID": "translations.html#portuguese",
    "href": "translations.html#portuguese",
    "title": "Translated Cheatsheets",
    "section": "Portuguese",
    "text": "Portuguese\n\n\n\n\nbase R (br)\ncaret\ndata visualization\ndata wrangling\ndatatable (br)\nrstudio ide"
  },
  {
    "objectID": "translations.html#russian",
    "href": "translations.html#russian",
    "title": "Translated Cheatsheets",
    "section": "Russian",
    "text": "Russian\n\n\n\n\ndata import\ndata transformation\nlubridate\npurrr"
  },
  {
    "objectID": "translations.html#spanish",
    "href": "translations.html#spanish",
    "title": "Translated Cheatsheets",
    "section": "Spanish",
    "text": "Spanish\n\n\n\n\nbase R\ncaret\ndata import\ndata transformation\ndata visualization\ndata wrangling\nestadistica descriptiva con R\nfactors\nintroduccion a R\nkeras\nlubridate\npackage development\npurrr\nreticulate\nrmarkdown\nrstudio ide\nshiny\nsparklyr\nstrings\nsurvminer\nsyntax\ntidyeval"
  },
  {
    "objectID": "translations.html#turkish",
    "href": "translations.html#turkish",
    "title": "Translated Cheatsheets",
    "section": "Turkish",
    "text": "Turkish\n\n\n\n\nbase R\ncaret\ndata import\ndata transformation\ndata visualization\nregex\nrmarkdown\nshiny"
  },
  {
    "objectID": "translations.html#ukrainian",
    "href": "translations.html#ukrainian",
    "title": "Translated Cheatsheets",
    "section": "Ukrainian",
    "text": "Ukrainian\n\n\n\n\ndata import\ndata transformation\nlubridate\npurrr"
  },
  {
    "objectID": "translations.html#uzbek",
    "href": "translations.html#uzbek",
    "title": "Translated Cheatsheets",
    "section": "Uzbek",
    "text": "Uzbek\n\n\n\n\ndata import\ndata transformation"
  },
  {
    "objectID": "translations.html#vietnamese",
    "href": "translations.html#vietnamese",
    "title": "Translated Cheatsheets",
    "section": "Vietnamese",
    "text": "Vietnamese\n\n\n\n\nbase R\ndata visualization\ndata wrangling\nlubridate\npackage development\npurrr\nrmarkdown\nshiny\nstrings"
  },
  {
    "objectID": "html/tidyr.html",
    "href": "html/tidyr.html",
    "title": "Data tidying with tidyr :: Cheatsheet",
    "section": "",
    "text": "Download PDF\n\n  \n\nTranslations (PDF)\n\n\nChinese\nPortuguese\nTidy data is a way to organize tabular data in a consistent data structure across packages. A table is tidy if:\nlibrary(tidyr)\nlibrary(tibble)"
  },
  {
    "objectID": "html/tidyr.html#tibbles",
    "href": "html/tidyr.html#tibbles",
    "title": "Data tidying with tidyr :: Cheatsheet",
    "section": "Tibbles",
    "text": "Tibbles\n\nAn Enhanced Data Frame\nTibbles are a table format provided by the tibble package. They inherit the data frame class, but have improved behaviors:\n\nSubset a new tibble with ], a vector with [[ and $.\nNo partial matching when subsetting columns.\nDisplay concise views of the data on one screen.\noptions(tibble.print_max = n, tibble.print_min = m, tibble.width = Inf): Control default display settings.\nView() or glimpse(): View the entire data set.\n\n\n\nConstruct a Tibble\n\ntibble(...): Construct by columns.\n\ntibble(\n  x = 1:3, \n  y = c(\"a\", \"b\", \"c\")\n)\n\n# A tibble: 3 × 2\n      x y    \n  &lt;int&gt; &lt;chr&gt;\n1     1 a    \n2     2 b    \n3     3 c    \n\n\ntribble(...): Construct by rows.\n\ntribble(\n  ~x, ~y,\n   1, \"a\",\n   2, \"b\",\n   3, \"c\"\n)\n\nas_tibble(x, ...): Convert a data frame to a tibble.\nenframe(x, name = \"name\", value = \"value\"): Convert a named vector to a tibble. Also deframe().\nis_tibble(x): Test whether x is a tibble."
  },
  {
    "objectID": "html/tidyr.html#reshape-data",
    "href": "html/tidyr.html#reshape-data",
    "title": "Data tidying with tidyr :: Cheatsheet",
    "section": "Reshape Data",
    "text": "Reshape Data\nPivot data to reorganize values into a new layout.\n\npivot_longer(data, cols, name_to = \"name\", values_to = \"value\", values_drop_na = FALSE): “Lengthen” data by collapsing several columns into two.\n\nThe initial table4a looks like the following:\n\n\ntable4a\n\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n\n\n\nColumn names move to a new names_to column and values to a new values_to column. The output of pivot_longer() will look like the following:\n\n\npivot_longer(table4a, cols = 2:3, names_to = \"year\", values_to = \"cases\")\n\n# A tibble: 6 × 3\n  country     year   cases\n  &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt;\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n\n\npivot_wider(data, name_from = \"name\", values_from = \"value\"): The inverse of pivot_longer(). “Widen” data by expanding two columns into several.\n\nThe initial table2 looks like the following:\n\n\ntable2\n\n# A tibble: 12 × 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\n\n\nOne column provides the new column names, the other the values. The output of pivot_wider() will look like the following:\n\n\npivot_wider(table2, names_from = type, values_from = count)\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583"
  },
  {
    "objectID": "html/tidyr.html#split-cells",
    "href": "html/tidyr.html#split-cells",
    "title": "Data tidying with tidyr :: Cheatsheet",
    "section": "Split Cells",
    "text": "Split Cells\nUse these functions to split or combine cells into individual, isolated values.\n\nunite(data, col, ..., sep = \"_\", remove = TRUE, na.rm = FALSE): Collapse cells across several columns into a single column.\n\nThe initial table5 looks like the following:\n\n\ntable5\n\n# A tibble: 6 × 4\n  country     century year  rate             \n  &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            \n1 Afghanistan 19      99    745/19987071     \n2 Afghanistan 20      00    2666/20595360    \n3 Brazil      19      99    37737/172006362  \n4 Brazil      20      00    80488/174504898  \n5 China       19      99    212258/1272915272\n6 China       20      00    213766/1280428583\n\n\n\nThe output of unite() will look like the following:\n\n\nunite(table5, century, year, col = \"year\", sep = \"\")\n\n# A tibble: 6 × 3\n  country     year  rate             \n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;            \n1 Afghanistan 1999  745/19987071     \n2 Afghanistan 2000  2666/20595360    \n3 Brazil      1999  37737/172006362  \n4 Brazil      2000  80488/174504898  \n5 China       1999  212258/1272915272\n6 China       2000  213766/1280428583\n\n\nseparate_wider_delim(data, cols, delim, ..., names = NULL, names_sep = NULL, names_repair = \"check unique\", too_few, too_many, cols_remove = TRUE): Separate each cell in a column into several columns. Also extract().\n\nThe initial table3 looks like the following:\n\n\ntable3\n\n# A tibble: 6 × 3\n  country      year rate             \n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n\n\n\nThe output of separate_wider_delim() will look like the following:\n\n\nseparate_wider_delim(table3, rate, delim = \"/\", names = c(\"cases\", \"pop\"))\n\n# A tibble: 6 × 4\n  country      year cases  pop       \n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     \n1 Afghanistan  1999 745    19987071  \n2 Afghanistan  2000 2666   20595360  \n3 Brazil       1999 37737  172006362 \n4 Brazil       2000 80488  174504898 \n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n\nseparate_longer_delim(data, cols, delim, .., width, keep_empty): Separate each cell in a column into several rows.\n\nThe initial table3 looks like the following:\n\n\ntable3\n\n# A tibble: 6 × 3\n  country      year rate             \n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n\n\n\nThe output of separate_longer_delim() will look like the following:\n\n\nseparate_longer_delim(table3, rate, delim = \"/\")\n\n# A tibble: 12 × 3\n   country      year rate      \n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     \n 1 Afghanistan  1999 745       \n 2 Afghanistan  1999 19987071  \n 3 Afghanistan  2000 2666      \n 4 Afghanistan  2000 20595360  \n 5 Brazil       1999 37737     \n 6 Brazil       1999 172006362 \n 7 Brazil       2000 80488     \n 8 Brazil       2000 174504898 \n 9 China        1999 212258    \n10 China        1999 1272915272\n11 China        2000 213766    \n12 China        2000 1280428583"
  },
  {
    "objectID": "html/tidyr.html#expand-tables",
    "href": "html/tidyr.html#expand-tables",
    "title": "Data tidying with tidyr :: Cheatsheet",
    "section": "Expand Tables",
    "text": "Expand Tables\nCreate new combinations of variables or identify implicit missing values (combinations of variables not present in the data).\n\nexpand(data, ...): Create a new tibble with all possible combinations of the values of the variables listed in … Drop other variables.\n\nexpand(mtcars, cyl, gear, carb)\n\ncomplete(data, ..., fill = list()): Add missing possible combinations of values of variables listed in … Fill remaining variables with NA.\n\ncomplete(mtcars, cyl, gear, carb)"
  },
  {
    "objectID": "html/tidyr.html#handle-missing-values",
    "href": "html/tidyr.html#handle-missing-values",
    "title": "Data tidying with tidyr :: Cheatsheet",
    "section": "Handle Missing Values",
    "text": "Handle Missing Values\nDrop or replace explicit missing values (NA).\n\nx &lt;- tribble(\n  ~x1, ~x2,\n  \"A\",   1,\n  \"B\",  NA,\n  \"C\",  NA,\n  \"D\",   3,\n  \"E\",  NA\n)\n\n\ndrop_na(data, ...): Drop rows containing NAs in … columns.\n\ndrop_na(x, x2)\n\nfill(data, ..., .direction = \"down\"): Fill in NAs in … columns using the next or previous value.\n\nfill(x, x2)\n\nreplace_na(data, replace): Specify a value to replace NA in selected columns.\n\nreplace_na(x, list(x2 = 2))"
  },
  {
    "objectID": "html/tidyr.html#nested-data",
    "href": "html/tidyr.html#nested-data",
    "title": "Data tidying with tidyr :: Cheatsheet",
    "section": "Nested Data",
    "text": "Nested Data\nA nested data frame stores individual tables as a list-column of data frames within a larger organizing data frame. List-columns can also be lists of vectors or lists of varying data types. Use a nested data frame to:\n\nPreserve relationships between observations and subsets of data. Preserve the type of the variables being nested (factors and datetimes aren’t coerced to character).\nManipulate many sub-tables are once with purrr functions like map(), map2(), or pmap() or with dplyr rowwise() grouping.\n\n\nCreate Nested Data\n\nnest(data, ...): Moves groups of cells into a list-column of a data frame. Use alone or with dplyr::group_by().\n\n\nGroup the data frame with group_by() and use nest() to move the groups into a list-column.\n\nn_storms &lt;- storms |&gt;\n  group_by(name) |&gt;\n  nest()\n\nUse nest(new_col = c(x,y)) to specify the columns to group using dplyr::select() syntax.\n\nn_storms &lt;- storms |&gt;\n  nest(data = c(year:long))\n\n\n\nIndex list-columns with [[]].\n\nn_storms$data[[1]]\n\n\n\n\nCreate Tibbles With List-Columns\n\ntibble::tribble(...): Makes list-columns when needed.\n\ntribble(\n  ~max, ~seq,\n     3,  1:3,\n     4,  1:4,\n     5,  1:5\n)\n\ntibble::tibble(...): Saves list input as list-columns.\n\ntibble(\n  max = c(3,4,5),\n  seq = list(1:3, 1:4, 1:5)\n)\n\ntibble::enframe(x, name = \"name\", value = \"value\"): Convert multi-level list to a tibble with list-cols.\n\nenframe(list(\"3\" = 1:3, \"4\" = 1:4, \"5\" = 1:5), \"max\", \"seq\")\n\n\n\n\nOutput List-Columns From Other Functions\n\ndplyr::mutate(), transmute(), and summarise() will output list-columns if they return a list.\n\nmtcars |&gt;\n  group_by(cyl) |&gt;\n  summarise(q = list(quantile(mpg)))\n\n\n\n\nReshape Nested Data\n\nunnest(data, cols, ..., keep_empty = FALSE): Flatten nested columns back to regular columns. The inverse of nest().\n\nn_storms |&gt; unnest(data)\n\nunnest_longer(data, col, values_to = NULL, indices_to = NULL): Turn each element of a list-column into a row.\n\nstarwars |&gt;\n  select(name, films) |&gt;\n  unnest_longer(films)\n\nunnest_wider(data, col): Turn each element of a list-column into a regular column.\n\nstarwars |&gt;\n  select(name, films) |&gt;\n  unnest_wider(films, names_sep = \"_\")\n\nhoist(.data, .col, ..., remove = TRUE): Selectively pull list components out into their own top-level columns. Uses purrr::pluck() syntax for selecting from lists.\n\nstarwars |&gt;\n  select(name, films) |&gt;\n  hoist(films, first_film = 1, second_film = 2)\n\n\n\n\nTransform Nested Data\nA vectorized function takes a vector, transforms each element in parallel, and returns a vector of the same length. By themselves vectorized functions cannot work with lists, such as list-columns.\n\ndplyr::rowwise(.data, ...): Group data so that each row is one group, and within the groups, elements of list-columns appear directly (accessed with [[), not as lists of length one. When you use rowwise(), dplyr functions will seem to apply functions to list-columns in a vectorized fashion.\nApply a function to a list-column and create a new list-column. In this example, dim() returns two values per row and so is wrapped with list() to tell mutate() to create a list-column.\n\nn_storms |&gt;\n  rowwise() |&gt;\n  mutate(n = list(dim(data))) # dim() returns two values per row, wrap with list to tell mutate to create a list-column\n\nApply a function to a list-column and create a regular column. In this example, nrow() returns one integer per row.\n\nn_storms |&gt;\n  rowwise() |&gt;\n  mutate(n = nrow(data)) # nrow() returns one integer per row\n\nCollapse multiple list-columns into a single list-column. In this example, append() returns a list for each row, so col type must be list.\n\nstarwars |&gt;\n  rowwise() |&gt;\n  mutate(transport = list(append(vehicles, starships))) # append() returns a list for each row, so col type must be list\n\nApply a function to multiple list-columns. In this example, length() returns one integer per row.\n\nstarwars |&gt;\n  rowwise() |&gt;\n  mutate(n_transports = length(c(vehicles, starships)))\n  # length() returns one integer per row\n\nSee purrr package for more list functions.\n\n\nCC BY SA Posit Software, PBC • info@posit.co • posit.co\nLearn more at tidyr.tidyverse.org.\nUpdated: 2024-05.\n\npackageVersion(\"tidyr\")\n\n[1] '1.3.1'\n\npackageVersion(\"tibble\")\n\n[1] '3.2.1'"
  },
  {
    "objectID": "html/sparklyr.html",
    "href": "html/sparklyr.html",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "",
    "text": "Download PDF\n\n  \n\nTranslations (PDF)\n\n\nChinese\nChinese\nGerman\nJapanese\nSpanish"
  },
  {
    "objectID": "html/sparklyr.html#databricks-connect-v2",
    "href": "html/sparklyr.html#databricks-connect-v2",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Databricks Connect (v2)",
    "text": "Databricks Connect (v2)\nSupported in Databricks Connect v2\n\nOpen your .Renviron file: usethis::edit_r_environ()\nIn the .Renviron file add your Databricks Host Url and Token (PAT):\n\nDATABRICKS_HOST = \\[Your Host URL\\]\nDATABRICKS_TOKEN = \\[Your PAT\\]\n\nInstall extension: install.packages(\"pysparklyr\")\nOpen connection:\n\n\nsc &lt;- spark_connect(\n  cluster_id = \"[Your cluster’s ID]\",\n  method = \"databricks_connect\"\n)"
  },
  {
    "objectID": "html/sparklyr.html#standalone-cluster",
    "href": "html/sparklyr.html#standalone-cluster",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Standalone cluster",
    "text": "Standalone cluster\n\nInstall RStudio Server on one of the existing nodes or a server in the same LAN\nOpen a connection\n\n\nspark_connect(\n  master=\"spark://host:port\",\n  version = \"3.2\",\n  spark_home = [path to Spark]\n)"
  },
  {
    "objectID": "html/sparklyr.html#yarn-client",
    "href": "html/sparklyr.html#yarn-client",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Yarn client",
    "text": "Yarn client\n\nInstall RStudio Server on an edge node\nLocate path to the clusterʼs Spark Home Directory, it normally is \"/usr/lib/spark\"\nBasic configuration example\n\n\nconf &lt;- spark_config()\nconf$spark.executor.memory &lt;- \"300M\"\nconf$spark.executor.cores &lt;- 2\nconf$spark.executor.instances &lt;- 3\nconf$spark.dynamicAllocation.enabled&lt;-\"false\"\n\n\nOpen a connection\n\n\nsc &lt;- spark_connect(\n  master = \"yarn\",\n  spark_home = \"/usr/lib/spark/\",\n  version = \"2.1.0\", config = conf\n)"
  },
  {
    "objectID": "html/sparklyr.html#yarn-cluster",
    "href": "html/sparklyr.html#yarn-cluster",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Yarn cluster",
    "text": "Yarn cluster\n\nMake sure to have copies of the yarn-site.xml and hive-site.xml files in the RStudio Server\nPoint environment variables to the correct paths\n\n\nSys.setenv(JAVA_HOME=\"[Path]\")\nSys.setenv(SPARK_HOME =\"[Path]\")\nSys.setenv(YARN_CONF_DIR =\"[Path]\")\n\n\nOpen a connection\n\n\nsc &lt;- spark_connect(master = \"yarn-cluster\")"
  },
  {
    "objectID": "html/sparklyr.html#kubernetes",
    "href": "html/sparklyr.html#kubernetes",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Kubernetes",
    "text": "Kubernetes\n\nUse the following to obtain the Host and Port system2(\"kubectl\", \"cluster-info\")\nOpen a connection\n\n\nsc &lt;- spark_connect(\n  config = spark_config_kubernetes(\n    \"k8s://https://[HOST]&gt;:[PORT]\",\n    account = \"default\",\n    image = \"docker.io/owner/repo:version\"\n    )\n  )"
  },
  {
    "objectID": "html/sparklyr.html#local-mode",
    "href": "html/sparklyr.html#local-mode",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Local mode",
    "text": "Local mode\nNo cluster required. Use for learning purposes only\n\nInstall a local version of Spark: spark_install()\nOpen a connection\n\n\nsc &lt;- spark_connect(master=\"local\")"
  },
  {
    "objectID": "html/sparklyr.html#cloud",
    "href": "html/sparklyr.html#cloud",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Cloud",
    "text": "Cloud\nAzure - spark_connect(method = \"synapse\")\nQubole - spark_connect(method = \"qubole\")"
  },
  {
    "objectID": "html/sparklyr.html#read-a-file-into-spark",
    "href": "html/sparklyr.html#read-a-file-into-spark",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Read a file into Spark",
    "text": "Read a file into Spark\nArguments that apply to all functions:\nsc, name, path, options=list(), repartition=0, memory=TRUE, overwrite=TRUE\n\nCSV: spark_read_csv(header = TRUE, columns = NULL, infer_schema = TRUE, delimiter = \",\", quote= \"\\\"\", escape = \"\\\\\", charset = \"UTF-8\", null_value = NULL)\nJSON: spark_read_json()\nPARQUET: spark_read_parquet()\nTEXT: spark_read_text()\nDELTA: spark_read_delta()"
  },
  {
    "objectID": "html/sparklyr.html#from-a-table",
    "href": "html/sparklyr.html#from-a-table",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "From a table",
    "text": "From a table\n\ndplyr::tbl(scr, ...) - Creates a reference to the table without loading its data into memory\ndbplyr::in_catalog() - Enables a three part table address\n\n\nx &lt;- tbl(sc,in_catalog(\"catalog\", \"schema\", \"table\"))"
  },
  {
    "objectID": "html/sparklyr.html#r-data-frame-into-spark",
    "href": "html/sparklyr.html#r-data-frame-into-spark",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "R data frame into Spark",
    "text": "R data frame into Spark\nSupported in Databricks Connect v2\n\ndplyr::copy_to(dest, df, name)\n\nApache Arrow accelerates data transfer between R and Spark. To use, simply load the library\n\nlibrary(sparklyr)\nlibrary(arrow)"
  },
  {
    "objectID": "html/sparklyr.html#dplyr-verbs",
    "href": "html/sparklyr.html#dplyr-verbs",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "dplyr verbs",
    "text": "dplyr verbs\nSupported in Databricks Connect v2\nTranslates into Spark SQL statements\n\ncopy_to(sc, mtcars) |&gt;\n  mutate(trm = ifelse(am == 0, \"auto\", \"man\")) |&gt;\n  group_by(trm) |&gt;\n  summarise_all(mean)"
  },
  {
    "objectID": "html/sparklyr.html#tidyr",
    "href": "html/sparklyr.html#tidyr",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "tidyr",
    "text": "tidyr\n\npivot_longer() - Collapse several columns into two. (Supported in Databricks Connect v2)\npivot_wider() - Expand two columns into several. (Supported in Databricks Connect v2)\nnest() / unnest() - Convert groups of cells into list-columns, and vice versa.\nunite() / separate() - Split a single column into several columns, and vice versa.\nfill() - Fill NA with the previous value."
  },
  {
    "objectID": "html/sparklyr.html#feature-transformers",
    "href": "html/sparklyr.html#feature-transformers",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Feature transformers",
    "text": "Feature transformers\n\nft_binarizer() - Assigned values based on threshold\nft_bucketizer() - Numeric column to discretized column\nft_count_vectorizer() - Extracts a vocabulary from document\nft_discrete_cosine_transform() - 1D discrete cosine transform of a real vector\nft_elementwise_product() - Element- wise product between 2 cols\nft_hashing_tf() - Maps a sequence of terms to their term frequencies using the hashing trick.\nft_idf() - Compute the Inverse Document Frequency (IDF) given a collection of documents.\nft_imputer() - Imputation estimator for completing missing values, uses the mean or the median of the columns.\nft_index_to_string() - Index labels back to label as strings\nft_interaction() - Takes in Double and Vector columns and outputs a flattened vector of their feature interactions.\nft_max_abs_scaler() - Rescale each feature individually to range [-1, 1] (Supported in Databricks Connect v2)\nft_min_max_scaler() - Rescale each feature to a common range [min, max] linearly\nft_ngram() - Converts the input array of strings into an array of n-grams\nft_bucketed_random_projection_lsh()\nft_minhash_lsh() - Locality Sensitive Hashing functions for Euclidean distance and Jaccard distance (MinHash)\nft_normalizer() - Normalize a vector to have unit norm using the given p-norm\nft_one_hot_encoder() - Continuous to binary vectors\nft_pca() - Project vectors to a lower dimensional space of top k principal components\nft_quantile_discretizer() - Continuous to binned categorical values.\nft_regex_tokenizer() - Extracts tokens either by using the provided regex pattern to split the text\nft_robust_scaler() - Removes the median and scales according to standard scale\nft_standard_scaler() - Removes the mean and scaling to unit variance using column summary statistics (Supported in Databricks Connect v2)\nft_stop_words_remover() - Filters out stop words from input\nft_string_indexer() - Column of labels into a column of label indices.\nft_tokenizer() - Converts to lowercase and then splits it by white spaces\nft_vector_assembler() - Combine vectors into single row-vector\nft_vector_indexer() - Indexing categorical feature columns in a dataset of Vector\nft_vector_slicer() - Takes a feature vector and outputs a new feature vector with a subarray of the original features\nft_word2vec() - Word2Vec transforms a word into a code"
  },
  {
    "objectID": "html/sparklyr.html#dplyr-ggplot2",
    "href": "html/sparklyr.html#dplyr-ggplot2",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "dplyr + ggplot2",
    "text": "dplyr + ggplot2\nSupported in Databricks Connect v2\n\ncopy_to(sc, mtcars) |&gt;\n  group_by(cyl) |&gt;\n  summarise(mpg_m = mean(mpg)) |&gt; # Summarize in Spark\n  collect() |&gt;                    # Collect results in R\n  ggplot() +\n  geom_col(aes(cyl, mpg_m))        # Create plot"
  },
  {
    "objectID": "html/sparklyr.html#regression",
    "href": "html/sparklyr.html#regression",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Regression",
    "text": "Regression\n\nml_linear_regression() - Linear regression.\nml_aft_survival_regression() - Parametric survival regression model named accelerated failure time (AFT) model.\nml_generalized_linear_regression() - GLM.\nml_isotonic_regression() - Uses parallelized pool adjacent violators algorithm.\nml_random_forest_regressor() - Regression using random forests."
  },
  {
    "objectID": "html/sparklyr.html#classification",
    "href": "html/sparklyr.html#classification",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Classification",
    "text": "Classification\n\nml_linear_svc() - Classification using linear support vector machines.\nml_logistic_regression() - Logistic regression. (Supported in Databricks Connect v2)\nml_multilayer_perceptron_classifier() - Based on the Multilayer Perceptron.\nml_naive_bayes() - It supports Multinomial NB which can handle finitely supported discrete data.\nml_one_vs_rest() - Reduction of Multiclass, performs reduction using one against all strategy."
  },
  {
    "objectID": "html/sparklyr.html#tree",
    "href": "html/sparklyr.html#tree",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Tree",
    "text": "Tree\n\nml_decision_tree_classifier(), ml_decision_tree(), `ml_decision_tree_regressor(). - Classification and regression using decision trees.\nml_gbt_classifier(), ml_gradient_boosted_trees(), ml_gbt_regressor() - Binary classification and regression using gradient boosted trees.\nml_random_forest_classifier() - Classification and regression using random forests.\nml_feature_importances(), ml_tree_feature_importance() - Feature Importance for Tree Models."
  },
  {
    "objectID": "html/sparklyr.html#clustering",
    "href": "html/sparklyr.html#clustering",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Clustering",
    "text": "Clustering\n\nml_bisecting_kmeans() - A bisecting k-means algorithm based on the paper.\nml_lda(), ml_describe_topics(), ml_log_likelihood(), ml_log_perplexity(), ml_topics_matrix() - LDA topic model designed for text documents.\nml_gaussian_mixture() - Expectation maximization for multivariate Gaussian Mixture Models (GMMs).\nml_kmeans(), ml_compute_cost(), ml_compute_silhouette_measure() - Clustering with support for k-means.\nml_power_iteration() - For clustering vertices of a graph given pairwise similarities as edge properties."
  },
  {
    "objectID": "html/sparklyr.html#recommendation",
    "href": "html/sparklyr.html#recommendation",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Recommendation",
    "text": "Recommendation\n\nml_als(), ml_recommend() - Recommendation using Alternating Least Squares matrix factorization."
  },
  {
    "objectID": "html/sparklyr.html#evaluation",
    "href": "html/sparklyr.html#evaluation",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Evaluation",
    "text": "Evaluation\n\nml_clustering_evaluator() - Evaluator for clustering.\nml_evaluate() - Compute performance metrics.\nml_binary_classification_evaluator(), ml_binary_classification_eval(), ml_classification_eval() - A set of functions to calculate performance metrics for prediction models."
  },
  {
    "objectID": "html/sparklyr.html#frequent-pattern",
    "href": "html/sparklyr.html#frequent-pattern",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Frequent pattern",
    "text": "Frequent pattern\n\nml_fpgrowth(), ml_association_rules(), ml_freq_itemsets() - A parallel FP-growth algorithm to mine frequent itemsets.\nml_freq_seq_patterns(), ml_prefixspan() - PrefixSpan algorithm for mining frequent itemsets."
  },
  {
    "objectID": "html/sparklyr.html#stats",
    "href": "html/sparklyr.html#stats",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Stats",
    "text": "Stats\n\nml_summary() - Extracts a metric from the summary object of a Spark ML model.\nml_corr() - Compute correlation matrix."
  },
  {
    "objectID": "html/sparklyr.html#feature",
    "href": "html/sparklyr.html#feature",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Feature",
    "text": "Feature\n\nml_chisquare_test(x,features,label) - Pearson’s independence test for every feature against the label.\nml_default_stop_words() - Loads the default stop words for the given language."
  },
  {
    "objectID": "html/sparklyr.html#utilities",
    "href": "html/sparklyr.html#utilities",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Utilities",
    "text": "Utilities\n\nml_call_constructor() - Identifies the associated sparklyr ML constructor for the JVM.\nml_model_data() - Extracts data associated with a Spark ML model.\nml_standardize_formula() - Generates a formula string from user inputs.\nml_uid() - Extracts the UID of an ML object."
  },
  {
    "objectID": "html/sparklyr.html#initialize-and-train",
    "href": "html/sparklyr.html#initialize-and-train",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Initialize and train",
    "text": "Initialize and train\nSupported in Databricks Connect v2\n\nml_pipeline() - Initializes a new Spark Pipeline.\nml_fit() - Trains the model, outputs a Spark Pipeline Model."
  },
  {
    "objectID": "html/sparklyr.html#save-and-retrieve",
    "href": "html/sparklyr.html#save-and-retrieve",
    "title": "Data science in Spark with sparklyr :: Cheatsheet",
    "section": "Save and retrieve",
    "text": "Save and retrieve\nSupported in Databricks Connect v2\n\nml_save() - Saves into a format that can be read by Scala and PySpark.\nml_read() - Reads Spark object into sparklyr.\n\n\n\n\n\n\nspark.posit.co/guides/pipelines"
  },
  {
    "objectID": "html/shiny-python.html",
    "href": "html/shiny-python.html",
    "title": "Shiny for Python :: Cheatsheet",
    "section": "",
    "text": "Download PDF\n\n  \n\nTranslations (PDF)\n\n\nSpanish"
  },
  {
    "objectID": "html/shiny-python.html#build-an-app",
    "href": "html/shiny-python.html#build-an-app",
    "title": "Shiny for Python :: Cheatsheet",
    "section": "Build an App",
    "text": "Build an App\nA Shiny app is an interactive web page (ui) powered by a live Python session run by a server (or by a browser with Shinylive).\nUsers can manipulate the UI, which will cause the server to update the UI’s displays (by running Python code).\nSave your app as app.py in a directory with the files it uses.\n\napp-name: The directory name is the app name\napp.py\nwww/: Place images, CSS, etc. to share with the browser in a folder named “www”\nInclude any other scripts, data sets, or assets used by the app in the same directory.\n\nRun shiny create . in the terminal to generate an app.py file based on a template.\nLaunch apps with shiny run app.py --reload\n\nfrom shiny import App, render, ui\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Nest Python functions to build an HTML interface\napp_ui = ui.page_fluid( # Layout the UI with Layout Functions\n \n  #  Add Inputs with ui.input_*() functions \n  ui.input_slider(\n    \"n\", \"Sample Size\", 0, 1000, 20\n  ),\n  # Add Outputs with ui.ouput_*() functions\n  ui.output_plot(\"dist\")\n)\n\ndef server(input, output, session):\n  \n  # For each output, define a function that generates the output\n  @render.plot # Specify the type of output with a @render. decorator\n  def dist(): # Use the output id as the function name\n    \n    # Call the values of UI inputs with input.&lt;id&gt;()\n    x = np.random.randn(input.n()) \n    plt.hist(x, range=[-3, 3])\n\n# Call App() to combine app_ui and server() into an interactive app\napp = App(app_ui, server)"
  },
  {
    "objectID": "html/shiny-python.html#share",
    "href": "html/shiny-python.html#share",
    "title": "Shiny for Python :: Cheatsheet",
    "section": "Share",
    "text": "Share\nShare your app in three ways:\n\nHost it on shinyapps.io, a cloud based service from Posit. To deploy Shiny apps:\n\nCreate a free or professional account at shinyapps.io\nUse the rsconnect-python package to publish with rsconnect deploy shiny &lt;path to directory&gt;\n\nPurchase Posit Connect, a publishing platform for R and Python. posit.co/products/enterprise/connect/\nUse open source deployment options. shiny.posit.co/py/docs/deploy.html"
  },
  {
    "objectID": "html/shiny-python.html#shinylive",
    "href": "html/shiny-python.html#shinylive",
    "title": "Shiny for Python :: Cheatsheet",
    "section": "Shinylive",
    "text": "Shinylive\nShinylive apps use WebAssembly to run entirely in a browser–no need for a special server to run Python.\n\nEdit and/or host Shinylive apps at shinylive.io\nCreate a Shinylive version of an app to deploy with shinylive export myapp site. Then deploy to a hosting site like Github or Netifly.\nEmbed Shinylive apps in Quarto sites, blogs, etc\n\nTo embed a Shinylive app in a Quarto doc, include the below syntax.\n---\nfilters:\n- shinylive\n---\n  \nAn embedded Shinylive app:\n  \n```{r}\n#| standalone: true\n# [App.py code here...]\n```"
  },
  {
    "objectID": "html/shiny-python.html#outputs",
    "href": "html/shiny-python.html#outputs",
    "title": "Shiny for Python :: Cheatsheet",
    "section": "Outputs",
    "text": "Outputs\nMatch ui.output_* functions to @render.* decorators\n\nTable of @render.*() decorators and their associated ui.output_*() functions.\n\n\n\n\n\n\ndecorator\nfunction\n\n\n\n\n@render.data_frame\nui.output_data_frame(id)\n\n\n@render.image\nui.output_image(id, width, height, click, dblclick, hover, brush, inline)\n\n\n@render.plot\nui.output_plot(id, width, height, click, dblclick, hover, brush, inline)\n\n\n@render.table\nui.output_table(id)\n\n\n@render.text\nui.output_text(id, container, inline) also ui.output_text_verbatim()\n\n\n@render.ui\nui.output_ui(id, inline, container, ...)\n\n\n@render.download\nui.download_button(id, label, icon, width,...)"
  },
  {
    "objectID": "html/shiny-python.html#inputs",
    "href": "html/shiny-python.html#inputs",
    "title": "Shiny for Python :: Cheatsheet",
    "section": "Inputs",
    "text": "Inputs\nUse a ui.input_*() function to make an input widget that saves a value as input.&lt;id&gt;. Input values are reactive and need to be called as input.&lt;id&gt;().\n\nui.input_action_button(id, label, icon, width, ...)\nui.input_action_link(id, label, icon, ...)\nui.input_task_button(id, label, icon, label_busy, icon_busy, width, type, auto_reset)\nui.input_checkbox(id, label, value, width)\nui.input_checkbox_group(id, label, choices, selected, inline, width)\nui.input_date(id, label, value, min, max, format, startview, weekstart, language, width, autoclose, datesdisabled, daysofweekdisabled)\nui.input_date_range(id, label, start, end, min, max, format, startview, weekstart, language, separator, width, autoclose)\nui.input_file(id, label, multiple, accept, width, buttonLabel, placeholder, capture)\nui.input_numeric(id, label, value, min, max, step, width)\nui.input_password(id, label, value, width, placeholder)\nui.input_radio_buttons(id, label, choices, selected, inline, width)\nui.input_select(id, label, choices, selected, multiple, selectize, width, size, remove_button, options)\nui.input_selectize(id,label, choices, selected, multiple, width, remove_button, options)\nui.input_slider(id, label, min, max, value, step, ticks, animate, width, sep, pre, post, timeFormat, timezone, dragRange)\nui.input_switch(id, label, value, width)\nui.input_text(id, label, value, width, placeholder, autocomplete, spellcheck) Also ui.input_text_area()"
  },
  {
    "objectID": "html/shiny-python.html#reactivity",
    "href": "html/shiny-python.html#reactivity",
    "title": "Shiny for Python :: Cheatsheet",
    "section": "Reactivity",
    "text": "Reactivity\nReactive values work together with reactive functions. Call a reactive value from within the arguments of one of these functions to avoid the error No current reactive context.\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the reactivity diagram\n\n\n\n\n\nPhases in the reactivity diagram\n\nCreate your own reactive values\n\nui.input_*()\n`reactive.value()``\n@reactive.file_reader()\n@reactive.poll()\n\nPerform side effects\n\n@reactive.Effect\n\nSchedule updates\n\nreactive.invalidate_later()\n\nCreate reactive expressions\n\nreactive.Calc()\n\nRemove reactivity\n\nreactive.isolate()\n\nReact based on event\n\n@reactive.event()\n\nRender reactive output\n\n@render*\n\n\n\n\n\n\nCreate Your own Reactive Values\n\nui.input_*() makes an input widget that saves a reactive value as input.&lt;id&gt;().\nreactive.value( ) Creates an object whose value you can set.\n\n#...\napp_ui = ui.page_fluid(\n    ui.input_text(\"a\", \"A\")\n)\n\ndef server(input, output, session):\n    rv = reactive.value()\n    rv.set(5) \n#...\n\n\n\n\nCreate Reactive Expressions\n\n@reactive.calc makes a function a reactive expression. Shiny notifies functions that use the expression when it becomes invalidated, triggering recomputation. Shiny caches the value of the expression while it is valid to avoid unnecessary computation.\n\n#...\ndef server(input, output, session ):\n    @reactive.calc\n    def re():\n        return input.a() + input.b()\n#...\n\n\n\n\nReact Based on Event\n\n@reactive.event() Makes a function react only when a specified value is invalidated, here input.a.\n\n#...\ndef server(input, output, session ):\n    @reactive.event(input.a)\n    def re():\n        return input.b()\n#...\n\n\n\n\nDisplay Reactive Output\n\nui.output_*() adds an output element to the UI.\n@render.* decorators render outputs\ndef &lt;id&gt;(): A function to generate the output\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"a\", \"A\"), \n    ui.output_text(\"b\"),\n)\n\ndef server(input, output, session ):\n    @render.text \n    def b():\n        return input.a()\n\n\n\n\nPerform Side Effects\n\n@reactive.effect Reactively trigger a function with a side effect. Call a reactive value or use @reactive.event to specify when the function will rerun.\n\n#...\ndef server(input, output, session ):\n    @reactive.effect\n    @reactive.event(input.a) \n    def print():\n        print(\"Hi\") \n#...\n\n\n\n\nRemove Reactivity\n\nreactive.isolate()Create non-reactive context within a reactive function. Calling a reactive value within this context will not cause the calling function to re-execute should the value become invalid.\n\n# ...\ndef server(input, output, session):\n    @render.text \n    def a():\n        with reactive.isolate():\n            return input.a() \n#..."
  },
  {
    "objectID": "html/shiny-python.html#layouts",
    "href": "html/shiny-python.html#layouts",
    "title": "Shiny for Python :: Cheatsheet",
    "section": "Layouts",
    "text": "Layouts\nCombine multiple elements into a “single element” that has its own properties with a panel function:\n\nui.panel_absolute()\nui.panel_conditional()\nui.panel_fixed()\nui.panel_main()\nui.panel_sidebar()\nui.panel_title()\nui.panel_well()\nui.row() / ui.column()\n\nLayout panels with a layout function. Add elements as arguments of the layout functions.\n\nui.page_sidebar()\n\n\napp_ui = ui.page_sidebar(  \n    ui.sidebar(\"Sidebar\", bg=\"#f8f8f),  \n    \"Main content\",  \n)  \n\n\nui.layout_columns() with `ui.card()\n\n\napp_ui = ui.page_fillable(\n    ui.layout_columns(\n        ui.card(\n            ...\n        ),\n        ui.card(\n            ...\n        ),\n    )\n)\n\nUse ui.nav_panel with ui.page_navbar to create tabs:\n\n# navset tab\napp_ui = ui.page_navbar(  \n    ui.nav_panel(\"A\", \"Page A content\"),  \n    ui.nav_panel(\"B\", \"Page B content\"),  \n    ui.nav_panel(\"C\", \"Page C content\"),  \n    title=\"App with navbar\",  \n    id=\"page\",  \n)"
  },
  {
    "objectID": "html/shiny-python.html#themes",
    "href": "html/shiny-python.html#themes",
    "title": "Shiny for Python :: Cheatsheet",
    "section": "Themes",
    "text": "Themes\nUse the shinyswatch package to add existing bootstrap themes to your Shiny app ui.\n\nimport shinyswatch\n\napp_ui = ui.page_fluid( \n    # ...\n    theme=shinyswatch.theme.darkly,\n)"
  },
  {
    "objectID": "html/shiny-python.html#shiny-for-r-comparison",
    "href": "html/shiny-python.html#shiny-for-r-comparison",
    "title": "Shiny for Python :: Cheatsheet",
    "section": "Shiny for R Comparison",
    "text": "Shiny for R Comparison\nShiny for Python is quite similar to Shiny for R with a few important differences:\n\nCall inputs as input.&lt;id&gt;()\n\n\nR\n\ninput$x\n\nPython\n\ninput.x()\n\n\n\nUse decorators to create and render outputs. Define outputs as functions def &lt;id&gt;():\n\n\nR\n\noutput$y &lt;-\n    renderText(z())\n\nPython\n\n@renderText \n    def y():\n        return z()\n\n\n\nTo create a reactive expression, use @reactive.calc\n\n\nR\n\nz &lt;- reactive({\n    input$x + 1\n})\n\nPython\n\n@reactive.calc \ndef z():\n    return input.x()+1\n\n\n\nTo create an observer, use @reactive.effect\n\n\nR\n\na &lt;- observe({\n    print(input$x)\n})\n\nPython\n\n@reactive.effect \ndef a():\n    print(input.x())\n\n\n\nCombine these with @reactive.event\n\n\nR\n\nb &lt;- eventReactive(\n    input$goCue,\n    {\n        input$x + 1\n    }\n)\n\nPython\n\n@reactive.calc \n@reactive.event(input.go_cue )\ndef b():\n    return input.x() + 1\n\n\n\nUse reactive.value() instead of reactiveVal()\n\n\nR\n\nreactiveVal(1)\n\nPython\n\nreactive.value(1)\n\n\n\nUse nav_*() instead of *Tab()\n\n\nR\n\ninsertTab()\nappendTab()\n# etc.\n\nPython\n\nnav_insert() \nnav_append() \n# etc.\n\n\n\nFunctions are intuitively organized into submodules\n\n\nR\n\ndateInput()\ntextInput()\n# etc.\n\nPython\n\nui.input_date() \nui.input_text() \n# etc.\n\n\n\nCC BY SA Posit Software, PBC • info@posit.co • posit.co\nLearn more at shiny.posit.co/py/\nUpdated: 2025-07.\nVersion: Shiny 0.10.2"
  },
  {
    "objectID": "html/rmarkdown.html",
    "href": "html/rmarkdown.html",
    "title": "rmarkdown :: Cheatsheet",
    "section": "",
    "text": "Download PDF\n\n  \n\nTranslations (PDF)\n\n\nDutch\nGerman\nItalian\nJapanese\nKorean\nSpanish\nTurkish\nVietnamese"
  },
  {
    "objectID": "html/rmarkdown.html#what-is-rmarkdown",
    "href": "html/rmarkdown.html#what-is-rmarkdown",
    "title": "rmarkdown :: Cheatsheet",
    "section": "What is rmarkdown?",
    "text": "What is rmarkdown?\n\n.Rmd files: Develop your code and ideas side-by-side in a single document. Run code as individual chunks or as an entire document.\nDynamic Documents: Knit together plots, tables, and results with narrative text. Render to a variety of formats like HTML, PDF, MS Word, or MS PowerPoint.\nReproducible Research: Upload, link to, or attach your report to share. Anyone can read or run your code to reproduce your work."
  },
  {
    "objectID": "html/rmarkdown.html#workflow",
    "href": "html/rmarkdown.html#workflow",
    "title": "rmarkdown :: Cheatsheet",
    "section": "Workflow",
    "text": "Workflow\n\nOpen a new .Rmd file in the RStudio IDE by going to File &gt; New File &gt; R Markdown.\nEmbed code in chunks. Run code by line, by chunk, or all at once.\nWrite text and add tables, figures, images, and citations. Format with Markdown syntax or the RStudio Visual Markdown Editor.\nSet output format(s) and options in the YAML header. Customize themes or add parameters to execute or add interactivity with Shiny.\nSave and render the whole document. Knit periodically to preview your work as you write.\nShare your work!\n\n\nSource Editor\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the features in the Source Editor\n\n\n\n\n\nFeatures within the Source Editor\n\nNew File\nEmbed Code\nWrite Text\nSet Output Format(s) and Options\nSave and Render\nShare\n\n\nSet preview location\nInsert code chunk\nGo to code chunk\nRun code chunk(s)\nShow outline\nModify chunk options\nRun all previous chunks\nRun current chunk\nSwitch to visual editor\n\n\n\n\n\n\nVisual Editor\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the features in the Visual Editor\n\n\n\n\n\nFeatures within the Visual Editor\n\nInsert citations\nStyle options\nAdd/edit attributes\nSwitch to source editor\n\n\n\n\n\n\nRendered Output\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the features in the Rendered Output Window\n\n\n\n\n\nFeatures within the Rendered Output Window\n\nFile path to output document\nFind in document\nPublish to rpubs.com, shinyapps.io, Posit Connect\nReload document"
  },
  {
    "objectID": "html/rmarkdown.html#embed-code-with-knitr",
    "href": "html/rmarkdown.html#embed-code-with-knitr",
    "title": "rmarkdown :: Cheatsheet",
    "section": "Embed Code With knitr",
    "text": "Embed Code With knitr\n\nCode Chunks\nSurround code chunks with ```{r} and ``` or use the Insert Code Chunk button. Add a chunk label and/or chunk options inside the curly braces after r.\n```{r chunk-label, include = FALSE}\n```\n\n\nSet Global Options\nSet options for the entire document in the first chunk.\n```{r include = FALSE}\nknitr::opts_chunk$set(message = FALSE)\n```\n\n\nInline Code\nInsert `r &lt;code&gt;` into text sections. Code is evaluated at render and results appear as text.\nThe markdown text\nBuilt with `r getRversion()` \nwill render as “Built with 4.4.0” in the output file.\n\n\nChunk Options\n\nTable of chunk options. The first column is the option name, the second column is the option’s default value, the third column describes what the option does.\n\n\n\n\n\n\n\nOption\nDefault\nEffects\n\n\n\n\necho\nTRUE\ndisplay code in output document\n\n\nerror\nFALSE\nTRUE (display error messages in doc), FALSE (stop render when error occurs)\n\n\neval\nTRUE\nrun code in chunk\n\n\ninclude\nTRUE\ninclude chunk in doc after running\n\n\nmessage\nTRUE\ndisplay code messages in document\n\n\nwarning\nTRUE\ndisplay code warnings in document\n\n\nresults\n\"markup\"\n\"asis\" (pass through results), \"hide\" (don’t display results), \"hold\" (put all results below all code)\n\n\nfig.align\n\"default\"\n\"left\", \"right\", or \"center\"\n\n\nfig.alt\nNULL\nalt text for a figure\n\n\nfig.cap\nNULL\nfigure caption as a character string\n\n\nfig.path\n\"figure/\"\nprefix for generating file paths\n\n\nfig.width & fig.height\n7\nplot dimensions in inches\n\n\nout.width\n\nrescales output width, e.g. \"75%\", \"300px\"\n\n\ncollapse\nFALSE\ncollapse all sources & output into a single block\n\n\ncomment\n\"##\"\nprefix for each line of results\n\n\nchild\nNULL\nfile(s) to knit and then include\n\n\npurl\nTRUE\ninclude or exclude a code chunk when extracting source code with knitr::purl()\n\n\n\nSee more options and defaults by running str(knitr::opts_chunk$get())."
  },
  {
    "objectID": "html/rmarkdown.html#insert-citations",
    "href": "html/rmarkdown.html#insert-citations",
    "title": "rmarkdown :: Cheatsheet",
    "section": "Insert Citations",
    "text": "Insert Citations\nCreate citations from a bibliography file, a Zotero library, or from DOI references.\n\nBuild Your Bibliography\n\nAdd BibTex or CSL bibliographies to the YAML header.\n---\ntitle: \"My Document\"\nbibliography: references.bib\nlink-citations: TRUE\n---\nIf Zotero is installed locally, your main library will automatically be available.\nAdd citations by DOI by searching “from DOI” in the Insert Citation dialog.\n\n\n\nInsert Citations\n\nAccess the Insert Citations dialog in the Visual Editor by clicking the @ symbol in the toolbar or by clicking Insert &gt; Citation.\nAdd citations with markdown syntax by typing [@cite] or @cite."
  },
  {
    "objectID": "html/rmarkdown.html#insert-tables",
    "href": "html/rmarkdown.html#insert-tables",
    "title": "rmarkdown :: Cheatsheet",
    "section": "Insert Tables",
    "text": "Insert Tables\nOutput data frames as tables using kable(data, caption).\n```{r}\ndata &lt;- faithful[1:4,]\nknitr::kable(data, caption = \"Tables with kable\")\n```\nOther table packages include flextable, gt, and kableExtra."
  },
  {
    "objectID": "html/rmarkdown.html#write-with-markdown",
    "href": "html/rmarkdown.html#write-with-markdown",
    "title": "rmarkdown :: Cheatsheet",
    "section": "Write With Markdown",
    "text": "Write With Markdown\nThe syntax on the left renders as the output on the right.\n\nTable of markdown syntax and rendered examples. The syntax in the first column renders to the output in the second column.\n\n\nMarkdown Syntax\nPlain text.\nRendered Output\nPlain text.\n\n\n\n\n\n\nEnd a line with two spaces to\nstart a new paragraph.\nEnd a line with two spaces to\nstart a new paragraph.\n\n\nAlso end a line with a backslash\\\nto make a new line.\nAlso end a line with a backslash\nto make a new line.\n\n\n*italics* and **bold**\nitalics and bold\n\n\nsuperscript^2^/subscript~2~\nsuperscript2 /subscript2\n\n\n~~strike through~~\nstrike through\n\n\nescaped: \\* \\_ \\\\\nescaped: * _ \\\n\n\nen dash: --, em dash: ---\nen dash: –, em dash: —\n\n\n# Header 1\nHeader 1\n\n\n## Header 2\nHeader 2\n\n\n...\n…\n\n\n###### Header 6\nHeader 6\n\n\n- unordered list\n- item 2\n    - item 2a (indent 1 tab)\n    - item 2b\n\nunordered list\nitem 2\n\nitem 2a (indent 1 tab)\nitem 2b\n\n\n\n\n1. ordered list\n2. item 2\n  - item 2a (indent 1 tab)\n  - item 2b\n\nordered list\nitem 2\n\nitem 2a\nitem 2b\n\n\n\n\n&lt;link url&gt;\nhttps://posit.co/\n\n\n[This is a link.](link url)\nThis is a link.\n\n\n[This is another link.][id].\n\nAt the end of the document:\n[id]: link url\nThis is another link.\n\n\n![Caption](image.png)\n\nor\n\n![Caption](id2)\n\nAt the end of the document include:\n[id2]: image.png\n\n\n\nR Markdown logo\n\n\n\n\n`verbatim code`\nverbatim code\n\n\n```\nmultiple lines\nof verbatim code\n```\nmultiple lines\nof verbatim code\n\n\n&gt; block quotes\n\nblock quotes\n\n\n\nequation: $e^{i \\pi} + 1 = 0$\nequation: \\(e^{i \\pi} + 1 = 0\\)\n\n\nequation block:\n$$E = mc^{2}$$\nequation block:\n\\[\nE = mc^{2}\n\\]\n\n\nhorizontal rule:\n---\nhorizontal rule:\n\n\n\n|Right|Left|Default|Center|\n|----:|:---|-------|:----:|\n|12   |12  |12     |12    |\n|123  |123 |123    |123   |\n|1    |1   |1      |1     |\n\nTable: Caption text, example rendered table\n\nCaption text, example rendered table.\n\n\nRight\nLeft\nDefault\nCenter\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1\n\n\n\n\n\nHTML Tabsets\n## Results {.tabset}\n### Plots\ntext\n\n### Tables\nmore text\nResults\n\nPlotsTables\n\n\ntext\n\n\nmore text"
  },
  {
    "objectID": "html/rmarkdown.html#set-output-formats-and-their-options-in-yaml",
    "href": "html/rmarkdown.html#set-output-formats-and-their-options-in-yaml",
    "title": "rmarkdown :: Cheatsheet",
    "section": "Set Output Formats and Their Options in YAML",
    "text": "Set Output Formats and Their Options in YAML\nUse the document’s YAML header to set an output format and customize it with output options. Indent format 2 characters, indent options 4 characters.\n---\ntitle: \"My Document\"\nauthor: \"Author Name\"\noutput:\n  html_document: \n    toc: true\n    toc-location: left\n---\n\nOutput Format Table\n\nTable of output formats. The output format in the first column creates the file type in the second column.\n\n\nOutput Format\nCreates\n\n\n\n\nhtml_document\n.html\n\n\npdf_document1\n.pdf\n\n\nword_document\nMicrosoft Word (.docx)\n\n\npowerpoint_presentation\nMicrosoft PowerPoint (.pptx)\n\n\nodt_document\nOpenDocument Text\n\n\nrtf_document\nRich Text Format\n\n\nmd_document\nMarkdown\n\n\ngithub_document\nMarkdown for Github\n\n\nioslides_presentations\nioslides HTML slides\n\n\nslidy_presentation\nSlidy HTML slides\n\n\nbeamer_presentation2\nBeamer slides\n\n\n\nAlso see flexdashboard, bookdown, distill, and blogdown.\n\n\nOutput Options Table\n\nTable of output options. The first column is the option name, the second column is the description and possible values, and then remaining columns show what file types each option can be applied to.\n\n\n\n\n\n\n\n\n\n\nImportant Options\nDescription\nHTML\nPDF\nMS Word\nMS PPT\n\n\n\n\nanchor_sections\nShow section anchors on mouse hover (TRUE or FALSE)\nX\n\n\n\n\n\ncitation_package\nThe LaTeX package to process citations (“default”, “natbib”, biblatex”)\n\n\n\n\n\n\ncode_download\nGive readers an option to download the .Rmd source code (TRUE or FALSE)\nX\n\n\n\n\n\ncode_folding\nLet readers toggle the display of R code (“none”, “hide”, or “show”)\nX\n\n\n\n\n\ncss\nCSS or SCSS file to use to style the document (e.g. “style.css”)\nX\n\n\n\n\n\ndev\nGraphics device to use for figure output (e.g. “png”, “pdf”)\nX\nX\n\n\n\n\ndf_print\nMethod for printing data frames (“default”, “kable”, “tibble”, “paged”)\nX\nX\nX\nX\n\n\nfig_caption\nShould figures be rendered with captions (TRUE or FALSE)\nX\nX\nX\nX\n\n\nhighlight\nSyntax highlighting (“tango”, “pygments”, “kate”, “zenburn”, “textmate”)\nX\nX\nX\n\n\n\nincludes\nFile of content to place in doc (“in_header”, “before_body”, “after_body”)\nX\nX\n\n\n\n\nkeep_md\nKeep the Markdown .md file generated by knitting (TRUE or FALSE)\nX\nX\nX\nX\n\n\nkeep_tex\nKeep the intermediate TEX file used to convert to PDF (TRUE or FALSE)\n\nX\n\n\n\n\nlatex_engine\nLaTeX engine for producing PDF output (“pdflatex”, “xelatex”, or “lualatex”)\n\nX\n\n\n\n\nreference_docx/_doc\ndocx/pptx file containing styles to copy in the output (e.g. “file.docx”, “file.pptx”)\n\n\nX\nX\n\n\ntheme\nTheme options (see Bootswatch and Custom Themes below)\nX\n\n\n\n\n\ntoc\nAdd a table of contents at start of document (TRUE or FALSE)\nX\nX\nX\nX\n\n\ntoc_depth\nThe lowest level of headings to add to table of contents (e.g. 2, 3)\nX\nX\nX\nX\n\n\ntoc_float\nFloat the table of contents to the left of the main document content (TRUE or FALSE)\nX\n\n\n\n\n\n\nUse ?&lt;output_format&gt; to see all of a format’s options, e.g. ?html_document"
  },
  {
    "objectID": "html/rmarkdown.html#more-header-options",
    "href": "html/rmarkdown.html#more-header-options",
    "title": "rmarkdown :: Cheatsheet",
    "section": "More Header Options",
    "text": "More Header Options\n\nParameters\nParameterize your documents to ruse with new inputs (e.g. data, values, etc.).\n\nAdd parameters in the header as sub-values of params.\n---\nparams:\n  state: \"hawaii\"\n---\nCall parameters in code using params$name.\n```{r}\ndata &lt;- df[,params$state]\nsummary(data)\n```\nSet parameters with Knit with Parameters or the params argument of render().\n\n\n\nReusable Templates\n\nCreate a new package with an inst/rmarkdown/templates directory.\nAdd a folder containing template.yaml (below) and skeleton.Rmd (template contents).\n---\nname: \"My Template\"\n---\nInstall the package to access template by going to File &gt; New R Markdown &gt; From Template.\n\n\n\nBootswatch Themes\nCustomize HTML documents with Bootswatch themes from the bslib package using the theme output option. Use bslib::bootswatch_themes() to list available themes.\n---\ntitle: \"My Document\"\nauthor: \"Author Name\"\noutput:\n  html_document:\n    theme:\n      bootswatch: solar\n---\n\n\nCustom Themes\nCustomize individual HTML elements using bslib variables. Use ?bs_theme to see more variables.\n---\noutput:\n  html_document:\n    theme:\n      bg: \"#121212\"\n      fg: \"#E4E4E4\"\n      base_font:\n        google: \"Prompt\"\n---\nMore on bslib at https://pkgs.rstudio.com/bslib/.\n\n\nStyling With CSS and SCSS\nAdd CSS and SCSS to your documents by adding a path to a file with the css option in the YAML header.\n---\ntitle: \"My Document\"\nauthor: \"Author Name\"\noutput:\n  html_document:\n    css: \"style.css\"\n---\nApply CSS styling by writing HTML tags directly or:\n\nUse markdown to apply style attributes inline.\n\nBracketed Span\nA [green]{.my-color} word. will render as “A green word.”\nFenced Div\n:::{.my-color}\nAll of these words\nare green\n:::\nwill render as\n\nAll of these words\nare green.\n\n\nUse the Visual Editor. Go to Format &gt; Div/Span and add CSS styling directly with Edit Attributes.\n\n\n\nInteractivity\nTurn your report into an interactive Shiny document in 4 steps:\n\nAdd runtime: shiny to the YAML header.\n---\noutput: html_document\nruntime: shiny\n---\nCall Shiny input functions to embed input objects.\nCall Shiny output functions to embed reactive output.\n```{r echo = FALSE}\nnumericInput(\"n\", \"How many cars?\", 5)\n\nrenderTable({\n  head(cars, input$n)\n})\n```\nRender with rmarkdown::run() or click Run Document in RStudio IDE.\n\nAlso see Shiny Prerendered for better performance. https://rmarkdown.rstudio.com/authoring_shiny_prerendered.\nEmbed a complete Shiny app into your document with shiny::shinyAppDir(). More at https://bookdown.org/yihui/rmarkdown/shiny-embedded.html."
  },
  {
    "objectID": "html/rmarkdown.html#render",
    "href": "html/rmarkdown.html#render",
    "title": "rmarkdown :: Cheatsheet",
    "section": "Render",
    "text": "Render\nWhen you render a document, rmarkdown:\n\nRuns the code and embeds results and text into an .md file with knitr.\nConverts the .md file into the output format with Pandoc.\n\nSave, then Knit to preview the document output. The resulting HTML/PDF/MS Word/etc. document will be created and saved in the same directory as the .Rmd file.\nUse rmarkdown::render() to render/knit in the R console. See ?render for available options."
  },
  {
    "objectID": "html/rmarkdown.html#share",
    "href": "html/rmarkdown.html#share",
    "title": "rmarkdown :: Cheatsheet",
    "section": "Share",
    "text": "Share\nPublish on Posit Connect to share R Markdown documents securely, schedule automatic updates, and interact with parameters in real-time. https://posit.co/products/enterprise/connect/.\n\nCC BY SA Posit Software, PBC • info@posit.co • posit.co\nLearn more at rmarkdown.rstudio.com.\nUpdated: 2024-05.\n\npackageVersion(\"rmarkdown\")\n\n[1] '2.27'"
  },
  {
    "objectID": "html/rmarkdown.html#footnotes",
    "href": "html/rmarkdown.html#footnotes",
    "title": "rmarkdown :: Cheatsheet",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nPDFs and Beamer slides require LaTeX, use tinytex::install_tinytex().↩︎\nPDFs and Beamer slides require LaTeX, use tinytex::install_tinytex().↩︎"
  },
  {
    "objectID": "html/quarto.html",
    "href": "html/quarto.html",
    "title": "Publish and Share with Quarto :: Cheatsheet",
    "section": "",
    "text": "Download PDF\n\n  \n\nTranslations (PDF)\n\n\nSpanish"
  },
  {
    "objectID": "html/quarto.html#overview",
    "href": "html/quarto.html#overview",
    "title": "Publish and Share with Quarto :: Cheatsheet",
    "section": "Overview",
    "text": "Overview\n1\n\nAuthor: Write and code in plain text. Author documents as .qmd files, or Jupyter notebooks. Write in a rich Markdown syntax.\nRender: Generate documents, presentations and more. Produce HTML, PDF, MS Word, reveal.js, MS Powerpoint, Beamer, websites, blogs, books…\nShare: Share your work with the world. Quickly deploy to GitHub Pages, Netlify, Quarto Pub, Posit Cloud, or Posit Connect.\n\n\nGet Quarto\nGet Quarto from: https://quarto.org/docs/download/\nOr, use version bundled with RStudio or Positron.\n\n\nGet Started\nhttps://quarto.org/docs/get-started"
  },
  {
    "objectID": "html/quarto.html#author",
    "href": "html/quarto.html#author",
    "title": "Publish and Share with Quarto :: Cheatsheet",
    "section": "Author",
    "text": "Author\n\nSource File: hello.qmd\n---\ntitle: \"Hello, Penguins\"\nformat: html\nexecute:\n  echo: false\n---\n\n## Meet the penguins\n\nThe `penguins` data contains size measurements for \npenguins from three islands in the Palmer Archipelago, \nAntarctica.\n\nThe three species of penguins have quite distinct \ndistributions of physical dimensions (@fig-penguins).\n\n```{r}\n#| label: fig-penguins\n#| fig-cap: \"Dimensions of penguins across three species.\"\n#| warning: false\nlibrary(tidyverse, quietly = TRUE)\nlibrary(palmerpenguins)\npenguins |&gt;\n  ggplot(aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point(aes(color = species)) +\n  scale_color_manual(\n    values = c(\"darkorange\", \"purple\", \"cyan4\")) +\n  theme_minimal()\n```\n\n\nHighlights in the source file\n\nSet format(s) and options. Use YAML Syntax.\n---\ntitle: \"Hello, Penguins\"\nformat: html\nexecute:\n  echo: false\n---\n## Write with **Markdown**\nRStudio: Help &gt; Markdown Quick Reference\nRStudio, Positron and VS Code: Use the Visual Editor\n## Meet the penguins\n\nThe `penguins` data contains size measurements for \npenguins from three islands in the Palmer Archipelago, \nAntarctica.\n\nThe three species of penguins have quite distinct \ndistributions of physical dimensions (@fig-penguins).\nInclude code. R, Python, Julia, Observable, or any language with a Jupyter kernel.\n```{r}\n#| label: fig-penguins\n#| fig-cap: \"Dimensions of penguins across three species.\"\n#| warning: false\nlibrary(tidyverse, quietly = TRUE)\nlibrary(palmerpenguins)\npenguins |&gt;\n  ggplot(aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point(aes(color = species)) +\n  scale_color_manual(\n    values = c(\"darkorange\", \"purple\", \"cyan4\")) +\n  theme_minimal()\n```\n\n\n\nUse a tool with a rich authoring experience\nRStudio,\nPositron with bundled Quarto extension, or\nVisual Studio Code + Quarto extension\n\nRun code cells as you write\nRender with a button or keyboard shortcut\nEdit Quarto documents with a Visual Editor\n\n\nApply formatting in Visual Editor. Saved as Markdown in source.\nInsert elements like code cells, cross references, and more.\n\n\n\n\nOr any text editor\nQuarto documents (.qmd) can be edited in any tool that edits text."
  },
  {
    "objectID": "html/quarto.html#render",
    "href": "html/quarto.html#render",
    "title": "Publish and Share with Quarto :: Cheatsheet",
    "section": "Render",
    "text": "Render\nSave, then render to preview the document output.\n\n\nTerminal\n\nquarto preview hello.qmd\n\nRStudio: Use Render button \nPositron and VS Code: Use Preview button \nThe resulting HTML/PDF/MS Word/etc. document will be created and saved in the same directory as the source .qmd file.\n\nRendered output: hello.html\n\n\n\nHighlights in the rendered output\n\nFeatures for scientific publishing. Cross references, citations, equations, and more.\nOutput integrated into document. Control how output appears with special comments in your code.\n\n\n\nBehind the Scenes\nWhen you render a document, Quarto:\n\nRuns the code and embeds results and text into an .md file with:\n\nKnitr, if any {r} cells, or\nJupyter, if any other cells.\n\nConverts the .md file into the output format with Pandoc."
  },
  {
    "objectID": "html/quarto.html#publish",
    "href": "html/quarto.html#publish",
    "title": "Publish and Share with Quarto :: Cheatsheet",
    "section": "Publish",
    "text": "Publish\n\n\nTerminal\n\nquarto publish {venue} hello.qmd\n\n{venue}: quarto-pub, connect, gh-pages, netlify, confluence\n\nQuarto Pub Free publishing service for Quarto content.\nPosit Connect Org-hosted, control access, schedule updates.\nRStudio: Use Publish button \nPositron and VS Code: Use Posit Publisher extension."
  },
  {
    "objectID": "html/quarto.html#quarto-projects",
    "href": "html/quarto.html#quarto-projects",
    "title": "Publish and Share with Quarto :: Cheatsheet",
    "section": "Quarto Projects",
    "text": "Quarto Projects\n\nCreate websites, books and more\nA directory of Quarto documents + a configuration file (_quarto.yml)\nSee examples at: https://quarto.org/docs/gallery/\nGet started from the command line:\n\n\nTerminal\n\nquarto create project {type}\n\n{type}: default, website, blog, book, confluence, manuscript\nRStudio: Use File &gt; New Project\nPositron and VS Code: Use Quarto: Create Project command"
  },
  {
    "objectID": "html/quarto.html#include-code",
    "href": "html/quarto.html#include-code",
    "title": "Publish and Share with Quarto :: Cheatsheet",
    "section": "Include Code",
    "text": "Include Code\n\nCode Cells\nCode cells start with ```{language}, and end with ```.\nRStudio, Positron & VS Code: Use Insert Code Chunk/Cell.\n\n\n\n```{r}\n#| label: chunk-id\n```\n\n\n```{python}\n#| label: chunk-id\n```\n\n\n\nOther languages: {julia}, {ojs}\nAdd code cell options with #| comments.\nCell options control execution, figures, tables, layout and more. See them all at: https://quarto.org/docs/reference/cells/\n\n\nExecution Options\n\n\n\n\n\n\n\n\nOption\nDefault\nEffects\n\n\n\n\necho\ntrue\nfalse: hide code in output\nfenced: include code cell syntax\n\n\neval\ntrue\nfalse: don’t run code\n\n\ninclude\ntrue\nfalse: don’t include code or results\n\n\noutput\ntrue\nfalse: don’t include results\nasis: treat results as raw markdown\n\n\nwarning\ntrue\nfalse: don’t include warnings in output\n\n\nerror\nfalse\ntrue: include error in output and continue with render\n\n\n\nSet execution options at the cell level:\n\n\n\n```{r}\n#| echo: false\n```\n\n\n```{python}\n#| echo: false\n```\n\n\n\nSet options in code cells with #| comments and YAML syntax: key: value.\nOr globally in the YAML header with the execute option:\n---\nexecute:\n  echo: false\n---\n\n\nInline Code\nUse computed values directly in text sections. Code is evaluated at render and results appear as text.\n\n\n\nKnitr\nValue is `r 2 + 2`.\n\n\nJupyter\nValue is `{python} 2 + 2`.\n\n\nOutput\nValue is 4."
  },
  {
    "objectID": "html/quarto.html#set-formats-and-options",
    "href": "html/quarto.html#set-formats-and-options",
    "title": "Publish and Share with Quarto :: Cheatsheet",
    "section": "Set Formats and Options",
    "text": "Set Formats and Options\n\n\n\n\nSet Format Options\n---\ntitle: \"My Document\"\nformat: \n  html: \n    code-fold: true\n    toc: true\n---\n\nIndent format 2 spaces\nIndent options 4 spaces\n\n\n\n\nMultiple Formats\n---\ntitle: \"My Document\"\ntoc: true\nformat: \n  html: \n    code-fold: true\n  pdf: default\n---\n\nTop-level options (e.g. toc) apply to all formats\n\n\n\n\nCommon values for format: html, pdf2, docx, odt, rtf, gfm, pptx, revealjs, beamer 3\nRender all formats:\n\n\nTerminal\n\nquarto render hello.qmd\n\nRender a specific format:\n\n\nTerminal\n\nquarto render hello.qmd --to pdf\n\n\nOutput Options Table\n\n\n\n\n\n\nImportant Options. The first column is the option name, an “X” in the next three columns indicates whether the option applies to the format, the fourth column describes the options and possible values, the final column indicates whether the options can also be set in a code cell.\n\n\n\n\n\n\n\n\n\n\nOption\nhtml/revealjs\npdf/beamer\ndocx/pptx\nDescription\ncell level?\n\n\n\n\nNavigation\n\n\ntoc\nX\nX\nX\nAdd a table of contents (true or false)\n\n\n\n\ntoc-depth\nX\nX\nX\nLowest level of headings to add to table of contents (e.g. 2, 3)\n\n\n\n\nanchor-sections\nX\n\n\n\n\nShow section anchors on mouse hover (true or false)\n\n\n\n\nStyle\n\n\nhighlight-style\nX\nX\nX\nSyntax highlighting theme (e.g. arrow, pygments, kate, zenburn)\n\n\n\n\nmainfont, monofont\nX\nX\n\n\nFont name. HTML: sets CSS font-family; LaTeX: via fontspec package\n\n\n\n\ntheme\nX\n\n\n\n\nBootswatch theme name (e.g. cosmo, darkly, solar etc.)\n\n\n\n\ncss\nX\n\n\n\n\nCSS or SCSS file to use to style the document (e.g. \n\n\n\n\nreference-doc\n\n\n\n\nX\ndocx/pptx file containing template styles (e.g. file.docx, file.pptx)\n\n\n\n\nNA\n\n\ninclude-in-header\nX\nX\n\n\nFiles of content to include in header of output document, also include-before-body, include-after-body\n\n\n\n\nkeep-md\nX\nX\nX\nKeep intermediate files (true or false), also keep-tex, keep-ipynb\n\n\n\n\nLaTeX\n\n\ndocumentclass\n\n\nX\n\n\nLaTeX document class, set document options with classoption\n\n\n\n\npdf-engine\n\n\nX\n\n\nLaTeX engine to produce PDF output (xelatex, pdflatex, lualatex)\n\n\n\n\ncite-method\n\n\nX\n\n\nMethod used to format citations (citeproc, natbib, biblatex)\n\n\n\n\nCode\n\n\ncode-fold\nX\n\n\n\n\nLet readers toggle the display of R code (false, true, or show)\nX\n\n\ncode-tools\nX\n\n\n\n\nAdd menu for hiding, showing, and downloading code (true or false)\n\n\n\n\ncode-overflow\nX\n\n\n\n\nDisplay of wide code (scroll, or wrap)\nX\n\n\nFigures\n\n\nfig-align\nX\nX\ndocx only\nAlignment of figures (default, left, right, center)\nX\n\n\nfig-width, fig-height\nX\nX\nX\nDefault width and height for figures in inches\nKnitr only\n\n\nfig-format\nX\nX\nX\nFormat for Matplotlib or R figures (retina, png, jpeg, svg, or pdf)\n\n\n\n\n\n\n\n\n\nVisit https://quarto.org/docs/reference/ to see all options by format"
  },
  {
    "objectID": "html/quarto.html#add-content",
    "href": "html/quarto.html#add-content",
    "title": "Publish and Share with Quarto :: Cheatsheet",
    "section": "Add Content",
    "text": "Add Content\n\nFigures\n\nMarkdown\n![CAP](image.png){#fig-LABEL fig-alt=\"ALT\"}\n\n\nComputation\n```{python}\n#| label: fig-LABEL\n#| fig-cap: CAP\n#| fig-alt: ALT\n{{ plot code here }}\n```\nOr {r}\n\n\n\nTables\n\nMarkdown\n|object | radius|\n|:------|------:|\n|Sun    | 696000|\n|Earth  |   6371|\n\n: CAPTION {#tbl-LABEL}\n\n\nComputation\nOutput a markdown table or an HTML table from your code.\n\n\n\nKnitr\nUse knitr::kable() to produce markdown:\n```{r}\n#| label: tbl-LABEL\n#| tbl-cap: CAPTION\n\nknitr::kable(head(cars))\n```\nAlso see the R packages: gt, flextable, kableExtra.\n\n\nJupyter\nAdd Markdown() to Markdown output:\n```{python}\n#| label: tbl-LABEL\n#| tbl-cap: CAPTION\nimport pandas as pd, tabulate\nfrom IPython.display import Markdown\ndf = pd.DataFrame({\"A\": [1, 2], \n                   \"B\": [1, 2]})\nMarkdown(df.to_markdown(index=False))\n```\n\n\n\n\n\n\nCross References\n\nAdd labels:\n\nCode cell: add option label: prefix-LABEL\nMarkdown: add attribute #prefix-LABEL\n\nAdd references: @prefix-LABEL, e.g.\nYou can see in @fig-scatterplot, that...\n\n\n\n\nprefix\nRenders\n\n\n\n\nfig-\nFigure 1\n\n\ntbl-\nTable 1\n\n\neq-\nEquation 1\n\n\nsec-\nSection 1\n\n\n\n\n\nCitations\n\nAdd bibliography file to the YAML header:\n---\nbibliography: references.bib\n---\nAdd citations: [@citation], or @citation\n\nRStudio, Positron & VS Code: Use Insert Citations dialog in the Visual Editor. Build your bibliography file from your Zotero library, DOI, Crossref, DataCite, or PubMed.\n\n\nCallouts\n::: {.callout-tip}\n## Title\n\nText\n:::\nInstead of tip use one of: note, caution, warning, or important:\n\n\n\n\n\n\ntip\n\n\n\n\n\n\n\n\n\n\n\n\nnote\n\n\n\n\n\n\n\n\n\n\n\n\ncaution\n\n\n\n\n\n\n\n\n\n\n\n\nwarning\n\n\n\n\n\n\n\n\n\n\n\n\nimportant\n\n\n\n\n\n\n\n\nShortcodes\n{{&lt; include _file.qmd &gt;}}\n{{&lt; embed file.ipynb#id &gt;}}\n{{&lt; video video.mp4 &gt;}}\n\nCC BY SA Posit Software, PBC • info@posit.co • posit.co\nLearn more at quarto.org.\nQuarto 1.7\nUpdated: 2025-07."
  },
  {
    "objectID": "html/quarto.html#footnotes",
    "href": "html/quarto.html#footnotes",
    "title": "Publish and Share with Quarto :: Cheatsheet",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nArtwork from “Hello, Quarto” keynote by Julia Lowndes and Mine Çetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.↩︎\nPDFs and Beamer slides require LaTeX, use:\n\n\nTerminal\n\nquarto install tinytex\n\n↩︎\nPDFs and Beamer slides require LaTeX, use:\n\n\nTerminal\n\nquarto install tinytex\n\n↩︎"
  },
  {
    "objectID": "html/posit-team.html",
    "href": "html/posit-team.html",
    "title": "Posit Team :: Cheatsheet",
    "section": "",
    "text": "Download PDF"
  },
  {
    "objectID": "html/posit-team.html#overview",
    "href": "html/posit-team.html#overview",
    "title": "Posit Team :: Cheatsheet",
    "section": "Overview",
    "text": "Overview\nPosit Team is the bundle of Posit’s most popular products including: Workbench, Connect, and Package Manager. Together, this bundle delivers an end-to-end toolchain for data science teams committed to R and Python, improving every step of a data scientist’s workflow, from developing insights, to deploying data products, to managing environments.\n\nPosit Workbench: Development environment for creating insights.\nPosit Connect: Hosting environment for accessing and sharing insights.\nPosit Package Manager: R and Python package repository management."
  },
  {
    "objectID": "html/posit-team.html#opening-a-new-session-in-posit-workbench",
    "href": "html/posit-team.html#opening-a-new-session-in-posit-workbench",
    "title": "Posit Team :: Cheatsheet",
    "section": "1. Opening a New Session in Posit Workbench",
    "text": "1. Opening a New Session in Posit Workbench\n\n\n\nPosit Workbench - New Session Options\n\n\n\nCurrent integrated development environments (IDEs) include Jupyter Notebook, JupyterLab, RStudio Pro, and Visual Studio Code.\nCluster options may vary depending on how Posit Workbench is configured in your environment."
  },
  {
    "objectID": "html/posit-team.html#configure-package-repositories",
    "href": "html/posit-team.html#configure-package-repositories",
    "title": "Posit Team :: Cheatsheet",
    "section": "2. Configure Package Repositories",
    "text": "2. Configure Package Repositories\n\nCheck Current Repositories\nWithin an R session, you can check your R repositories by running:\n\noptions(\"repos\")\n\nFor Python, you can use pip to list your current Python repositories:\n\npip config list\n\n\n\nConfigure Repositories with Posit Package Manager\nTo set your R repositories to Posit Package Manager, run:\n\noptions(repos = c(CRAN = \"https://your-package-manager-url.com\"))\n\n\n\n\n\n\n\nTip\n\n\n\nTo ensure this persists across sessions, add this line to your .Rprofile file.\n\n\nTo set your Python repositories to Posit Package Manager, run:\n\npip config set global.index-url https://your-package-manager-url.com\n\n\n\n\n\n\n\nTip\n\n\n\nTo ensure this persists across sessions, add this line to your .bashrc or .bash_profile file.\n\n\n\n\nObtaining Package Manager URL\nTo obtain the URL for your Posit Package Manager, click the SETUP button within the user interface of Posit Package Manager and scroll to Repository URL:. You can also leverage Posit Public Package Manager for CRAN, PyPI, and Bioconductor packages: https://p3m.dev/"
  },
  {
    "objectID": "html/posit-team.html#access-your-data",
    "href": "html/posit-team.html#access-your-data",
    "title": "Posit Team :: Cheatsheet",
    "section": "3. Access Your Data",
    "text": "3. Access Your Data\nAccess your data within Posit Team no matter where it lives and what format it is in, including:\n\nFlat files: examples including data.csv, data.txt, data.parquet.\nAPIs: Interact with APIs using packages such as {requests} in Python or {httr2} and {jsonlite} in R.\nPins: Store and retrieve Python/R objects including data and models.\nDatabases: Connect to a variety of database types using DBI/DB-API/ODBC.\n\n\nDatabase Interface (DBI) Example in R\nBelow is an example of connecting to a PostgreSQL database using the DBI package in R:\n\ncon &lt;- DBI::dbConnect(\n  RPostgres::Postgres(),\n  hostname = \"db.company.com\",\n  port = 5432)\n\n\n\nPython Database API (DB-API) Example in Python\nBelow is an example of connecting to a PostgreSQL database using the psycopg2 package in Python:\n\ncon = sqlite3.connect('example.db')\n\n\n\nConnecting to a Database using Open Database Connectivity (ODBC)\nBelow is an example of connecting to a PostgreSQL database using the odbc package in R:\n\ncon &lt;- DBI::dbConnect(odbc::odbc(),\n  driver = \"PostgreSQL Driver\",\n  database = \"test_db\",\n  UID = Sys.getenv(\"DB_USER\"),\n  PWD = Sys.getenv(\"DB_PASSWORD\"),\n  host = \"localhost\",\n  port = 5432)\n\nBelow is an example of connecting to a PostgreSQL database using the pyodbc package in Python:\n\ncon = pyodbc.connect(\n  driver = 'PostgreSQL',\n  database = 'test_db',\n  server = 'localhost',\n  port = 5432,\n  uid = os.getenv('DB_USER'),\n  pwd = os.getenv('DB_PASSWORD'))\n\n\n\nPosit Professional ODBC Drivers\nA full list of Posit provided professional ODBC drivers can be found here: https://docs.posit.co/pro-drivers/"
  },
  {
    "objectID": "html/posit-team.html#run-your-code",
    "href": "html/posit-team.html#run-your-code",
    "title": "Posit Team :: Cheatsheet",
    "section": "4. Run your Code",
    "text": "4. Run your Code\nPosit Workbench includes multiple options for running your R and Python code, including:\n\nSupport for multiple R and Python versions.\nSupport for virtual environments (e.g., venv) and project-oriented workflows.\nSubmit long-running Python/R jobs to Posit Workbench server to run in independent sessions using Workbench Jobs within RStudio Pro (https://docs.posit.co/ide/server-pro/user/rstudio-pro/guide/workbench-jobs.html) and VS Code (https://docs.posit.co/ide/server-pro/user/vs-code/guide/workbench-jobs.html)."
  },
  {
    "objectID": "html/posit-team.html#supported-content-on-posit-connect",
    "href": "html/posit-team.html#supported-content-on-posit-connect",
    "title": "Posit Team :: Cheatsheet",
    "section": "5. Supported Content on Posit Connect",
    "text": "5. Supported Content on Posit Connect\nCurrently supported content on Posit Connect includes:\n\nDocuments\n\nQuarto\nR Markdown\nJupyter Notebooks\n\n\n\n\n\n\nImportant\n\n\n\nMost documents are considered “static.” However, documents created with Voilà or R Markdown that include Shiny components are considered “interactive.”\n\n\n\n\n\nApplications\n\nShiny (R and Python)\nBokeh\nStreamlit\nDash\n\n\n\nAPIs\n\nPlumber\nFastAPI\nFlask\nTensorflow\nplumbertableau\nFastAPI Tableau\nVetiver\n\n\n\nPins\n\nPins"
  },
  {
    "objectID": "html/posit-team.html#publishing-content-to-posit-connect",
    "href": "html/posit-team.html#publishing-content-to-posit-connect",
    "title": "Posit Team :: Cheatsheet",
    "section": "6. Publishing Content to Posit Connect",
    "text": "6. Publishing Content to Posit Connect\nConnect supports multiple methods for publishing content, including:\n\nrsconnect: Publish content directly from R using the rsconnect R package.\nCommand Line Interface (CLI): Publish content using the CLI within the rsconnect-python package.\nPush Button Deployment: Publish content with the click of a button using push button deployment. This is natively available within RStudio Pro and Jupyter Notebooks. You can also access push button deployment using the Posit Publisher extension in Visual Studio Code.\nGit: Publish directly from a Git repository\n\n\n\n\n\n\n\nTip\n\n\n\nFor Git deployment, content will automatically fetch from the associated remote Git repository and re-deploy. This allows for integration with Git-centric workflows and continuous deployment automation."
  },
  {
    "objectID": "html/posit-team.html#share-and-control-content-on-posit-connect",
    "href": "html/posit-team.html#share-and-control-content-on-posit-connect",
    "title": "Posit Team :: Cheatsheet",
    "section": "7. Share and Control Content on Posit Connect",
    "text": "7. Share and Control Content on Posit Connect\n\n\n\n\n\n\nImportant\n\n\n\nYour Posit Connect configuration and license may restrict which options are available to your content.\n\n\nAs the owner of content published to Posit Connect, you have access to the content settings. These settings include:\n\nInfo and Content Metadata\nEasily modify the content’s title and metadata. You can also add a thumbnail to your content and get a glimpse into usage data.\n\n\n\n\n\n\nTip\n\n\n\nThe Posit Connect API Cookbook contains numerous recipes for accessing and reporting usage data: https://pos.it/cookbook.\n\n\n\n\nAccess Controls\nControl who has access to your content. Options include:\n\nAnyone - no login required: Content is public and open to anyone.\nAll users - login required: Content available to anyone that can access Posit Connect.\nSpecific users or groups: Content is available to specific users (or user groups) defined by the content’s owner.\n\n\n\n\n\n\n\nNote\n\n\n\nTo share content on Posit Connect with others, all you need to share is the Content URL which can be customized.\n\n\n\n\nRuntime Settings\nRuntime settings allow publishers to easily tune and scale their applications and APIs. These settings include:\n\nProcesses and Connections: Interactive or scheduled content requires a process to execute the code. Examples include an R or Python process. Depending on the number of users accessing your content (Connections), you can modify the maximum and minimum number of processes for your content.\n\n\n\n\n\n\nTip\n\n\n\nContent will remain running if the minimum processes is set to greater than 0. This is great for content with a long start up time.\n\n\nTimeout Configurations: Control the time thresholds for content startup, idle time, and time since last data sent/received.\nProcess Execution: Content is initially configured to run on the server as a Unix user configured by your Posit Connect administrator, defaulting to the rstudio-connect user. Your content may need to run as a different Unix user due to resource permissions and constraints.\nExecution Environment: Specify the image used to create the content execution container.\nCPU and RAM Configurations: Easily modify initial and max amount of CPU and RAM content can use.\nGPU Configurations: Your administrator can set application defaults or upper limits for both AMD and NVIDIA GPUs.\nEnvironment Management: Administrators and content owners can configure the application-level default environment management strategy for a piece of content\n\n\n\nSchedule and Email\nStatic documents that were published with accompanying source code can be configured to execute on a schedule of your choosing including:\n\nBy Minute\nHourly\nDaily\nWeekly\nSemimonthly\nMonthly\nYearly\n\nScheduled reports can be configured to send an email to targeted recipients upon successful completion.\n\n\n\n\n\n\nTip\n\n\n\nYou can customize the email sent by Connect using R Markdown (pos.it/rmd_email) and Quarto (pos.it/qmd_email).\n\n\n\n\nTags\nTags help organize, discover, and filter content more easily on the Connect dashboard. Please work with your administrator to establish a tag schema that best suits your team.\n\n\nEnvironment Variables\nSecurely pass configuration options to your content on Posit Connect as environment variables including API Keys and Passwords.\n\n\n\n\n\n\nCaution\n\n\n\nAlways avoid hard-coding API keys, passwords, or tokens in the source code of content published to Posit Connect. This is a major security concern!"
  },
  {
    "objectID": "html/posit-team.html#other-resources",
    "href": "html/posit-team.html#other-resources",
    "title": "Posit Team :: Cheatsheet",
    "section": "Other Resources",
    "text": "Other Resources\n\nQuestions about sales and licensing? Contact sales@posit.co\nExperiencing technical issues? Contact support@posit.co\nOther questions? Contact info@posit.co\nPosit Team documentation: https://docs.posit.co\nPosit Team release notes: https://docs.posit.co/release-notes.html\nPosit Community: Posit Community is an open forum for any open source or Posit Team quetsions: https://forum.posit.co\nMonthly End-to-End Workflow Demos with Posit Team: Join our monthly Posit Team Demos on the last Wednesday of every month: https://pos.it/team-demo"
  },
  {
    "objectID": "html/package-development.html",
    "href": "html/package-development.html",
    "title": "Package Development :: Cheatsheet",
    "section": "",
    "text": "Download PDF\n\n  \n\nTranslations (PDF)\n\n\nDutch\nGerman\nItalian\nKorean\nSpanish\nVietnamese\nVisit r-pkgs.org to learn more about writing and publishing packages for R.\nlibrary(devtools)\nlibrary(testthat)\nlibrary(roxygen2)"
  },
  {
    "objectID": "html/package-development.html#package-structure",
    "href": "html/package-development.html#package-structure",
    "title": "Package Development :: Cheatsheet",
    "section": "Package Structure",
    "text": "Package Structure\nA package is a convention for organizing files into directories, and creates a shareable, installable collection of functions, sample data, and documentation. This cheatsheet shows you how to work with the 7 most common parts of an R package:\n\nR/: Write R code for your package\nDESCRIPTION: Set up metadata and organize package functions\nNAMESPACE\ntests/: Verify your code is correct\nman/\nvignettes/: Document your code and write tutorials and how-tos\ndata/: Include data sets in your package\n\nThere are multiple packages useful to package development, including usethis which handily automates many of the more repetitive tasks. Load and install devtools which wraps together several of these packages to access everything in one step."
  },
  {
    "objectID": "html/package-development.html#getting-started",
    "href": "html/package-development.html#getting-started",
    "title": "Package Development :: Cheatsheet",
    "section": "Getting Started",
    "text": "Getting Started\nOnce per machine:\n\nGet set up with use_devtools() so devtools is always loaded in interactive R sessions.\n\nif (interactive()) {\n  require(\"devtools\", quietly = TRUE)\n  # automatically attaches usethis\n}\n\ncreate_github_token(): Set up GitHub credentials.\ngit_vaccinate(): Ignores common special files.\n\nOnce per package:\n\ncreate_package(): Create a project with package scaffolding.\nuse_git(): Activate git.\nuse_github(): Connect to GitHub.\nuse_github_action(): Set up automated package checks.\n\nHaving problems with git? Get a situation report with git_sitrep()."
  },
  {
    "objectID": "html/package-development.html#workflow",
    "href": "html/package-development.html#workflow",
    "title": "Package Development :: Cheatsheet",
    "section": "Workflow",
    "text": "Workflow\n\n\n\n\n\n\n\nLong description of flowchart.\n\n\n\nKey steps in the workflow (with keyboard shortcuts)\n\nload_all() (Ctrl/Cmd + Shift + L): Load code\ntest() (Ctrl/Cmd + Shift + T): Run tests\ndocument() (Ctrl/Cmd + Shift + D): Rebuild docs and NAMESPACE\ncheck() (Ctrl/Cmd + Shift + E): Check complete package"
  },
  {
    "objectID": "html/package-development.html#r",
    "href": "html/package-development.html#r",
    "title": "Package Development :: Cheatsheet",
    "section": "R/",
    "text": "R/\nAll of the R code in your package goes in R/. A package with just an R/ directory is still a very useful package.\n\nCreate a new package project with create_package(\"path/to/name\").\nCreate R files with use_r(\"file-name\").\nFollow the tidyverse style guide at style.tidyverse.org\nPut your cursor on a function and press F2 to go to its definition\nFind a function or file with the keyboard shortcut Ctrl+."
  },
  {
    "objectID": "html/package-development.html#description",
    "href": "html/package-development.html#description",
    "title": "Package Development :: Cheatsheet",
    "section": "DESCRIPTION",
    "text": "DESCRIPTION\nThe DESCRIPTION file describes your package, sets up how your package will work with other packages, and applies a license.\n\nPick a license with use_mit_license(), use_gpl3_license(), use_proprietary_license().\nAdd packages that you need with use_package().\n\nImport packages that your package requires to work. R will install them when it installs your package. Add with use_package(pkgname, type = \"imports\")\nSuggest packages that developers of your package need. Users can install or not, as they like. Add with use_package(pkgname, type = \"suggests\")"
  },
  {
    "objectID": "html/package-development.html#namespace",
    "href": "html/package-development.html#namespace",
    "title": "Package Development :: Cheatsheet",
    "section": "NAMESPACE",
    "text": "NAMESPACE\nThe NAMESPACE file helps you make your packages self-contained: it won’t interfere with other packages, and other packages won’t interfere with it.\n\nExport functions for users by placing @export in their roxygen comments.\nUse objects from other packages with package::object or @importFrom package object (recommended) or @import package (use with caution).\nCall document() to generate NAMESPACE and load_all() to reload.\n\n\nTable comparing features/purpose of DESCRIPTION (left column) vs NAMESPACE (right column)\n\n\nDESCRIPTION\nNAMESPACE\n\n\n\n\nMakes packages available\nMakes functions available\n\n\nMandatory\nOptional (can use :: instead)\n\n\nuse_package()\nuse_import_from()"
  },
  {
    "objectID": "html/package-development.html#man",
    "href": "html/package-development.html#man",
    "title": "Package Development :: Cheatsheet",
    "section": "man/",
    "text": "man/\nThe documentation will become the help pages in your package.\n\nDocument each function with a roxygen block above its definition in R/. In RStudio, Code &gt; Insert Roxygen Skeleton (Keyboard shortcut: Mac Shift+Option+Cmd+R, Windows/Linux Shift+Alt+Ctrl+R) helps.\nDocument each data set with an roxygen block above the name of the data set in quotes.\nDocument the package with use_package_doc().\nBuild documentation in man/ from Roxygen blocks with document().\n\n\nroxygen2\nThe roxygen2 package lets you write documentation inline in your .R files with shorthand syntax.\n\nAdd roxygen documentation as comments beginning with #'.\nPlace an roxygen @ tag (right) after #' to supply a specific section of documentation.\nUntagged paragraphs will be used to generate a title, description, and details section (in that order).\n\n\n#' Add together two numbers\n#' \n#' @param x A number.\n#' @param y A number.\n#' @returns The sum of `x` and `y`\n#' @export\n#' @examples\n#' add(1, 1)\nadd &lt;- function(x, y) {\n  x + y\n}\n\n\nCommon roxygen Tags:\n\n@examples\n@export\n@param\n@returns\n\nAlso:\n\n@description\n@examplesif\n@family\n@inheritParams\n@rdname\n@seealso"
  },
  {
    "objectID": "html/package-development.html#vignettes",
    "href": "html/package-development.html#vignettes",
    "title": "Package Development :: Cheatsheet",
    "section": "vignettes/",
    "text": "vignettes/\n\nCreate a vignette that is included with your package with use_vignette().\nCreate an article that only appears on the website with use_article().\nWrite the body of your vignettes in R Markdown."
  },
  {
    "objectID": "html/package-development.html#websites-with-pkgdown",
    "href": "html/package-development.html#websites-with-pkgdown",
    "title": "Package Development :: Cheatsheet",
    "section": "Websites with pkgdown",
    "text": "Websites with pkgdown\n\nUse GitHub and use_pkgdown_github_pages() to set up pkgdown and configure an automated workflow using GitHub Actions and Pages.\nIf you’re not using GitHub, call use_pkgdown() to configure pkgdown. Then build locally with pkgdown::build_site()."
  },
  {
    "objectID": "html/package-development.html#readme.rmd-news.md",
    "href": "html/package-development.html#readme.rmd-news.md",
    "title": "Package Development :: Cheatsheet",
    "section": "README.Rmd + NEWS.md",
    "text": "README.Rmd + NEWS.md\n\nCreate a README and NEWS markdown files with use_readme_rmd() and use_news_md()."
  },
  {
    "objectID": "html/package-development.html#tests",
    "href": "html/package-development.html#tests",
    "title": "Package Development :: Cheatsheet",
    "section": "tests/",
    "text": "tests/\n\nCreate a test file with use_test().\nWrite tests with test_that() and expect_().\nRun all tests with test() and run tests for current file with test_active_file().\nSee coverage of all files with test_coverage() and see coverage of current file with test_coverage_active_file().\n\n\nTable of expect functions and what each one tests\n\n\nExpect statement\nTests\n\n\n\n\nexpect_equal()\nIs equal? (within numerical tolerance)\n\n\nexpect_error()\nThrows specified error?\n\n\nexpect_snapshot()\nOutput is unchanged?\n\n\n\n\ntest_that(\"Math works\", {\n  expect_equal(1 + 1, 2)\n  expect_equal(1 + 2, 3)\n  expect_equal(1 + 3, 4)\n})"
  },
  {
    "objectID": "html/package-development.html#data",
    "href": "html/package-development.html#data",
    "title": "Package Development :: Cheatsheet",
    "section": "data/",
    "text": "data/\n\nRecord how a data set was prepared as an R script and save that script to data-raw/ with use_data_raw().\nSave a prepared data object to data/ with use_data()."
  },
  {
    "objectID": "html/package-development.html#package-states",
    "href": "html/package-development.html#package-states",
    "title": "Package Development :: Cheatsheet",
    "section": "Package States",
    "text": "Package States\nThe contents of a package can be stored on disk as a:\n\nsource - a directory with sub-directories (as shown in Package Structure)\nbundle - a single compressed file (.tar.gz)\nbinary - a single compressed file optimized for a specific OS\n\nPackages exist in those states locally or remotely, e.g. on CRAN or on GitHub.\nFrom those states, a package can be installed into an R library and then loaded into memory for use during an R session.\n\n\n\n\n\n\n\n\n\n\nUse the functions below to move between these states:\n\nlibrary(): Installed in Library to loaded in Memory.\ninstall.packages(): Binary from CRAN repository to installed in Library.\ninstall.packages(type = \"source\"): Source code from CRAN repository to Bundle, to installed in Library.\ninstall_github(): Source code from GitHub repository to Bundle to installed in Library.\ninstall(): Local source code to bundle to installed in Library.\nbuild(): Local source to Bundle.\nbuild(binary = TRUE): Local source to Binary.\nload_all(): Local source to loaded in Memory.\n\n\nCC BY SA Posit Software, PBC • info@posit.co • posit.co\nLearn more at r-pkgs.org.\nUpdated: 2024-05.\n\npackageVersion(\"devtools\")\n\n[1] '2.4.5'\n\npackageVersion(\"usethis\")\n\n[1] '2.2.3'\n\npackageVersion(\"testthat\")\n\n[1] '3.2.1.1'\n\npackageVersion(\"roxygen2\")\n\n[1] '7.3.1'"
  },
  {
    "objectID": "html/keras.html",
    "href": "html/keras.html",
    "title": "Deep Learning with Keras :: Cheatsheet",
    "section": "",
    "text": "Download PDF\n\n  \n\nTranslations (PDF)\n\n\nChinese\nJapanese\nSpanish"
  },
  {
    "objectID": "html/keras.html#intro",
    "href": "html/keras.html#intro",
    "title": "Deep Learning with Keras :: Cheatsheet",
    "section": "Intro",
    "text": "Intro\nKeras is a high-level neural networks API developed with a focus on enabling fast experimentation. It supports multiple back-ends, including TensorFlow, Jax and Torch.\nBackends like TensorFlow are lower level mathematical libraries for building deep neural network architectures. The keras3 R package makes it easy to use Keras with any backend in R.\n\nDefine: Model, Sequential model, Multi-GPU model\nCompile: Optimizer, Loss, Metrics\nFit: Batch size, Epochs, Validation split\nEvaluate: Evaluate, Plot\nPredict: Classes, Probability\n\nRead more at:\nhttps://keras.posit.co\nhttps://www.manning.com/books/deep-learning-with-r-second-edition\n\nInstallation\nThe keras3 R package uses the Python keras library. You can install all the prerequisites directly from R See ?keras3::install_keras for details and options.\n\nlibrary(keras3)\nreticulate::install_python()\ninstall_keras()\n\nThis installs the required libraries in virtual environment named ‘r-keras’. It will automatically detect if a GPU is available.\n\n\nTraining an Image Recognizer on MNIST Data\nThe “Hello, World!” of deep learning\n\n# input layer: use MNIST images\nmnist &lt;- dataset_mnist()\nx_train &lt;- mnist$train$x;  y_train &lt;- mnist$train$y\nx_test &lt;- mnist$test$x;  y_test &lt;- mnist$test$y\n\n# reshape and rescale\nx_train &lt;- array_reshape(x_train, c(nrow(x_train), 784))\nx_test &lt;- array_reshape(x_test, c(nrow(x_test), 784))\nx_train &lt;- x_train / 255;  x_test &lt;- x_test / 255\n\ny_train &lt;- to_categorical(y_train, 10)\ny_test &lt;- to_categorical(y_test, 10)\n\n# defining the model and layers\nmodel &lt;-\n  keras_model_sequential(input_shape = c(28, 28, 1))\nmodel |&gt;\n  layer_conv_2d(filters = 32, kernel_size = c(3, 3),\n                activation = \"relu\") |&gt;\n  layer_max_pooling_2d(pool_size = c(2, 2)) |&gt;\n  layer_conv_2d(filters = 64, kernel_size = c(3, 3),\n                activation = \"relu\") |&gt;\n  layer_max_pooling_2d(pool_size = c(2, 2)) |&gt;\n  layer_flatten() |&gt;\n  layer_dropout(rate = 0.5) |&gt;\n  layer_dense(units = num_classes,\n              activation = \"softmax\")\n\n# View the model summary\nsummary(model)\nplot(model)\n\n# compile (define loss and optimizer)\nmodel |&gt; \n  compile(\n  loss = 'categorical_crossentropy',\n  optimizer = optimizer_rmsprop(),\n  metrics = c('accuracy')\n)\n\n# train (fit)\nmodel |&gt; fit(\n  x_train, y_train,\n  epochs = 30, batch_size = 128,\n  validation_split = 0.2\n)\nmodel |&gt; evaluate(x_test, y_test)\nmodel |&gt; predict(x_test)\n\n# save the full model\nsave_model(model, \"mnist-classifier.keras\")\n\n# deploy for serving inference.\ndir.create(\"serving-mnist-classifier\")\nexport_savedmodel(modek, \"serving-mnist-classifier/1\")\nrsconnect::deployTFModel(\"serving-mnist-classifier\")"
  },
  {
    "objectID": "html/keras.html#working-with-keras-models",
    "href": "html/keras.html#working-with-keras-models",
    "title": "Deep Learning with Keras :: Cheatsheet",
    "section": "Working with Keras models",
    "text": "Working with Keras models\n\nDefine a Model\n\nFunctional API: keras_input() and keras_model()\nDefine a Functional Model with inputs and outputs.\ninputs &lt;- keras_input(&lt;input-shape&gt;)\noutputs &lt;- inputs |&gt;\n  layer_dense() |&gt; layer_...\nmodel &lt;- keras_model(inputs, outputs)\n\n\nSequential API: keras_model_sequential()\nDefine a Sequential Model composed of a linear stack of layers\nmodel &lt;-\n  keras_model_sequential(&lt;input-shape&gt;) |&gt;\n  layer_dense() |&gt; layer_...\n\n\nSubclassing API: Model()\nSubclass the base Model class\n\n\n\nCompile a Model\ncompile(object, optimizer, loss, metrics = NULL): Configure a Keras model for training.\n\n\nFit a Model\nfit(object, x = NULL, y = NULL, batch_size = NULL, epochs = 10, verbose = 1, callbacks = NULL, ...): Train a Keras model for a fixed number of epochs (iterations)\nCustomize training:\n\nProvide callbacks to fit():\nDefine a custom Callback().\nCall train_on_batch() in a custom training loop.\nSubclass Model() and implement a custom train_step method.\nWrite a fully custom training loop. Update weights with model$optimizer$apply(gradients, weights)\n\n\n\nInspect a Model\n\nprint(model): Print a summary of a Keras model\nplot(model,  show_shapes = FALSE, show_dtype = FALSE, show_layer_names = FALSE, ...): Plot a Keras model\n\n\n\nEvaluate a Model\n\nevaluate(object, x = NULL, y = NULL, batch_size = NULL): Evaluate a Keras model.\n\n\n\nPredict\n\npredict(): Generate predictions from a Keras model.\npredict_on_batch(): Returns predictions for a single batch of samples.\n\n\n\nSave/Load a Model\n\nsave_model(); load_model(): Save/Load models using the “.keras” file format.\nsave_model_weights(); load_model_weights(): Save/load model weights to/from “.h5” files.\nsave_model_config(); load_model_config(): Save/load model architecture to/from a “.json” file.\n\n\n\nCore Layers\n\nlayer_dense(): Add a densely-connected NN layer to an output.\nlayer_einsum_dense(): Add a dense layer with arbitrary dimensionality.\nlayer_activation(): Apply an activation function to an output.\nlayer_dropout(): Applies Dropout to the input.\nlayer_reshape(): Reshapes an output to a certain shape.\nlayer_permute(): Permute the dimensions of an input according to a given pattern.\nlayer_repeat_vector(): Repeats the input n times.\nlayer_lambda(object, f): Wraps arbitrary expression as a layer.\nlayer_activity_regularization(): Layer that applies an update to the cost function based input activity.\nlayer_masking(): Masks a sequence by using a mask value to skip timesteps.\nlayer_flatten(): Flattens an input."
  },
  {
    "objectID": "html/keras.html#more-layers",
    "href": "html/keras.html#more-layers",
    "title": "Deep Learning with Keras :: Cheatsheet",
    "section": "More layers",
    "text": "More layers\n\nConvolutional Layers\n\nlayer_conv_1d(): 1D, e.g. temporal convolution.\nlayer_conv_2d_transpose(): Transposed 2D (deconvolution).\nlayer_conv_2d() : 2D, e.g. spatial convolution over images.\nlayer_conv_3d_transpose(): Transposed 3D (deconvolution).\nlayer_conv_3d(): 3D, e.g. spatial convolution over volumes.\nlayer_conv_lstm_2d(): Convolutional LSTM.\nlayer_separable_conv_2d(): Depthwise separable 2D.\nlayer_upsampling_1d(); layer_upsampling_2d(); layer_upsampling_3d(): Upsampling layer.\nlayer_zero_padding_1d(); layer_zero_padding_2d(); layer_zero_padding_3d(): Zero-padding layer.\nlayer_cropping_1d(); layer_cropping_2d(); layer_cropping_3d(): Cropping layer.\n\n\n\nPooling Layers\n\nlayer_max_pooling_1d(); layer_max_pooling_2d(); layer_max_pooling_3d(): Maximum pooling for 1D to 3D.\nlayer_average_pooling_1d(); layer_average_pooling_2d(); layer_average_pooling_3d(): Average pooling for 1D to 3D.\nlayer_global_max_pooling_1d(); layer_global_max_pooling_2d(); layer_global_max_pooling_3d(): Global maximum pooling.\nlayer_global_average_pooling_1d(); layer_global_average_pooling_2d(); layer_global_average_pooling_3d(): Global average pooling."
  },
  {
    "objectID": "html/keras.html#preprocessing",
    "href": "html/keras.html#preprocessing",
    "title": "Deep Learning with Keras :: Cheatsheet",
    "section": "Preprocessing",
    "text": "Preprocessing\n\nImage Preprocessing\n\nLoad Images\n\nimage_dataset_from_directory() Create a TF Dataset from image files in a directory.\nimage_load(), image_from_array(), image_to_array(), image_array_save(): Work with PIL Image instances\n\n\n\nTransform Images\nOperations that transform image tensors in deterministic ways.\n\nop_image_crop()\nop_image_extract_patches()\nop_image_pad()\nop_image_resize()\nop_image_affine_transform()\nop_image_map_coordinates()\nop_image_rgb_to_grayscale()\n\nResize images without aspect ratio distortion.\n\nimage_smart_resize():\n\n\n\nImage Layers\nBuiltin image preprocessing layers. Note, any image operation function can also be used as a layer in a Model, or used in layer_lambda().\n\nImage Preprocessing Layers\n\nlayer_resizing()\nlayer_rescaling()\nlayer_center_crop()\n\n\n\nImage Augmentation Layers\nPreprocessing layers that randomly augment image inputs during training.\n\nlayer_random_crop()\nlayer_random_flip()\nlayer_random_translation()\nlayer_random_rotation()\nlayer_random_zoom()\nlayer_random_contrast()\nlayer_random_brightness()\n\n\n\n\n\nSequence Preprocesing\n\ntimeseries_dataset_from_array(): Generate a TF Dataset of sliding windows over a timeseries provided as array.\naudio_dataset_from_directory(): Generate a TF Dataset from audio files.\npad_sequences(): Pad sequences to the same length\n\n\n\nText Preprocessing\n\ntext_dataset_from_directory(): Generate a TF Dataset from text files in a directory.\nlayer_text_vectorization(), get_vocabulary(), set_vocabulary(): Map text to integer sequences.\n\n\n\nNumerical Features Preprocessing\n\nlayer_normalization(): Normalizes continuous features.\nlayer_discretization(): Buckets continuous features by ranges.\n\n\n\nCategorical Features Preprocessing\n\nlayer_category_encoding(): Encode integer features.\nlayer_hashing(): Hash and bin categorical features.\nlayer_hashed_crossing(): Cross features using the “hashing trick”.\nlayer_string_lookup(): Map strings to (possibly encoded) indices.\nlayer_integer_lookup(): Map integers to (possibly encoded) indices.\n\n\n\nTabular Data\nOne-stop utility for preprocessing and encoding structured data. Define a feature space from a list of table columns (features).\nfeature_space &lt;- layer_feature_space(features = list(&lt;features&gt;))\nAdapt the feature space to a dataset\nadapt(feature_space, dataset)\nUse the adapted feature_space preprocessing layer as a layer in a Keras Model, or in the data input pipeline with tfdatasets::dataset_map()\nAvailable features:\n\nfeature_float()\nfeature_float_rescaled()\nfeature_float_normalized()\nfeature_float_discretized()\nfeature_integer_categorical()\nfeature_integer_hashed()\nfeature_string_categorical()\nfeature_string_hashed()\nfeature_cross()\nfeature_custom()"
  },
  {
    "objectID": "html/keras.html#pre-trained-models",
    "href": "html/keras.html#pre-trained-models",
    "title": "Deep Learning with Keras :: Cheatsheet",
    "section": "Pre-trained models",
    "text": "Pre-trained models\nKeras applications are deep learning models that are made available alongside pre-trained weights. These models can be used for prediction, feature extraction, and fine-tuning.\nMobileNetV3 Model, pre-trained on ImageNet\n\napplication_mobilenet_v3_large()\napplication_mobilenet_v3_small()\n\nEfficientNetV2 Model, pre-trained on ImageNet\n\napplication_efficientnet_v2s()\napplication_efficientnet_v2m()\napplication_efficientnet_v2l()\n\nInception-ResNet v2 and v3 model, with weights trained on ImageNet\n\napplication_inception_resnet_v2()\napplication_inception_v3()\n\nVGG16 and VGG19 models\n\napplication_vgg16()\napplication_vgg19()\n\nResNet50 model\n\napplication_resnet50():\n\nNASNet model architecture\n\napplication_nasnet_large()\napplication_nasnet_mobile()\n\nImageNet is a large database of images with labels, extensively used for deep learning\nPreprocesses a tensor encoding a batch of images for an application, and decodes predictions from an application. - application_preprocess_inputs() - application_decode_predictions()"
  },
  {
    "objectID": "html/keras.html#callbacks",
    "href": "html/keras.html#callbacks",
    "title": "Deep Learning with Keras :: Cheatsheet",
    "section": "Callbacks",
    "text": "Callbacks\nA callback is a set of functions to be applied at given stages of the training procedure. You can use callbacks to get a view on internal states and statistics of the model during training.\n\nallback_early_stopping(): Stop training when a monitored quantity has stopped improving.\ncallback_learning_rate_scheduler(): Learning rate scheduler.\ncallback_tensorboard(): TensorBoard basic visualizations.\n\n\nCC BY SA Posit Software, PBC • info@posit.co • posit.co\nLearn more at keras.posit.co.\nUpdated: 2024-06.\n\npackageVersion(\"keras3\")\n\n[1] '1.0.0'"
  },
  {
    "objectID": "html/data-visualization.html",
    "href": "html/data-visualization.html",
    "title": "Data visualization with ggplot2 :: Cheat Sheet",
    "section": "",
    "text": "Download PDF\n\n  \n\nTranslations (PDF)\n\n\nChinese\nDutch\nFrench\nGerman\nGreek\nJapanese\nPortuguese\nSpanish\nTurkish\nVietnamese"
  },
  {
    "objectID": "html/data-visualization.html#basics",
    "href": "html/data-visualization.html#basics",
    "title": "Data visualization with ggplot2 :: Cheat Sheet",
    "section": "Basics",
    "text": "Basics\nggplot2 is based on the grammar of graphics, the idea that you can build every graph from the same components: a data set, a coordinate system, and geoms—visual marks that represent data points.\n\nlibrary(ggplot2)\n\nTo display values, map variables in the data to visual properties of the geom (aesthetics) like size, color, and x and y locations.\nComplete the template below to build a graph.\nggplot(data = &lt;Data&gt;) +\n  &lt;Geom_Function&gt;(mapping = aes(&lt;Mappings&gt;),\n  stat = &lt;Stat&gt;,\n  position = &lt;Position&gt;) +\n  &lt;Coordinate_Function&gt; +\n  &lt;Facet_Function&gt; +\n  &lt;Scale_Function&gt; +\n  &lt;Theme_Function&gt;\nData, a Geom Function, and Aes Mappings are required. Stat, Position, and the Coordinate, Facet, Scale, and Theme functions are not required and will supply sensible defaults.\n\nggplot(data = mpg, aes(x = cty, y = hwy)): Begins a plot that you finish by adding layers to. Add one geom function per layer.\nlast_plot(): Returns the last plot.\nggsave(\"plot.png\", width = 5, height = 5): Saves last plot as 5’ x 5’ file named “plot.png” in working directory. Matches file type to file extension."
  },
  {
    "objectID": "html/data-visualization.html#aes",
    "href": "html/data-visualization.html#aes",
    "title": "Data visualization with ggplot2 :: Cheat Sheet",
    "section": "Aes",
    "text": "Aes\nCommon aesthetic values.\n\ncolor and fill: String (\"red\", \"#RRGGBB\").\nlinetype: Integer or string (0 = \"blank\", 1 = \"solid\", 2 = \"dashed\", 3 = \"dotted\", 4 = \"dotdash\", 5 = \"longdash\", 6 = \"twodash\").\nsize: Integer (in mm for size of points and text).\nlinewidth: Integer (in mm for widths of lines).\nshape: Integer/shape name or a single character (\"a\").\n\nshape integer/name pairs: 0 = \"square open\", 1 = \"circle open\", 2 = \"triangle open\", 3 = \"plus\", 4 = \"cross\", 5 = \"diamond open\", 6 = \"triangle down open\", 7 = \"square cross\", 8 = \"asterisk\", 9 = \"diamond plus\", 10 = \"circle plus\", 11 = \"star\", 12 = \"square plus\", 13 = \"circle cross\", 14 = \"square triangle\", 15 = \"square\", 16 = \"circle\", 17 = \"triangle\", 18 = \"diamond\", 19 = \"circle small\", 20 = \"bullet\", 21 = \"circle filled\", 22 = \"square filled\", 23 = \"diamond filled\", 24 = \"triangle filled\", 25 = \"triangle down filled\""
  },
  {
    "objectID": "html/data-visualization.html#geoms",
    "href": "html/data-visualization.html#geoms",
    "title": "Data visualization with ggplot2 :: Cheat Sheet",
    "section": "Geoms",
    "text": "Geoms\nUse a geom function to represent data points, use the geom’s aesthetic properties to represent variables. Each function returns a layer.\n\nGraphical Primitives\n\na &lt;- ggplot(economics, aes(date, unemploy))\n\nb &lt;- ggplot(seals, aes(x = long, y = lat))\n\n\na + geom_blank() and a + expand_limits(): Ensure limits include values across all plots.\nb + geom_curve(aes(yend = lat + 1, xend = long + 1), curvature = 1): Draw a curved line from (x, y) to (xend, yend). aes() arguments: x, xend, y, yend, alpha, angle, color, curvature, linetype, size.\na + geom_path(lineend = \"butt\", linejoin = \"round\", linemitre = 1): Connect observations in the order they appear. aes() arguments: x, y, alpha, color, group, linetype, size.\na + geom_polygon(aes(alpha = 50)): Connect points into polygons. aes() arguments: x, y, alpha, color, fill, group, subgroup, linetype, size.\nb + geom_rect(aes(xmin = long, ymin = lat, xmax = long + 1, ymax = lat + 1)): Draw a rectangle by connecting four corners (xmin, xmax, ymin, ymax). aes() arguments: xmax, xmin, ymax, ymin, alpha, color, fill, linetype, size.\na + geom_ribbon(aes(ymin = unemploy - 900, ymax = unemploy + 900): For each x, plot an interval from ymin to ymax. aes() arguments: x, ymax, ymin, alpha, color, fill, group, linetype, size.\n\n\nLine Segments\nCommon aesthetics: x, y, alpha, color, linetype, size, linewidth.\n\nb + geom_abline(aes(intercept = 0, slope = 1)): Draw a diagonal reference line with a given slope and intercept.\nb + geom_hline(aes(yintercept = lat)): Draw a horizontal reference line with a given yintercept.\nb + geom_vline(aes(xintercept = long)): Draw a vertical reference line with a given xintercept.\nb + geom_segment(aes(yend = lat + 1, xend = long + 1)): Draw a straight line from (x, y) to (xend, yend).\nb + geom_spoke(aes(angle = 1:1155, radius = 1)): Draw line segments using polar coordinates (angle and radius).\n\n\n\n\nOne Variable - Continuous\n\nc &lt;- ggplot(mpg, aes(hwy))\nc2 &lt;- ggplot(mpg)\n\n\nc + geom_area(stat = \"bin\"): Draw an area plot. aes() arguments: x, y, alpha, color, fill, linetype, linewidth.\nc + geom_density(kernel = \"gaussian\"): Compute and draw kernel density estimates. aes() arguments: x, y, alpha, color, fill, group, linetype, linewidth, weight.\nc + geom_dotplot(): Draw a dot plot. aes() arguments: x, y, alpha, color, fill.\nc + geom_freqpoly(): Draw a frequency polygon. aes() arguments: x, y, alpha, color, group, linetype, linewidth.\nc + geom_histogram(binwidth = 5): Draw a histogram. aes() arguments: x, y, alpha, color, fill, linetype, linewidth, weight.\nc2 + geom_qq(aes(sample = hwy)): Draw a quantile-quantile plot. aes() arguments: x, y, alpha, color, fill, linetype, size, weight.\n\n\n\nOne Variable - Discrete\n\nd &lt;- ggplot(mpg, aes(fl))\n\n\nd + geom_bar(): Draw a bar chart. aes() arguments: x, alpha, color, fill, linetype, linewidth, weight.\n\n\n\nTwo Variables - Both Continuous\n\ne &lt;- ggplot(mpg, aes(cty, hwy))\n\n\ne + geom_label(aes(label = cty), nudge_x = 1, nudge_y = 1): Add text with a rectangle background. aes() arguments: - x, y, label, alpha, angle, color, family, fontface, hjust, lineheight, size, vjust.\ne + geom_point(): Draw a scatter plot. aes() arguments: x, y, alpha, color, fill, shape, size, stroke.\ne + geom_quantile(): Fit and draw quantile regression for the plot data. aes() arguments: x, y, alpha, color, group, linetype, linewidth, weight.\ne + geom_rug(sides = \"bl\"): Draw a rug plot. aes() arguments: x, y, alpha, color, linetype, linewidth.\ne + geom_smooth(method = lm): Plot smoothed conditional means. aes() arguments: x, y, alpha, color, fill, group, linetype, linewidth, weight.\ne + geom_text(aes(label = cty), nudge_x = 1, nudge_y = 1): Add text to a plot. aes() arguments: x, y, label, alpha, angle, color, family, fontface, hjust, lineheight, size, vjust.\n\n\n\nTwo Variables - One Discrete, One Continuous\n\nf &lt;- ggplot(mpg, aes(class, hwy))\n\n\nf + geom_col(): Draw a bar plot. aes() arguments: x, y, alpha, color, fill, group, linetype, linewidth.\nf + geom_boxplot(): Draw a box plot. aes() arguments: x, y, lower, middle, upper, ymax, ymin, alpha, color, fill, group, linetype, shape, linewidth, weight.\nf + geom_dotplot(binaxis =\"y\", stackdir = \"center\"): Draw a dot plot. aes() arguments: x, y, alpha, color, fill, group.\nf + geom_violin(scale = \"area\"): Draw a violin plot. aes() arguments: x, y, alpha, color, fill, group, linetype, linewidth, weight.\n\n\n\nTwo Variables - Both Discrete\n\ng &lt;- ggplot(diamonds, aes(cut, color))\n\n\ng + geom_count(): Plot a count of points in an area to address over plotting. aes() arguments: x, y, alpha, color, fill, shape, size, stroke.\ne + geom_jitter(height = 2, width = 2): Jitter points in a plot. aes() arguments: x, y, alpha, color, fill, shape, size.\n\n\n\nTwo Variables - Continuous Bivariate Distribution\n\nh &lt;- ggplot(diamonds, aes(carat, price))\n\n\nh + geom_bin2d(binwidth = c(0.25, 500)): Draw a heatmap of 2D rectangular bin counts. aes() arguments: x, y, alpha, color, fill, linetype, size, weight.\nh + geom_density_2d(): Plot contours from 2D kernel density estimation. aes() arguments: x, y, alpha, color, group, linetype, linewidth.\nh + geom_hex(): Draw a heatmap of 2D hexagonal bin counts. aes() arguments: x, y, alpha, color, fill, linewidth.\n\n\n\nTwo Variables - Continuous Function\n\ni &lt;- ggplot(economics, aes(date, unemploy))\n\n\ni + geom_area(): Draw an area plot. aes() arguments: x, y, alpha, color, fill, linetype, linewidth.\ni + geom_line(): Connect data points, ordered by the x axis variable. aes() arguments: x, y, alpha, color, group, linetype, linewidth.\ni + geom_step(direction = \"hv\": Draw a stairstep plot. aes() arguments: x, y, alpha, color, group, linetype, linewidth.\n\n\n\nTwo Variables - Visualizing Error\n\ndf &lt;- data.frame(grp = c(\"A\", \"B\"), fit = 4:5, se = 1:2)\nj &lt;- ggplot(df, aes(grp, fit, ymin = fit - se, ymax = fit + se))\n\n\nj + geom_crossbar(fatten = 2): Draw a crossbar. aes() arguments: x, y, ymax, ymin, alpha, color, fill, group, linetype, linewidth.\nj + geom_errorbar(): Draw an errorbar. Also geom_errorbarh(). aes() arguments: x, ymax, ymin, alpha, color, group, linetype, linewidth, width.\nj + geom_linerange(): Draw a line range. aes() arguments: x, ymin, ymax, alpha, color, group, linetype, linewidth.\nj + geom_pointrange(): Draw a point range. aes() arguments: x, y, ymin, ymax, alpha, color, fill, group, linetype, shape, linewidth.\n\n\n\nTwo Variables - Maps\nDraw the appropriate geometric object depending on the simple features present in the data. aes() arguments: map_id, alpha, color, fill, linetype, linewidth.\n\nnc &lt;- sf::st_read(system.file(\"shape/nc.shp\", package = \"sf\"))\nggplot(nc) +\n  geom_sf(aes(fill = AREA))\n\n\n\nThree Variables\n\nseals$z &lt;- with(seals, sqrt(delta_long^2 + delta_lat^2))\nl &lt;- ggplot(seals, aes(long, lat))\n\n\nl + geom_contour(aes(z = z)): Draw 2D contour plot. aes() arguments: x, y, z, alpha, color, group, linetype, linewidth, weight.\nl + geom_contour_filled(aes(fill = z)): Draw 2D contour plot with the space between lines filled. aes() arguments: x, y, alpha, color, fill, group, linetype, linewidth, subgroup.\nl + geom_raster(aes(fill = z), hjust = 0.5, vjust = 0.5, interpolate = FALSE): Draw a raster plot. aes() arguments: x, y, alpha, fill.\nl + geom_tile(aes(fill = z)): Draw a tile plot. aes() arguments: x, y, alpha, color, fill, linetype, linewidth, width."
  },
  {
    "objectID": "html/data-visualization.html#stats",
    "href": "html/data-visualization.html#stats",
    "title": "Data visualization with ggplot2 :: Cheat Sheet",
    "section": "Stats",
    "text": "Stats\nAn alternative way to build a layer.\nA stat builds new variables to plot (e.g., count, prop).\nVisualize a stat by changing the default stat of a geom function, geom_bar(stat = \"count\"), or by using a stat function, stat_count(geom = \"bar\"), which calls a default geom to make a layer (equivalent to a geom function). Use after_stat(name) syntax to map the stat variable name to an aesthetic.\n\ni + stat_density_2d(aes(fill = after_stat(level)), geom = \"polygon\")\n\nIn this example, \"polygon\" is the geom to use, stat_density_2d() is the stat function, aes() contains the geom mappings, and level is the variable created by stat.\n\nc + stat_bin(binwidth = 1, boundary = 10): x, y | count, ncount, density, ndensity\nc + stat_count(width = 1): x, y | count, density\nc + stat_density(adjust = 1, kernel = \"gaussian\"): x, y | count, density, scaled\ne + stat_bin_2d(bins = 30, drop = T): x, y, fill | count, density\ne + stat_bin_hex(bins =30): x, y, fill | count, density\ne + stat_density_2d(contour = TRUE, n = 100): x, y, color, linewidth | level\ne + stat_ellipse(level = 0.95, segments = 51, type = \"t\")\nl + stat_contour(aes(z = z)): x, y, z, order | level\nl + stat_summary_hex(aes(z = z), bins = 30, fun = max): x, y, z, fill | value\nl + stat_summary_2d(aes(z = z), bins = 30, fun = mean): x, y, z, fill | value\nf + stat_boxplot(coef = 1.5): x, y | lower, middle, upper, width, ymin, ymax\nf + stat_ydensity(kernel = \"gaussian\", scale = \"area\"): x, y | density, scaled, count, n, violinwidth, width\ne + stat_ecdf(n = 40): x, y | x, y\ne + stat_quantile(quantiles = c(0.1, 0.9), formula = y ~ log(x), method = \"rq\"): x, y | quantile\ne + stat_smooth(method = \"lm\", formula = y ~ x, se = T, level = 0.95): x, y | se, x, y, ymin, ymax\nggplot() + xlim(-5, 5) + stat_function(fun = dnorm, n = 20, geom = \"point\"): x | x, y\nggplot() + stat_qq(aes(sample = 1:100)): x, y, sample | sample, theoretical\ne + stat_sum(): x, y, size | n, prop\ne + stat_summary(fun.data = \"mean_cl_boot\")\nh + stat_summary_bin(fun = \"mean\", geom = \"bar\")\ne + stat_identity()\ne + stat_unique()"
  },
  {
    "objectID": "html/data-visualization.html#scales",
    "href": "html/data-visualization.html#scales",
    "title": "Data visualization with ggplot2 :: Cheat Sheet",
    "section": "Scales",
    "text": "Scales\nOverride defaults with scales package.\nScales map data values to the visual values of an aesthetic. To change a mapping, add a new scale.\n\nn &lt;- d + geom_bar(aes(fill = fl))\n\nn + scale_fill_manual(\n  values = c(\"skyblue\", \"royalblue\", \"blue\", \"navy\"),\n  limits = c(\"d\", \"e\", \"p\", \"r\"),\n  breaks =c(\"d\", \"e\", \"p\", \"r\"),\n  name = \"fuel\", \n  labels = c(\"D\", \"E\", \"P\", \"R\")\n)\n\nIn this example, scale_ specifies a scale function, fill is the aesthetic to adjust, and manual is the prepackaged scale to use.\nvalues contains scale-specific arguments, limits specifies the range of values to include in mappings, breaks specifies the breaks to use in legend/axis, and name and labels specify the title and labels to use in the legend/axis.\n\nGeneral Purpose Scales\nUse with most aesthetics.\n\nscale_*_continuous(): Map continuous values to visual ones.\nscale_*_discrete(): Map discrete values to visual ones.\nscale_*_binned(): Map continuous values to discrete bins.\nscale_*_identity(): Use data values as visual ones.\nscale_*_manual(values = c()): Map discrete values to manually chosen visual ones.\nscale_*_date(date_labels = \"%m/%d\", date_breaks = \"2 weeks\"): Treat data values as dates.\nscale_*_datetime(): Treat data values as date times. Same as scale_*_date(). See ?strptime for label formats.\n\n\n\nX & Y Location Scales\nUse with x or y aesthetics (x shown here).\n\nscale_x_log10(): Plot x on log10 scale.\nscale_x_reverse(): Reverse the direction of the x axis.\nscale_x_sqrt(): Plot x on square root scale.\n\n\n\nColor and Fill Scales (Discrete)\n\nn + scale_fill_brewer(palette = \"Blues\"): Use color scales from ColorBrewer. For palette choices RColorBrewer::display.brewer.all().\nn + scale_fill_grey(start = 0.2, end = 0.8, na.value = \"red\"): Use a grey gradient color scale.\n\n\n\nColor and Fill Scales (Continuous)\n\no &lt;- c + geom_dotplot(aes(fill = ..x..))\n\n\no + scale_fill_distiller(palette = \"Blues\"): Interpolate a palette into a continuous scale.\no + scale_fill_gradient(low = \"red\", high = \"yellow\"): Create a two color gradient.\no + scale_fill_gradient2(low = \"red\", high = \"blue\", mid = \"white\", midpoint = 25): Create a diverging color gradient.\no + scale_fill_gradientn(colors = topo.colors(6)): Create a n-color gradient. Also rainbow(), heat.colors(), terrain.colors(), cm.colors(), RColorBrewer::brewer.pal().\n\n\n\nShape and Size Scales\n\np &lt;- e + geom_point(aes(shape = fl, size = cyl))\n\n\np + scale_shape() + scale_size(): Map discrete values to shape and size aesthetics.\np + scale_shape_manual(values = c(3:7)): Map discrete values to specified shape values.\np + scale_radius(range = c(1,6)): Map values to a shape’s radius.\np + scale_size_area(max_size = 6): Like scale_size() but maps zero values to zero size.\n\nShapes used here are the same as the ones listed in the Aes section."
  },
  {
    "objectID": "html/data-visualization.html#coordinate-systems",
    "href": "html/data-visualization.html#coordinate-systems",
    "title": "Data visualization with ggplot2 :: Cheat Sheet",
    "section": "Coordinate Systems",
    "text": "Coordinate Systems\n\nu &lt;- d + geom_bar()\n\n\nu + coord_cartesian(xlim = c(0, 5)): xlim, ylim. The default Cartesian coordinate system.\nu + coord_fixed(ratio = 1/2): ratio, xlim, ylim. Cartesian coordinates with fixed aspect ration between x and y units.\nggplot(mpg, aes(y = fl)) + geom_bar(): Flip Cartesian coordinates by switching x and y aesthetic mappings.\nu + coord_polar(theta = \"x\", direction = 1): theta, start, direction. Polar coordinates.\nu + coord_trans(y = \"sqrt\"): x, y, xlim, ylim. Transformed Cartesian coordinates. Set xtrans and ytrans to the name of a window function.\nπ + coord_sf(): xlim, ylim, crs. Ensures all layers use a common Coordinate Reference System."
  },
  {
    "objectID": "html/data-visualization.html#position-adjustments",
    "href": "html/data-visualization.html#position-adjustments",
    "title": "Data visualization with ggplot2 :: Cheat Sheet",
    "section": "Position Adjustments",
    "text": "Position Adjustments\nPosition adjustments determine how to arrange geoms that would otherwise occupy the same space.\n\ns &lt;- ggplot(mpg, aes(fl, fill = drv))\n\n\ns + geom_bar(position = \"dodge\"): Arrange elements side by side.\ns + geom_bar(position = \"fill\"): Stack elements on top of one another, normalize height.\ne + geom_point(position = \"jitter\"): Add random noise to X and Y position of each element to avoid over plotting.\ne + geom_label(position = \"nudge\"): Nudge labels away from points.\ns + geom_bar(position = \"stack\"): Stack elements on top of one another.\n\nEach position adjustment can be recast as a function with manual width and height arguments:\n\ns + geom_bar(position = position_dodge(width = 1))"
  },
  {
    "objectID": "html/data-visualization.html#themes",
    "href": "html/data-visualization.html#themes",
    "title": "Data visualization with ggplot2 :: Cheat Sheet",
    "section": "Themes",
    "text": "Themes\n\nu + theme_bw(): White background with grid lines.\nu + theme_gray(): Grey background with white grid lines (default theme).\nu + theme_dark(): Dark grey background and grid lines for contrast.\nu + theme_classic(): No grid lines.\nu + theme_light(): Light grey axes and grid lines.\nu + theme_linedraw(): Uses only black lines.\nu + theme_minimal(): Minimal theme.\nu + theme_void(): Empty theme.\nu + theme(): Customize aspects of the theme such as axis, legend, panel, and facet properties.\n\n\nu + labs(title = \"Title\") + theme(plot.title.position = \"plot\")\nu + theme(panel.background = element_rect(fill = \"blue\"))"
  },
  {
    "objectID": "html/data-visualization.html#faceting",
    "href": "html/data-visualization.html#faceting",
    "title": "Data visualization with ggplot2 :: Cheat Sheet",
    "section": "Faceting",
    "text": "Faceting\nFacets divide a plot into subplots based on the values of one or more discrete variables.\n\nt &lt;- ggplot(mpg, aes(cty, hwy)) + geom_point()\n\n\nt + facet_grid(. ~ fl): Facet into a column based on fl.\nt + facet_grid(year ~ .): Facet into rows based on year.\nt + facet_grid(year ~ fl): Facet into both rows and columns.\nt + facet_wrap(~ fl): Wrap facets into a rectangular layout.\nt + facet_grid(drv ~ fl, scales = \"free\"): Set scales to let axis limits vary across facets. Also \"free_x\" for x axis limits adjust to individual facets and \"free_y\" for y axis limits adjust to individual facets.\n\nSet labeller to adjust facet label:\n\nt + facet_grid(. ~ fl, labeller = label_both): Labels each facet as “fl: c”, “fl: d”, etc.\nt + facet_grid(fl ~ ., labeller = label_bquote(alpha ^ .(fl))): Labels each facet as “𝛼c”, “𝛼d”, etc."
  },
  {
    "objectID": "html/data-visualization.html#labels-and-legends",
    "href": "html/data-visualization.html#labels-and-legends",
    "title": "Data visualization with ggplot2 :: Cheat Sheet",
    "section": "Labels and Legends",
    "text": "Labels and Legends\nUse labs() to label elements of your plot.\nt + labs(x = \"New x axis label\", \n  y = \"New y axis label\",\n  title =\"Add a title above the plot\",\n  subtitle = \"Add a subtitle below title\",\n  caption = \"Add a caption below plot\",\n  alt = \"Add alt text to the plot\",\n  &lt;Aes&gt; = \"New &lt;Aes&gt; legend title\")\n\nt + annotate(geom = \"text\", x = 8, y = 9, label = \"A\"): Places a geom with manually selected aesthetics.\np + guides(x = guide_axis(n.dodge = 2)): Avoid crowded or overlapping labels with guide_axis(n.dodge or angle).\nn + guides(fill = \"none\"): Set legend type for each aesthetic: colorbar, legend, or none (no legend).\nn + theme(legend.position = \"bottom\"): Place legend at “bottom”, “top”, “left”, or “right”.\nn + scale_fill_discrete(name = \"Title\", labels = c(\"A\", \"B\", \"C\", \"D\", \"E\")): Set legend title and labels with a scale function."
  },
  {
    "objectID": "html/data-visualization.html#zooming",
    "href": "html/data-visualization.html#zooming",
    "title": "Data visualization with ggplot2 :: Cheat Sheet",
    "section": "Zooming",
    "text": "Zooming\n\nt + coord_cartesian(xlim = c(0, 100), ylim = c(10,20)): Zoom without clipping (preferred).\nt + xlim(0, 100) + ylim(10, 20) or t + scale_x_continuous(limits = c(0, 100)) + scale_y_continuous(limits = c(0, 100)): Zoom with clipping (removes unseen data points).\n\n\nCC BY SA Posit Software, PBC • info@posit.co • posit.co\nLearn more at ggplot2.tidyverse.org.\nUpdated: 2025-07.\n\npackageVersion(\"ggplot2\")\n\n[1] '3.5.2'"
  },
  {
    "objectID": "html/data-import.html",
    "href": "html/data-import.html",
    "title": "Data import with the tidyverse :: Cheatsheet",
    "section": "",
    "text": "Download PDF\n\n  \n\nTranslations (PDF)\n\n\nBengali\nPersian\nPortuguese\nRussian\nSpanish\nTurkish\nUkrainian\nUzbek\nOne of the first steps of a project is to import outside data into R. Data is often stored in tabular formats, like csv files or spreadsheets.\nlibrary(readr)\nlibrary(readxl)\nlibrary(googlesheets4)\nFor importing other types of data try one of the following packages:"
  },
  {
    "objectID": "html/data-import.html#read-tabular-data-with-readr",
    "href": "html/data-import.html#read-tabular-data-with-readr",
    "title": "Data import with the tidyverse :: Cheatsheet",
    "section": "Read Tabular Data with readr",
    "text": "Read Tabular Data with readr\nSee ?read_delim.\nread_*(\n  file, \n  col_names = TRUE, col_types = NULL, col_select = NULL, \n  show_col_types = TRUE\n  id = NULL, locale, \n  n_max = Inf, skip = 0, guess_max = min(1000, n_max), \n  na = c(\"\", \"NA\")\n)\n\nExamples\n\nRead files with any delimiter: read_delim(). If no delimiter is specified, it will automatically guess.\n\nIf the file you want to import is the following:\nA|B|C\n1|2|3\n4|5|NA\nRead it with read_delim() and it will look like the following when imported:\n\nread_delim(\"file.txt\", delim = \"|\", show_col_types = FALSE)\n\nTo make file.txt, run:\n\nwrite_file(\"A|B|C\\n1|2|3\\n4|5|NA\", file = \"file.txt\")\n\n\nRead a comma delimited file with period decimal marks: read_csv().\n\nIf the file you want to import is the following:\nA,B,C\n1,2,3\n4,5,NA\nRead it with read_csv() and it will look like the following when imported:\n\nread_csv(\"file.csv\", show_col_types = FALSE)\n\nTo make file.csv, run:\n\nwrite_file(\"A,B,C\\n1,2,3\\n4,5,NA\", file = \"file.csv\")\n\n\nRead semicolon delimited files with comma decimal marks: read_csv2().\n\nIf the file you want to import is the following:\nA;B;C\n1,5;2;3\n4,5;5;NA\nRead it with read_csv2() and it will look like the following when imported:\n\nread_csv2(\"file2.csv\", show_col_types = FALSE)\n\nTo make file2.csv, run:\n\nwrite_file(\"A;B;C\\n1,5;2;3\\n4,5;5;NA\", file = \"file2.csv\")\n\n\nRead a tab delimited file: read_tsv() or read_table().\nRead a fixed width file: read_fwf(\"file.tsv\", fwf_widths(c(2, 2, NA))).\n\nIf the file you want to import is the following:\nA B C\n1 2 3\n4 5 NA\nRead it with read_tsv() and it will look like the following when imported:\n\nread_tsv(\"file.tsv\", show_col_types = FALSE)\n\nTo make tsv, run:\n\nwrite_file(\"A\\tB\\tC\\n1\\t2\\t3\\n4\\t5\\tNA\\n\", file = \"file.tsv\")\n\n\n\n\n\nUseful read arguments\nSuppose you have the following CSV files that you want to read in, called file.csv:\nfile.csv\nA,B,C\n1,2,3\n4,5,NA\nfile3.csv\nA,B,C\n7,8,9\nNA,11,12\nTo make these files, run:\n\nwrite_file(\"A,B,C\\n1,2,3\\n4,5,NA\", file = \"file.csv\")\nwrite_file(\"A,B,C\\n7,8,9\\nNA,11,12\", file = \"file3.csv\")\n\n\nNo header: col_names = FALSE\n\nread_csv(\"file.csv\", col_names = FALSE)\n\nProvide header: col_names = c(\"x\", \"y\", \"z\")\n\nread_csv(\"file.csv\", col_names = c(\"x\", \"y\", \"z\"))\n\nSkip lines:\n\nread_csv(\"file.csv\", skip = 1)\n\nRead a subset of lines:\n\nread_csv(\"file.csv\", n_max = 1)\n\nRead values as missing:\n\nread_csv(\"file.csv\", na = c(\"1\"))\n\nSpecify decimal marks:\n\nread_delim(\"file2.csv\", locale = locale(decimal_mark = \",\"))\n\nRead multiple files into a single table:\n\nread_csv(c(\"file.csv\", \"file3.csv\"), id = \"origin_file\")\n\n\n\n\nSave data with readr\nwrite_*(\n  x, file, \n  na = \"NA\", \n  append, col_names, quote, escape, eol, num_threads, progress\n)\n\nWrite files with any delimiter: write_delim(x, file, delim = \" \")\nWrite a comma delimited file: write_csv(x, file)\nWrite a semicolon delimited file: write_csv2(x, file)\nWrite a tab delimited file: write_tsv(x, file)\n\n\n\nColumn specification with readr\nColumn specifications define what data type each column of a file will be imported as. By default readr will generate a column spec when a file is read and output a summary.\nspec(df): Extract the full column specification for the given imported data frame.\n\nspec(df)\n# cols(\n#   age = col_integer(),   # age is an integer\n#   edu = col_character(), # edu is a character\n#   earn = col_double()    # earn is a double (numeric)\n# )\n\n\nColumn types\nEach column type has a function and corresponding string abbreviation.\n\ncol_logical() - \"l\"\ncol_integer() - \"i\"\ncol_double() - \"d\"\ncol_number() - \"n\"\ncol_character() - \"c\"\ncol_factor(levels, ordered = FALSE) - \"f\"\ncol_datetime(format = \"\") - \"T\"\ncol_date(format = \"\") - \"D\"\ncol_time(format = \"\") - \"t\"\ncol_skip() - \"-\", \"_\"\ncol_guess() - \"?\"\n\n\n\nUseful column arguments\n\nHide col spec message:\nread_*(file, show_col_types = FALSE)\nSelect columns to import: Use names, position, or selection helpers.\nread_*(file, col_select = c(age, earn))\nGuess column types: To guess a column type, read_ *() looks at the first 1000 rows of data. Increase with guess_max.\nread_*(file, guess_max = Inf)\n\n\n\nDefine column specification\n\nSet a default type:\n\nread_csv(\n  file, \n  col_type = list(.default = col_double())\n)\n\nUse column type or string abbreviation:\n\nread_csv(\n  file, \n  col_type = list(x = col_double(), y = \"l\", z = \"_\")\n)\n\nUse a single string of abbreviations:\n\n# col types: skip, guess, integer, logical, character\nread_csv(\n  file, \n  col_type = \"_?ilc\"\n)"
  },
  {
    "objectID": "html/data-import.html#import-spreadsheets-with-readxl",
    "href": "html/data-import.html#import-spreadsheets-with-readxl",
    "title": "Data import with the tidyverse :: Cheatsheet",
    "section": "Import spreadsheets with readxl",
    "text": "Import spreadsheets with readxl\n\nRead Excel files\nRead a .xls or .xlsx file based on the file extension, e.g. read_excel(\"excel_file.xlsx\"). See Useful read arguments for more read arguments. Also read_xls() and read_xlsx().\n\nread_excel(path, sheet = NULL, range = NULL)\n\n\nIf the Google sheet you want to import is the following:\n\nSpreadsheet with 5 columns (A through E) and three rows. First row reads x1 through x5. Second and third row have some missing values.\n\n\nA\nB\nC\nD\nE\n\n\n\n\nx1\nx2\nx3\nx4\nx5\n\n\nx\n\nz\n8\n\n\n\ny\n7\n\n9\n10\n\n\n\nIt will look like the following when imported:\n\n\n\nRead sheets\n\nSpecify which sheet to read by position or name: read_excel(path, sheet = NULL)\n\nread_excel(path, sheet = 1)\nread_excel(path, sheet = \"s1\")\n\nGet a vector of sheet names: excel_sheets(path)\nexcel_sheets(\"excel_file.xlsx\")\nTo read multiple sheets:\n\nGet a vector of sheet names from the file path.\nSet the vector names to be the sheet names.\nUse purrr::map() and purrr::list_rbind() to read multiple files into one data frame.\n\npath &lt;- \"your_file_path.xlsx\"\npath |&gt; \n  excel_sheets() |&gt;\n  set_names() |&gt;\n  map(read_excel, path = path) |&gt;\n  list_rbind()\n\n\n\n\n\nreadxl column specification\n\nColumn specifications define what data type each column of a file will be imported as.\nUse the col_types argument of read_excel() to set the column specification.\nGuess column types: To guess a column type, read_excel() looks at the first 1000 rows of data. Increase with the guess_max argument.\n\nread_excel(path, guess_max = Inf)\n\nSet all columns to same type, e.g. character:\n\nread_excel(path, col_types = \"text\")\n\nSet each column individually:\n\nread_excel(\n  path,\n  col_types = c(\"text\", \"guess\", \"guess\",\"numeric\")\n)\n\nColumn types:\n\nTable with 5 columns. Column headers are various data types (logical, numeric, text, date, and list). The data in two rows show examples of data for the given column type.\n\n\nlogical\nnumeric\ntext\ndate\nlist\n\n\n\n\nTRUE\n2\nhello\n1947-01-08\nhello\n\n\nFALSE\n3.45\nworld\n1956-10-21\n1\n\n\n\n\nskip\nguess\nlogical\ndate\nnumeric\ntext\nUse listfor columns that include multiple data types. See tidyr and purrr for list-column data.\n\n\n\n\nOther useful Excel packages\n\nFor functions to write data to Excel files: openxlsx and writexl\nFor working with non-tabular Excel data: tidyxl"
  },
  {
    "objectID": "html/data-import.html#import-spreadsheets-with-googlesheets4",
    "href": "html/data-import.html#import-spreadsheets-with-googlesheets4",
    "title": "Data import with the tidyverse :: Cheatsheet",
    "section": "Import spreadsheets with googlesheets4",
    "text": "Import spreadsheets with googlesheets4\n\nRead sheets\nRead a sheet from a URL, a Sheet ID, or a dribble samefrom the googledrive package. See Useful read arguments for more read arguments.\n\nread_sheet(ss, sheet = NULL, range = NULL)\n\nSame as range_read().\n\nIf the Google sheet you want to import is the following:\n\nSpreadsheet with 5 columns (A through E) and three rows. First row reads x1 through x5. Second and third row have some missing values.\n\n\nA\nB\nC\nD\nE\n\n\n\n\nx1\nx2\nx3\nx4\nx5\n\n\nx\n\nz\n8\n\n\n\ny\n7\n\n9\n10\n\n\n\nIt will look like the following when imported:\n\n\n\nSheet metadata\n\nURLs are in the form:\nhttps://docs.google.com/spreadsheets/d/\n            SPREADSHEET_ID/edit#gid=SHEET_ID\nGet spreadsheet meta data: gs4_get(ss)\nGet data on all spreadsheet files: gs4_find(...)\nGet a tibble of properties for each worksheet: sheet_properties(ss). Also sheet_names().\n\n\n\nWrite sheets\n\nwrite_sheet(data, ss = NULL, sheet = NULL): Write a data frame into a new or existing Sheet. \ngs4_create(name, ..., sheets = NULL): Create a new Sheet with a vector of names, a data frame, or a (named) list of data frames.\nsheet_append(ss, data, sheet = 1): Add rows to the end of a worksheet.\n\n\n\ngooglesheets4 column specification\nColumn specifications define what data type each column of a file will be imported as.\nUse the col_types argument of read_sheet()/range_read() to set the column specification.\n\nGuess column types: To guess a column type read_sheet()/range_read() looks at the first 1000 rows of data. Increase with guess_max.\n\nread_sheet(path, guess_max = Inf)\n\nSet all columns to same type, e.g. character:\n\nread_sheet(path, col_types = \"c\")\n\nSet each column individually:\n\n# col types: skip, guess, integer, logical, character\nread_sheets(ss, col_types = \"_?ilc\")\n\nColumn types:\n\nskipped my lunch 🥙 🍱 and: “_” or “-”\nguess: “?”\nlogical: “l”\ninteger: “i”\ndouble: “d”\nnumeric: “n”\ndate: “D”\ndatetime: “T”\ncharacter: “c”\nlist-column: “L”\ncell: “C” (returns list of raw cell data)\nUse list for columns that include multiple data types. See tidyr and purrr for list-column data.\n\n\n\n\nFile level operations\n\ngooglesheets4 also offers ways to modify other aspects of Sheets (e.g. freeze rows, set column width, manage (work)sheets). Go to googlesheets4.tidyverse.org to read more.\nFor whole-file operations (e.g. renaming, sharing, placing within a folder), see the tidyverse package googledrive at googledrive.tidyverse.org."
  },
  {
    "objectID": "html/data-import.html#cell-specification-for-readxl-and-googlesheets4",
    "href": "html/data-import.html#cell-specification-for-readxl-and-googlesheets4",
    "title": "Data import with the tidyverse :: Cheatsheet",
    "section": "Cell specification for readxl and googlesheets4",
    "text": "Cell specification for readxl and googlesheets4\nUse the range argument of readxl::read_excel() or googlesheets4::read_sheet() to read a subset of cells from a sheet.\n\nread_excel(path, range = \"Sheet1!B1:D2\")\nread_sheet(ss, range = \"B1:D2\")\n\nAlso use the range argument with cell specification functions cell_limits(), cell_rows(), cell_cols(), and anchored().\n\nCC BY SA Posit Software, PBC • info@posit.co • posit.co\nLearn more at\n\nreadr: readr.tidyverse.org\nreadxl: readxl.tidyverse.org\ngooglesheets4: googlesheets4.tidyverse.org\n\nUpdated: 2024-05.\n\npackageVersion(\"readr\")\n\n[1] '2.1.5'\n\npackageVersion(\"readxl\")\n\n[1] '1.4.3'\n\npackageVersion(\"googlesheets4\")\n\n[1] '1.1.1'"
  },
  {
    "objectID": "contributed-cheatsheets.html",
    "href": "contributed-cheatsheets.html",
    "title": "Contributed Cheatsheets",
    "section": "",
    "text": "Cheatsheets contributed by the community. Several of these cheatsheets also have non-English translations, available on the Translated Cheatsheets page.\n\n\n\n\n\n\nadmiral\n\n\n\n\n\n\n\narrow\n\n\n\n\n\n\n\nBase R\n\n\n\n\n\n\n\n\n\nbayesplot\n\n\n\n\n\n\n\nbcea\n\n\n\n\n\n\n\ncaret\n\n\n\n\n\n\n\n\n\ncartography\n\n\n\n\n\n\n\ncollapse\n\n\n\n\n\n\n\ndatatable\n\n\n\n\n\n\n\n\n\ndeclaredesign\n\n\n\n\n\n\n\ndistr6\n\n\n\n\n\n\n\nDRomics\n\n\n\n\n\n\n\n\n\nestimatr\n\n\n\n\n\n\n\neurostat\n\n\n\n\n\n\n\ngganimate\n\n\n\n\n\n\n\n\n\nGit & GitHub\n\n\n\n\n\n\n\ngolem\n\n\n\n\n\n\n\ngtsummary\n\n\n\n\n\n\n\n\n\ngwasrapidd\n\n\n\n\n\n\n\nh2o\n\n\n\n\n\n\n\nHow big is your graph?\n\n\n\n\n\n\n\n\n\nimputeTS\n\n\n\n\n\n\n\njfa\n\n\n\n\n\n\n\nlabelled\n\n\n\n\n\n\n\n\n\nleaflet\n\n\n\n\n\n\n\nMachine learning modelling in R\n\n\n\n\n\n\n\nmapsf\n\n\n\n\n\n\n\n\n\nmetrica\n\n\n\n\n\n\n\nmlr\n\n\n\n\n\n\n\nmosaic\n\n\n\n\n\n\n\n\n\nnardl\n\n\n\n\n\n\n\nnimble\n\n\n\n\n\n\n\noSCR\n\n\n\n\n\n\n\n\n\noverviewR\n\n\n\n\n\n\n\npackagefinder\n\n\n\n\n\n\n\nParallel computation\n\n\n\n\n\n\n\n\n\nquanteda\n\n\n\n\n\n\n\nquincunx\n\n\n\n\n\n\n\nrandomizr\n\n\n\n\n\n\n\n\n\nR Best Practice\n\n\n\n\n\n\n\nRegular Expressions\n\n\n\n\n\n\n\nrgee\n\n\n\n\n\n\n\n\n\nrphylopic\n\n\n\n\n\n\n\nSamplingStrata\n\n\n\n\n\n\n\nSAS &lt;-&gt; R\n\n\n\n\n\n\n\n\n\nSASvsRinPharma\n\n\n\n\n\n\n\nsf\n\n\n\n\n\n\n\nsjmisc\n\n\n\n\n\n\n\n\n\nslackr\n\n\n\n\n\n\n\nsrvyr\n\n\n\n\n\n\n\nstata2r\n\n\n\n\n\n\n\n\n\nsurvminer\n\n\n\n\n\n\n\nR syntax comparison\n\n\n\n\n\n\n\nSqueakR\n\n\n\n\n\n\n\n\n\nteachR\n\n\n\n\n\n\n\ntidyeval\n\n\n\n\n\n\n\ntime-series\n\n\n\n\n\n\n\n\n\ntorch\n\n\n\n\n\n\n\ntsbox\n\n\n\n\n\n\n\nvegan\n\n\n\n\n\n\n\n\n\nvivainsights R\n\n\n\n\n\n\n\nvivainsights Python\n\n\n\n\n\n\n\nvtree\n\n\n\n\n\n\n\n\n\nxplain"
  },
  {
    "objectID": "html/data-transformation.html",
    "href": "html/data-transformation.html",
    "title": "Data transformation with dplyr :: Cheatsheet",
    "section": "",
    "text": "Download PDF\n\n  \n\nTranslations (PDF)\n\n\nChinese\nGerman\nPortuguese\nRussian\nSpanish\nTurkish\nUkrainian\nUzbek\ndplyr functions work with pipes and expect tidy data. In tidy data:\nlibrary(dplyr)"
  },
  {
    "objectID": "html/data-transformation.html#summarize-cases",
    "href": "html/data-transformation.html#summarize-cases",
    "title": "Data transformation with dplyr :: Cheatsheet",
    "section": "Summarize Cases",
    "text": "Summarize Cases\nApply summary functions to columns to create a new table of summary statistics. Summary functions take vectors as input and return one value back (see Summary Functions).\n\nsummarize(.data, ...): Compute table of summaries.\n\nmtcars |&gt; summarize(avg = mean(mpg))\n\ncount(.data, ..., wt = NULL, sort = FLASE, name = NULL): Count number of rows in each group defined by the variables in .... Also tally(), add_count(), and add_tally().\n\nmtcars |&gt; count(cyl)"
  },
  {
    "objectID": "html/data-transformation.html#group-cases",
    "href": "html/data-transformation.html#group-cases",
    "title": "Data transformation with dplyr :: Cheatsheet",
    "section": "Group Cases",
    "text": "Group Cases\n\nUse group_by(.data, ..., .add = FALSE, .drop = TRUE) to created a “grouped” copy of a table grouped by columns in .... dplyr functions will manipulate each “group” separately and combine the results.\n\nmtcars |&gt;\n  group_by(cyl) |&gt;\n  summarize(avg = mean(mpg))\n\nUse rowwise(.data, ...) to group data into individual rows. dplyr functions will compute results for each row. Also apply functions to list-columns. See tidyr cheatsheet for list-column workflow.\n\nstarwars |&gt;\n  rowwise() |&gt;\n  mutate(film_count = length(films))\n\nungroup(x, ...): Returns ungrouped copy of table."
  },
  {
    "objectID": "html/data-transformation.html#manipulate-cases",
    "href": "html/data-transformation.html#manipulate-cases",
    "title": "Data transformation with dplyr :: Cheatsheet",
    "section": "Manipulate Cases",
    "text": "Manipulate Cases\n\nExtract Cases\nRow functions return a subset of rows as a new table.\n\nfilter(.data, ..., .preserve = FALSE): Extract rows that meet logical criteria.\n\nmtcars |&gt; filter(mpg &gt; 20)\n\ndistinct(.data, ..., .keep_all = FALSE): Remove rows with duplicate values.\n\nmtcars |&gt; distinct(gear)\n\nslice(.data, ...,, .preserve = FALSE): Select rows by position.\n\nmtcars |&gt; slice(10:15)\n\nslice_sample(.data, ..., n, prop, weight_by = NULL, replace = FALSE): Randomly select rows. Use n to select a number of rows and prop to select a fraction of rows.\n\nmtcars |&gt; slice_sample(n = 5, replace = TRUE)\n\nslice_min(.data, order_by, ..., n, prop, with_ties = TRUE) and slice_max(): Select rows with the lowest and highest values.\n\nmtcars |&gt; slice_min(mpg, prop = 0.25)\n\nslice_head(.data, ..., n, prop) and slice_tail(): Select the first or last rows.\n\nmtcars |&gt; slice_head(n = 5)\n\n\n\nLogical and boolean operations to use with filter()\n\n==\n&lt;\n&lt;=\nis.na()\n%in%\n|\nxor()\n!=\n&gt;\n&gt;=\n!is.na()\n!\n&\nSee ?base::Logic and ?Comparison for help.\n\n\n\n\nArrange cases\n\narrange(.data, ..., .by_group = FALSE): Order rows by values of a column or columns (low to high), use with desc() to order from high to low.\n\nmtcars |&gt; arrange(mpg)\nmtcars |&gt; arrange(desc(mpg))\n\n\n\n\nAdd Cases\n\nadd_row(.data, ..., .before = NULL, .after = NULL): Add one or more rows to a table.\n\ncars |&gt; add_row(speed = 1, dist = 1)"
  },
  {
    "objectID": "html/data-transformation.html#manipulate-variables",
    "href": "html/data-transformation.html#manipulate-variables",
    "title": "Data transformation with dplyr :: Cheatsheet",
    "section": "Manipulate Variables",
    "text": "Manipulate Variables\n\nExtract Variables\nColumn functions return a set of columns as a new vector or table.\n\npull(.data, var = -1, name = NULL, ...): Extract column values as a vector, by name or index.\n\nmtcars |&gt; pull(wt)\n\nselect(.data, ...): Extract columns as a table.\n\nmtcars |&gt; select(mpg, wt)\n\nrelocate(.data, ..., .before = NULL, .after = NULL): Move columns to new position.\n\nmtcars |&gt; relocate(mpg, cyl, after = last_col())\n\n\n\nUse these helpers with select() and across()\n\nmtcars |&gt; select(mpg:cyl)\n\n\ncontains(match)\nnum_range(prefix, range)\n:, e.g., mpg:cyl\nends_with(match)\nall_of(x) or any_of(x, ..., vars)\n!, e.g., !gear\nstarts_with(match)\nmatches(match)\neverything()\n\n\n\n\nManipulate Multiple Variables at Once\n\ndf &lt;- tibble(x_1 = c(1, 2), x_2 = c(3, 4), y = c(4, 5))\n\n\nacross(.cols, .fun, ..., .name = NULL): summarize or mutate multiple columns in the same way.\n\ndf |&gt; summarize(across(everything(), mean))\n\nc_across(.cols): Compute across columns in row-wise data.\n\ndf |&gt; \n  rowwise() |&gt;\n  mutate(x_total = sum(c_across(1:2)))\n\n\n\n\nMake New Variables\nApply vectorized functions to columns. Vectorized functions take vectors as input and return vectors of the same length as output (see Vectorized Functions).\n\nmutate(.data, ..., .keep = \"all\", .before = NULL, .after = NULL): Compute new column(s). Also add_column().\n\nmtcars |&gt; mutate(gpm = 1 / mpg)\nmtcars |&gt; mutate(mtcars, gpm = 1 / mpg, .keep = \"none\")\n\nrename(.data, ...): Rename columns. Use rename_with() to rename with a function.\n\nmtcars |&gt; rename(miles_per_gallon = mpg)"
  },
  {
    "objectID": "html/data-transformation.html#vectorized-functions",
    "href": "html/data-transformation.html#vectorized-functions",
    "title": "Data transformation with dplyr :: Cheatsheet",
    "section": "Vectorized Functions",
    "text": "Vectorized Functions\n\nTo Use with mutate()\nmutate() applies vectorized functions to columns to create new columns. Vectorized functions take vectors as input and return vectors of the same length as output.\n\n\nOffset\n\ndplyr::lag(): offset elements by 1\ndplyr::lead(): offset elements by -1\n\n\n\nCumulative Aggregate\n\ndplyr::cumall(): cumulative all()\ndply::cumany(): cumulative any()\ncummax(): cumulative max()\ndplyr::cummean(): cumulative mean()\ncummin(): cumulative min()\ncumprod(): cumulative prod()\ncumsum(): cumulative sum()\n\n\n\nRanking\n\ndplyr::cume_dist(): proportion of all values &lt;=\ndplyr::dense_rank(): rank with ties = min, no gaps\ndplyr::min_rank(): rank with ties = min\ndplyr::ntile(): bins into n bins\ndplyr::percent_rank(): min_rank() scaled to [0,1]\ndplyr::row_number(): rank with ties = “first”\n\n\n\nMath\n\n+, -, /, ^, %/%, %%: arithmetic ops\nlog(), log2(), log10(): logs\n&lt;, &lt;=, &gt;, &gt;=, !=, ==: logical comparisons\ndplyr::between(): x &gt;= left & x &lt;= right\ndplyr::near(): safe == for floating point numbers\n\n\n\nMiscellaneous\n\ndplyr::case_when(): multi-case if_else()\n\nstarwars |&gt;\n  mutate(type = case_when(\n    height &gt; 200 | mass &gt; 200 ~ \"large\",\n    species == \"Droid\" ~ \"robot\",\n    TRUE ~ \"other\"\n  ))\n\ndplyr::coalesce(): first non-NA values by element across a set of vectors\ndplyr::if_else(): element-wise if() + else()\ndplyr::na_if(): replace specific values with NA\npmax(): element-wise max()\npmin(): element-wise min()"
  },
  {
    "objectID": "html/data-transformation.html#summary-functions",
    "href": "html/data-transformation.html#summary-functions",
    "title": "Data transformation with dplyr :: Cheatsheet",
    "section": "Summary Functions",
    "text": "Summary Functions\n\nTo Use with summarize()\nsummarize() applies summary functions to columns to create a new table. Summary functions take vectors as input and return single values as output.\n\n\nCount\n\ndplyr::n(): number of values/rows\ndplyr::n_distinct(): # of uniques\nsum(!is.na()): # of non-NAs\n\n\n\nPosition\n\nmean(): mean, also mean(!is.na())\nmedian(): median\n\n\n\nLogical\n\nmean(): proportion of TRUEs\nsum(): # of TRUEs\n\n\n\nOrder\n\ndplyr::first(): first value\ndplyr::last(): last value\ndplyr::nth(): value in the nth location of vector\n\n\n\nRank\n\nquantile(): nth quantile\nmin(): minimum value\nmax(): maximum value\n\n\n\nSpread\n\nIQR(): Inter-Quartile Range\nmad(): median absolute deviation\nsd(): standard deviation\nvar(): variance"
  },
  {
    "objectID": "html/data-transformation.html#row-names",
    "href": "html/data-transformation.html#row-names",
    "title": "Data transformation with dplyr :: Cheatsheet",
    "section": "Row Names",
    "text": "Row Names\nTidy data does not use rownames, which store a variable outside of the columns. To work with the rownames, first move them into a column.\n\ntibble::rownames_to_column(): Move row names into col.\n\na &lt;- rownames_to_column(mtcars, var = \"C\")\n\ntibble::columns_to_rownames(): Move col into row names.\n\ncolumn_to_rownames(a, var = \"C\")\n\nAlso tibble::has_rownames() and tibble::remove_rownames()."
  },
  {
    "objectID": "html/data-transformation.html#combine-tables",
    "href": "html/data-transformation.html#combine-tables",
    "title": "Data transformation with dplyr :: Cheatsheet",
    "section": "Combine Tables",
    "text": "Combine Tables\n\nx &lt;- tribble(\n   ~A,  ~B, ~C,\n  \"a\", \"t\",  1,\n  \"b\", \"u\",  2,\n  \"c\", \"v\",  3\n)\n\ny &lt;- tribble(\n   ~A,  ~B, ~D,\n  \"a\", \"t\",  3,\n  \"b\", \"u\",  2,\n  \"d\", \"w\",  1\n)\n\n\nCombine Variables\n\nbind_cols(..., .name_repair): Returns tables placed side by side as a single table. Column lengths must be equal. Columns will NOT be matched by id (to do that look at Relational Data below), so be sure to check that both tables are ordered the way you want before binding.\n\n\n\nCombine Cases\n\nbind_rows(..., .id = NULL): Returns tables one on top of the other as a single table. Set .id to a column name to add a column of the original table names.\n\n\n\nRelational Data\nUse a “Mutating Join” to join one table to columns from another, matching values with the rows that the correspond to. Each join retains a different combination of values from the tables.\n\nleft_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ..., keep = FALSE, na_matches = \"na\"): Join matching values from y to x.\nright_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ..., keep = FALSE, na_matches = \"na\"): Join matching values from x to y.\ninner_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ..., keep = FALSE, na_matches = \"na\"): Join data. retain only rows with matches.\nfull_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ..., keep = FALSE, na_matches = \"na\"): Join data. Retain all values, all rows.\n\nUse a “Filtering Join” to filter one table against the rows of another.\n\nsemi_join(x, y, by = NULL, copy = FALSE, ..., na_matches = \"na\"): Return rows of x that have a match in y. Use to see what will be included in a join.\nanti_join(x, y, by = NULL, copy = FALSE, ..., na_matches = \"na\"): Return rows of x that do not have a match in y. Use to see what will not be included in a join.\n\nUse a “Nest Join” to inner join one table to another into a nested data frame.\n\nnest_join(x, y, by = NULL, copy = FALSE, keep = FALSE, name = NULL, ...): Join data, nesting matches from y in a single new data frame column.\n\n\n\nColumn Matching for Joins\n\nUse by = join_by(col1, col2, …) to specify one or more common columns to match on.\n\nleft_join(x, y, by = join_by(A))\nleft_join(x, y, by = join_by(A, B))\n\nUse a logical statement, by = join_by(col1 == col2), to match on columns that have different names in each table.\n\nleft_join(x, y, by = join_by(C == D))\n\nUse suffix to specify the suffix to give to unmatched columns that have the same name in both tables.\n\nleft_join(x, y, by = join_by(C == D), suffix = c(\"1\", \"2\"))\n\n\n\n\nSet Operations\n\nintersect(x, y, ...): Rows that appear in both x and y.\nsetdiff(x, y, ...): Rows that appear in x but not y.\nunion(x, y, ...): Rows that appear in x or y, duplicates removed. union_all() retains duplicates.\nUse setequal() to test whether two data sets contain the exact same rows (in any order).\n\n\nCC BY SA Posit Software, PBC • info@posit.co • posit.co\nLearn more at dplyr.tidyverse.org.\nUpdated: 2024-05.\n\npackageVersion(\"dplyr\")\n\n[1] '1.1.4'"
  },
  {
    "objectID": "html/factors.html",
    "href": "html/factors.html",
    "title": "Factors with forcats :: Cheatsheet",
    "section": "",
    "text": "Download PDF\n\n  \n\nTranslations (PDF)\n\n\nJapanese\nPortuguese\nSpanish\nThe forcats package provides tools for working with factors, which are R’s data structure for categorical data.\nlibrary(forcats)"
  },
  {
    "objectID": "html/factors.html#factors",
    "href": "html/factors.html#factors",
    "title": "Factors with forcats :: Cheatsheet",
    "section": "Factors",
    "text": "Factors\nR represents categorical data with factors. A factor is an integer vector with a levels attribute that stores a set of mappings between integers and categorical values. When you view a factor, R displays not the integers but the levels associated with them.\nFor example, R will display c(\"a\", \"c\", \"b\", \"a\") with levels c(\"a\", \"b\", \"c\") but will store c(1, 3, 2, 1) where 1 = a, 2 = b, and 3 = c.\nR will display:\n\n\n[1] a c b a\nLevels: a b c\n\n\nR will store:\n\n\n[1] 1 3 2 1\nattr(,\"levels\")\n[1] \"a\" \"b\" \"c\"\n\n\nCreate a factor with factor():\n\nfactor(x = character(), levels, labels = levels, exclude = NA, ordered = is.ordered(x), nmax = NA): Convert a vector to a factor. Also as_factor().\n\nf &lt;- factor(c(\"a\", \"c\", \"b\", \"a\"), levels = c(\"a\", \"b\", \"c\"))\n\n\nReturn its levels with levels():\n\nlevels(x): Return/set the levels of a factor.\n\nlevels(f)\nlevels(f) &lt;- c(\"x\", \"y\", \"z\")\n\n\nUse unclass() to see its structure."
  },
  {
    "objectID": "html/factors.html#inspect-factors",
    "href": "html/factors.html#inspect-factors",
    "title": "Factors with forcats :: Cheatsheet",
    "section": "Inspect Factors",
    "text": "Inspect Factors\n\nfct_count(f, sort = FALSE, prop = FALSE): Count the number of values with each level.\n\nfct_count(f)\n\nfct_match(f, lvls): Check for lvls in f.\n\nfct_match(f, \"a\")\n\nfct_unique(f): Return the unique values, removing duplicates.\n\nfct_unique(f)"
  },
  {
    "objectID": "html/factors.html#combine-factors",
    "href": "html/factors.html#combine-factors",
    "title": "Factors with forcats :: Cheatsheet",
    "section": "Combine Factors",
    "text": "Combine Factors\n\nfct_c(...): Combine factors with different levels. Also fct_cross().\n\nf1 &lt;- factor(c(\"a\", \"c\"))\nf2 &lt;- factor(c(\"b\", \"a\"))\nfct_c(f1, f2)\n\nfct_unify(fs, levels = lvls_union(fs)): Standardize levels across a list of factors.\n\nfct_unify(list(f2, f1))"
  },
  {
    "objectID": "html/factors.html#change-the-order-of-levels",
    "href": "html/factors.html#change-the-order-of-levels",
    "title": "Factors with forcats :: Cheatsheet",
    "section": "Change the order of levels",
    "text": "Change the order of levels\n\nfct_relevel(.f, ..., after = 0L): Manually reorder factor levels.\n\nfct_relevel(f, c(\"b\", \"c\", \"a\"))\n\nfct_infreq(f, ordered = NA): Reorder levels by the frequency in which they appear in the data (highest frequency first). Also fct_inseq().\n\nf3 &lt;- factor(c(\"c\", \"c\", \"a\"))\nfct_infreq(f3)\n\nfct_inorder(f, ordered = NA): Reorder levels by order in which they appear in the data.\n\nfct_inorder(f2)\n\nfct_rev(f): Reverse level order.\n\nf4 &lt;- factor(c(\"a\",\"b\",\"c\"))\nfct_rev(f4)\n\nfct_shift(f): Shift levels to left or right, wrapping around end.\n\nfct_shift(f4)\n\nfct_shuffle(f, n = 1L): Randomly permute order of factor levels.\n\nfct_shuffle(f4)\n\nfct_reorder(.f, .x, .fun = median, ..., .desc = FALSE): Reorder levels by their relationship with another variable.\n\nboxplot(PlantGrowth, weight ~ fct_reorder(group, weight))\n\nfct_reorder2(.f, .x, .y, .fun = last2, ..., .desc = TRUE): Reorder levels by their final values when plotted with two other variables.\n\nggplot(\n  diamonds,\n  aes(carat, price, color = fct_reorder2(color, carat, price))\n  ) + \n  geom_smooth()"
  },
  {
    "objectID": "html/factors.html#change-the-value-of-levels",
    "href": "html/factors.html#change-the-value-of-levels",
    "title": "Factors with forcats :: Cheatsheet",
    "section": "Change the value of levels",
    "text": "Change the value of levels\n\nfct_recode(.f, ...): Manually change levels. Also fct_relabel() which obeys purrr::map syntax to apply a function or expression to each level.\n\nfct_recode(f, v = \"a\", x = \"b\", z = \"c\")\nfct_relabel(f, ~ paste0(\"x\", .x))\n\nfct_anon(f, prefix = \"\"): Anonymize levels with random integers.\n\nfct_anon(f)\n\nfct_collapse(.f, …, other_level = NULL): Collapse levels into manually defined groups.\n\nfct_collapse(f, x = c(\"a\", \"b\"))\n\nfct_lump_min(f, min, w = NULL, other_level = \"Other\"): Lumps together factors that appear fewer than min times. Also fct_lump_n(), fct_lump_prop(), and fct_lump_lowfreq().\n\nfct_lump_min(f, min = 2)\n\nfct_other(f, keep, drop, other_level = \"Other\"): Replace levels with “other.”\n\nfct_other(f, keep = c(\"a\", \"b\"))"
  },
  {
    "objectID": "html/factors.html#add-or-drop-levels",
    "href": "html/factors.html#add-or-drop-levels",
    "title": "Factors with forcats :: Cheatsheet",
    "section": "Add or drop levels",
    "text": "Add or drop levels\n\nfct_drop(f, only): Drop unused levels.\n\nf5 &lt;- factor(c(\"a\",\"b\"),c(\"a\",\"b\",\"x\"))\nf6 &lt;- fct_drop(f5)\n\nfct_expand(f, ...): Add levels to a factor.\n\nfct_expand(f6, \"x\")\n\nfct_na_value_to_level(f, level = \"(Missing)\"): Assigns a level to NAs to ensure they appear in plots, etc.\n\nf &lt;- factor(c(\"a\", \"b\", NA))\nfct_na_value_to_level(f, level = \"(Missing)\")\n\n\n\nCC BY SA Posit Software, PBC • info@posit.co • posit.co\nLearn more at forcats.tidyverse.org.\nUpdated: 2024-05.\n\npackageVersion(\"forcats\")\n\n[1] '1.0.0'"
  },
  {
    "objectID": "html/lubridate.html",
    "href": "html/lubridate.html",
    "title": "Dates and times with lubridate :: Cheatsheet",
    "section": "",
    "text": "Download PDF\n\n  \n\nTranslations (PDF)\n\n\nPortuguese\nRussian\nSpanish\nUkrainian\nVietnamese"
  },
  {
    "objectID": "html/lubridate.html#date-times",
    "href": "html/lubridate.html#date-times",
    "title": "Dates and times with lubridate :: Cheatsheet",
    "section": "Date-times",
    "text": "Date-times\n\nlibrary(lubridate)\n\nA date-time is a point on the timeline, stored as the number of seconds since 1970-01-01 00:00:00 UTC\n\ndt &lt;- as_datetime(1511870400)\n\nA date is a day stored as the number of days since 1970-01-01\n\nd &lt;- as_date(17498)\n\nAn hms is a time stored as the number of seconds since 00:00:00\n\nt &lt;- hms::as_hms(85)\n\n\nParse Date-Times\nConvert strings or numbers to date-times\n\nIdentify the order of the year (y), month (m), day (d), hour (h), minute (m) and second (s) elements in your data.\nUse the function below whose name replicates the order. Each accepts a tz argument to set the time zone, e.g. ymd(x, tz = \"UTC\").\n\n\nymd_hms(), ymd_hm(), ymd_h()\n\nymd_hms(\"2017-11-28T14:02:00\")\n\nydm_hms(), ydm_hm(), ydm_h()\n\nydm_hms(\"2017-22-12 10:00:00\")\n\nmdy_hms(), mdy_hm(), mdy_h()\n\nmdy_hms(\"11/28/2017 1:02:03\")\n\ndmy_hms(), dmy_hm(), dmy_h()\n\ndmy_hms(\"1 Jan 2017 23:59:59\")\n\nymd(), ydm()\n\nymd(20170131)\n\nmdy(), myd()\n\nmdy(\"July 4th, 2000\")\n\ndmy(), dym()\n\ndmy(\"4th of July '99\")\n\nyq(): Q for quarter.\n\nyq(\"2001: Q3\")\n\nmy(), ym()\n\nmy(\"07-2020\")\n\nhms::hms(): Also lubridate::hms(), hm(), and ms(), which return periods*.\n\nhms::hms(seconds = 0, minutes = 1, hours = 2)\n\ndate_decimal(decimal, tz = \"UTC\")\n\ndate_decimal(2017.5)\n\nnow(tzone = \"\"): Current time in tz (defaults to system tz).\n\nnow()\n\ntoday(tzone = \"\"): Current date in a tz (defaults to system tz).\n\ntoday()\n\nfast_strptime(): Faster strptime.\n\nfast_strptime(\"9/1/01\", \"%y/%m/%d\")\n\nparse_date_time(): Easier strptime.\n\nparse_date_time(\"09-01-01\", \"ymd\")\n\n\n\n\nGet and Set Components\nUse an accessor function to get a component.\n\nd\n\n[1] \"2017-11-28\"\n\nday(d)\n\n[1] 28\n\n\nAssign into an accessor function to change a component in place.\n\nday(d) &lt;- 1\nd\n\n[1] \"2017-11-01\"\n\n\n\ndate(x): Date component.\n\ndate(dt)\n\nyear(x): Year.\n\nyear(dt)\n\nisoyear(x): The ISO 8601 year.\nepiyear(x): Epidemiological year.\nmonth(x, label, abbr): Month.\n\nmonth(dt)\n\nday(x): Day of the month.\n\nday(dt)\n\nwday(x, label, abbr): Day of week.\nqday(x): Day of quarter.\nhour(x): Hour.\n\nhour(dt)\n\nminute(x): Minutes.\n\nminute(dt)\n\nsecond(x): Seconds.\n\nsecond(dt)\n\ntz(x): Time zone.\n\ntz(dt)\n\nweek(x): Week of the year.\n\nweek(dt)\n\nisoweek(): ISO 8601 week.\nepiweek(): Epidemiological week.\nquarter(x): Quarter.\n\nquarter(dt)\n\nsemester(x, with_year = FALSE): Semester.\n\nsemester(dt)\n\nam(x): Is it in the am?\n\nam(dt)\n\npm(x): Is it in the pm?\n\npm(dt)\n\ndst(x): Is it daylight savings?\n\ndst(d)\n\nleap_year(x): Is it a leap year?\n\nleap_year(d)\n\nupdate(object, ..., simple = FALSE)\n\nupdate(dt, mday = 2, hour = 1)"
  },
  {
    "objectID": "html/lubridate.html#round-date-times",
    "href": "html/lubridate.html#round-date-times",
    "title": "Dates and times with lubridate :: Cheatsheet",
    "section": "Round Date-times",
    "text": "Round Date-times\n\nfloor_date(x, unit = \"second\"): Round down to nearest unit.\n\nfloor_date(dt, unit = \"month\")\n\nround_date(x, unit = \"second\"): Round to nearest unit.\n\nround_date(dt, unit = \"month\")\n\nceiling_date(x, unit = \"second\"): Round up to the nearest unit.\n\nceiling_date(dt, unit = \"month\")\n\n\nValid units are second, minute, hour, day, week, month, bimonth, quarter, season, halfyear and year.\n\nrollback(dates, roll_to_first = FALSE, preserve_hms = TRUE): Roll back to last day of previous month. Also rollforward().\n\nrollback(dt)"
  },
  {
    "objectID": "html/lubridate.html#stamp-date-times",
    "href": "html/lubridate.html#stamp-date-times",
    "title": "Dates and times with lubridate :: Cheatsheet",
    "section": "Stamp Date-times",
    "text": "Stamp Date-times\nstamp(): Derive a template from an example string and return a new function that will apply the template to date-times. Also stamp_date() and stamp_time().\n\nDerive a template, create a function\n\nsf &lt;- stamp(\"Created Sunday, Jan 17, 1999 3:34\")\n\nApply the template to dates\n\nsf(ymd(\"2010-04-05\"))\n\n[1] \"Created Monday, Apr 05, 2010 00:00\"\n\n\n\nTip: use a date with day &gt; 12"
  },
  {
    "objectID": "html/lubridate.html#time-zones",
    "href": "html/lubridate.html#time-zones",
    "title": "Dates and times with lubridate :: Cheatsheet",
    "section": "Time Zones",
    "text": "Time Zones\nR recognizes ~600 time zones. Each encodes the time zone, Daylight Savings Time, and historical calendar variations for an area. R assigns one time zone per vector.\nUse the UTC time zone to avoid Daylight Savings.\n\nOlsonNames(): Returns a list of valid time zone names.\n\nOlsonNames()\n\nSys.timezone(): Gets current time zone.\nwith_tz(time, tzone = \"\"): Get the same date-time in a new time zone (a new clock time). Also local_time(dt, tz, units). For example, 4:00 Pacific becomes 5:00 Mountain, or 6:00 Central, or 7:00 Eastern.\n\nwith_tz(dt, \"US/Pacific\")\n\nforce_tz(time, tzone = \"\"): Get the same clock time in a new time zone (a new date-time). Also force_tzs(). For example, 7:00 Pacific becomes 7:00 Mountain, or 7:00 Central, or 7:00 Eastern.\n\nforce_tz(dt, \"US/Pacific\")"
  },
  {
    "objectID": "html/lubridate.html#math-with-date-times",
    "href": "html/lubridate.html#math-with-date-times",
    "title": "Dates and times with lubridate :: Cheatsheet",
    "section": "Math with Date-times",
    "text": "Math with Date-times\nLubridate provides three classes of timespans to facilitate math with dates and date-times.\nMath with date-times relies on the timeline, which behaves inconsistently. Consider how the timeline behaves during:\n\nA normal day:\n\n\nnor &lt;- ymd_hms(\"2018-01-01 01:30:00\", tz = \"US/Eastern\")\n\n\nThe start of daylight savings (spring forward):\n\n\ngap &lt;- ymd_hms(\"2018-03-11 01:30:00\", tz = \"US/Eastern\")\n\n\nThe end of daylight savings (fall back):\n\n\nlap &lt;- ymd_hms(\"2018-11-04 00:30:00\", tz = \"US/Eastern\")\n\n\nLeap years and leap seconds:\n\n\nleap &lt;- ymd(\"2019-03-01\")\n\nPeriods track changes in clock times, which ignore time line irregularities.\n\nnor + minutes(90)\ngap + minutes(90)\nlap + minutes(90)\nleap + years(1)\n\nDurations track the passage of physical time, which deviates from clock time when irregularities occur.\n\nnor + dminutes(90)\ngap + dminutes(90)\nlap + dminutes(90)\nleap + dyears(1)\n\nIntervals represent specific intervals of the timeline, bounded by start and end date-times.\n\ninterval(nor, nor + minutes(90))\ninterval(gap, gap + minutes(90))\ninterval(lap, lap + minutes(90))\ninterval(leap, leap + years(1))\n\nNot all years are 365 days due to leap days. Not all minutes are 60 seconds due to leap seconds. It is possible to create an imaginary date by adding months, e.g. February 31st.\n\njan31 &lt;- ymd(20180131)\njan31 + months(1)\n\n[1] NA\n\n\n%m+% and %m-% will roll imaginary dates to the last day of the previous month.\n\njan31 %m+% months(1)\n\n[1] \"2018-02-28\"\n\n\nadd_with_rollback(e1, e2, roll_to_first = TRUE) will roll imaginary dates to the first day of the new month.\n\nadd_with_rollback(jan31, months(1), roll_to_first = TRUE)\n\n[1] \"2018-03-01\"\n\n\n\nPeriods\nAdd or subtract periods to model events that happen at specific clock times, like the NYSE opening bell.\nMake a period with the name of a time unit pluralized, e.g.\n\np &lt;- months(3) + days(12)\n\n# Shows the number of months, number of days, etc.\np\n\n[1] \"3m 12d 0H 0M 0S\"\n\n\n\nyears(x = 1): x years.\nmonths(x = 1): x months.\nweeks(x = 1): x weeks.\ndays(x = 1): x days.\nhours(x = 1): x hours.\nminutes(x = 1): x minutes.\nseconds(x = 1): x seconds.\nmilliseconds(x = 1): x milliseconds.\nmicroseconds(x = 1): x microseconds.\nnanoseconds(x = 1): x nanoseconds.\npicoseconds(x = 1): x picoseconds.\nperiod(num = NULL, units = \"second\", ...): An automation friendly period constructor.\n\nperiod(5, unit = \"years\")\n\nas.period(x, unit): Coerce a timespan to a period, optionally in the specified units. Also is.period().\n\nas.period(p)\n\nperiod_to_seconds(x): Convert a period to the “standard” number of seconds implied by the period. Also seconds_to_period().\n\nperiod_to_seconds(p)\n\n\n\n\nDurations\nAdd or subtract durations to model physical processes, like battery life. Durations are stored as seconds, the only time unit with a consistent length. Difftimes are a class of durations found in base R.\nMake a duration with the name of a period prefixed with a d, e.g.\n\ndd &lt;- ddays(14)\n\n# Shows the exact length in seconds, and the equivalent in common units\ndd\n\n[1] \"1209600s (~2 weeks)\"\n\n\n\ndyears(x = 1): 31536000x seconds.\ndmonths(x = 1): 2629800x seconds.\ndweeks(x = 1): 604800x seconds.\nddays(x = 1): 86400x seconds.\ndhours(x = 1): 3600x seconds.\ndminutes(x = 1): 60x seconds.\ndseconds(x = 1): x seconds.\ndmilliseconds(x = 1): x * 10-3 seconds.\ndmicroseconds(x = 1): x * 10-6 seconds.\ndnanoseconds(x = 1): x * 10-9 seconds.\ndpicoseconds(x = 1): x * 10-12 seconds.\nduration(num = NULL, units = \"second\", ...): An automation friendly duration constructor.\n\nduration(5, unit = \"years\")\n\nas.duration(x, ...): Coerce a timespan to a duration. Also is.duration(), is.difftime().\n\nas.duration(p)\n\nmake_difftime(x): Make diffime with the specified number of units.\n\nmake_difftime(99999)\n\n\n\n\nIntervals\nDivide an interval by a duration to determine its physical length, divide by an interval by a period to determine its implied length in clock time.\nMake an interval with interval() or %--%, e.g.\n\ni &lt;- interval(ymd(\"2017-01-01\"), d)\ni\n\n[1] 2017-01-01 UTC--2017-11-01 UTC\n\n# Shows the exact length in seconds, and the equivalent in common units\nj &lt;- d %--% ymd(\"2017-12-31\")\nj\n\n[1] 2017-11-01 UTC--2017-12-31 UTC\n\n\n\na %within% b: Does interval or dte0time a fall within interval b?\n\nnow() %within% i\n\nint_start(int): Access/set the start date-time of an interval. Also int_end().\n\nint_start(i) &lt;- now()\nint_start(i)\n\nint_aligns(int1, int2): Do two intervals share a boundary? Also int_overlaps().\n\nint_aligns(i, j)\n\nint_diff(times): Make the intervals that occur between the date-times in a vector.\n\nv &lt;- c(dt, dt + 100, dt + 1000)\nint_diff(v)\n\nint_flip(int): Reverse the direction of an interval. Also int_standardize().\n\nint_flip(i)\n\nint_length(int): Length in seconds.\n\nint_length(i)\n\nint_shift(int, by): Shifts an interval up or down the timeline by a timespan.\n\nint_shift(i, days(-1))\n\nas.interval(x, start, ...): Coerce a timespan to an interval with the start date-time. Also is.interval().\n\nas.interval(days(-1), start = now())\n\n\n\nCC BY SA Posit Software, PBC • info@posit.co • posit.co\nLearn more at lubridate.tidyverse.org.\nUpdated: 2024-05.\n\npackageVersion(\"lubridate\")\n\n[1] '1.9.3'"
  },
  {
    "objectID": "html/plumber.html",
    "href": "html/plumber.html",
    "title": "REST APIs with plumber :: Cheatsheet",
    "section": "",
    "text": "Download PDF"
  },
  {
    "objectID": "html/plumber.html#introduction-to-rest-apis",
    "href": "html/plumber.html#introduction-to-rest-apis",
    "title": "REST APIs with plumber :: Cheatsheet",
    "section": "Introduction to REST APIs",
    "text": "Introduction to REST APIs\nWeb APIs use HTTP to communcation between client and server.\n\nHTTP\nHTTP is built around a request and a response. A client makes a request to a server, which handles the request and provides a response. Requests and responses are specially formatted text containing details and data about the exchange between client and server.\n\n\nRequest\nGET / get HTTP/1.1 -&gt; HTTP Method, Path, HTTP Version\nHost:, User-Agent:, Accept: -&gt; Headers\nRequest Body -&gt; Message body\ncurl -v \"http://httpbin.org/get\"\n\n#&gt; GET / get HTTP/1.1\n#&gt; Host: httpbin.org\n#&gt; User-Agent: curl/7.55.1\n#&gt; Accept: */*\n#\n# Request Body\n\n\nResponse\nHTTP/1.1 200 OK -&gt; HTTP Version, Status code, Reason phrase\nConnection:, Date: -&gt; Headers\nResponse Body -&gt; Message body\n\n#&lt; HTTP/1.1 200 OK\n#&lt; Connection: keep-alive\n#&lt; Date: Thu, 02 Aug 2018 18:22:22 GMT\n#\n# Response Body"
  },
  {
    "objectID": "html/plumber.html#plumber-build-apis-with-r",
    "href": "html/plumber.html#plumber-build-apis-with-r",
    "title": "REST APIs with plumber :: Cheatsheet",
    "section": "Plumber: Build APIs with R",
    "text": "Plumber: Build APIs with R\nPlumber uses special comments to turn any arbitrary R code into API endpoints. The example below defines a function that takes the msg argument and returns it embedded in additional text.\nPlumber comments begin with #* and @ decoators define API characteristics. In HTTP methods such as @get the /&lt;path&gt; defines the location of the endpoint.\n\nlibrary(plumber)\n\n#* @apiTitle Plumber Example API\n\n#* Echo back the input\n#* @param msg The message to echo\n#* @get /echo\nfunction(msg = \"\") {\n  list(\n    msg = paste0(\"The message is: '\", msg, \"'\")\n  )\n}"
  },
  {
    "objectID": "html/plumber.html#plumber-piperline",
    "href": "html/plumber.html#plumber-piperline",
    "title": "REST APIs with plumber :: Cheatsheet",
    "section": "Plumber piperline",
    "text": "Plumber piperline\nPlumber endpoints contain R code that is executed in response to an HTTP request. Incoming requests pass through a set of mechanisms before a response is returned to the client.\n\nFilters: Filters can forward requests (after potentially mutating them), throw errors, or return a response without forwarding the request. Filters are defined similarly to endpoints using the @filter [name] tag. By default, filters apply to all endpoints. Endpoints can opt out of filters using the @preempt tag.\nParsers: Parsers determine how Plumber parses the incoming request body. By default Plumber parses the request body as JavaScript Object Notation (JSON). Other parsers, including custom parsers, are identified using the @parser [parser name] tag. All registered parsers can be viewed with registered_parsers().\nEndpoint: Endpoints define the R code that is executed in response to incoming requests. These endpoints correspond to HTTP methods and respond to incoming requests that match the defined method.\n\nMethods\n\n@get - request a resource\n@post - send data in body\n@put - store/update data\n@delete - delete resource\n@head - no request body\n@options - describe options\n@patch - partial changes\n@use - use all methods\n\n\nSerializer: Serializers determine how Plumber returns results to the client. By default Plumber serializes the R object returned into JavaScript Object Notation (JSON). Other serializers, including custom serializers, are identified using the @serializer [serializer name] tag. All registered serializers can be viewed with registered_serializers().\n\nIdentify as filter with @filter, filter name is log, and forward request with forward():\n\nlibrary(plumber)\n\n#* @filter log\nfunction(req, res) {\n  print(req$HTTP_USER_AGENT)\n  forward()\n}\n\nDefine the endpoint description, opt out of the log filter, define the parser, HTTP method and endpoint path, and serializer:\n\n#* Convert request body to uppercase\n#* @prempt log\n#* @parser json\n#* @post /uppercase\n#* @serializer json\nfunction(req, res) {\n  toupper(req$body)\n}"
  },
  {
    "objectID": "html/plumber.html#running-plumber-apis",
    "href": "html/plumber.html#running-plumber-apis",
    "title": "REST APIs with plumber :: Cheatsheet",
    "section": "Running Plumber APIs",
    "text": "Running Plumber APIs\nPlumber APIs can be run programmatically from within an R session.\n\nlibrary(plumber)\n\n# Path to API definition\nplumb(\"plumber.R\") |&gt;\n  pr_run(port = 5762) # Specify API port\n\nThis runs the API on the host machine supported by the current R session.\n\nIDE Integration\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about plumber features in the RStudio IDE\n\n\n\n\n\nplumber features in the RStudio IDE\n\nCreate new Plumber API\nPublish API to RStudio Connect\nRun API in current R session"
  },
  {
    "objectID": "html/plumber.html#documentation",
    "href": "html/plumber.html#documentation",
    "title": "REST APIs with plumber :: Cheatsheet",
    "section": "Documentation",
    "text": "Documentation\nPlumber APIs automatically generate an OpenAPI specification file. This specification file can be interpreted to generate a dynamic user-interface for the API. The default interface is generated via Swagger\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the Swagger user interface\n\n\n\n\n\nFeatures in the Swagger user interface\n\nEndpoint details\nParameter details\nEdit parameters\nSend request\ncurl command used to send request"
  },
  {
    "objectID": "html/plumber.html#interact-with-the-api",
    "href": "html/plumber.html#interact-with-the-api",
    "title": "REST APIs with plumber :: Cheatsheet",
    "section": "Interact with the API",
    "text": "Interact with the API\nOnce the API is running, it can be interacted with using any HTTP client. Note that using httr requires using a separate R session from the one serving the API.\n\n(resp &lt;- httr::GET(\"localhost:5762/echo?msg=Hello\")) \n#&gt; Response [http://localhost:5762/echo?msg=Hello] \n#&gt; #&gt; Date: 2018-08-07 20:06\n#&gt; Status: 200\n#&gt; Content-Type: application/json\n#&gt; Size: 35 B\nhttr::content(resp, as = \"text\")\n#&gt; [1] \"{\\\"msg\\\":[\\\"The message is: 'Hello'\\\"]}\""
  },
  {
    "objectID": "html/plumber.html#programmatic-plumber",
    "href": "html/plumber.html#programmatic-plumber",
    "title": "REST APIs with plumber :: Cheatsheet",
    "section": "Programmatic Plumber",
    "text": "Programmatic Plumber\n\nTidy Plumber\nPlumber is exceptionally customizable. In addition to using special comments to create APIs, APIs can be created entirely programatically. This exposes additional features and functionality. Plumber has a convenient “tidy” interface that allows API routers to be built piece by piece. The following example is part of a standard plumber.R file.\nUse the @plumber tag, create a function that accepts and modifies a plumber router (pr), and use “tidy functions” like pr_get() and pr_post() for buildings out Plumber API.\n\nlibrary(plumber)\n\n#* @plumber\nfunction(pr) {\n  pr |&gt;\n    pr_get(path = \"/echo\",\n           handler = function(msg = \"\") {\n             list(msg = paste0(\n               \"The message is: '\",\n               msg,\n               \"'\")\n             )\n           }) |&gt;\n    pr_get(path = \"/plot\",\n           handler = function() {\n             rand &lt;- rnorm(100)\n             hist(rand)\n           },\n           serializer = serializer_png()) |&gt;\n    pr_post(path = \"/sum\",\n            handler = function(a, b) {\n              as.numeric(a) + as.numeric(b)\n            })\n}\n\n\n\nOpenAPI\nPlumber automatically creates an OpenAPI specification file based on Plumber componenets. This file can be further modified using pr_set_api_spec() with either a function that modifies the existing specification or a path to a .yaml or .json specification file.\n\nlibrary(plumber)\n\n#* @param msg The message to echo\n#* @get /echo\nfunction(msg = \"\") {\n  list(\n    msg = paste0(\"The messahe is: '\", msg, \"'\")\n  )\n}\n\n#* @plumber\nfunction(pr) {\n  pr |&gt;\n    pr_set_api_spec(\n      function(spec) {\n        spec$paths[[\"echo\"]]$get$summary &lt;- \"Echo back the input\"\n        spec # Return the updated specification\n      }\n    )\n}\n\nBy default, Swagger is used to interpret the OpenAPI specification file and generate the user interface for the API. Other interpreters can be used to adjust the look and feel of the user interface via pr_set_docs()."
  },
  {
    "objectID": "html/plumber.html#advanced-plumber",
    "href": "html/plumber.html#advanced-plumber",
    "title": "REST APIs with plumber :: Cheatsheet",
    "section": "Advanced Plumber",
    "text": "Advanced Plumber\n\nRequest and Response\nPlumber provides access to special req and res objects that can be passed to Plumber functions. These objects provide access to the request submitted by the client and the response that will be sent to the client. Each object has several components, the most helpful of which are outlined below:\nRequest Objects\n\nTable of request object names, examples, and descriptions\n\n\n\n\n\n\n\nName\nExample\nDescription\n\n\n\n\nreq$pr\nplumber::pr()\nThe Plumber router processing the request\n\n\nreq$body\nlist(a = 1)\nTypically the same as argsBody\n\n\nreq$argsBody\nlist(a = 1)\nThe parsed body output\n\n\nreq$argsPath\nlist(c = 3)\nThe values of the path arguments\n\n\nreq$argsQuery\nlist(e = 5)\nThe parsed output from req$QUERY_STRING\n\n\nreq$cookies\nlist(cook = \"a\")\nA list of cookies\n\n\nreq$REQUEST_METHOD\n\"GET\"\nThe method used for the HTTP request\n\n\nreq$PATH_INFO\n\"/\"\nThe path of the incoming HTTP request\n\n\nreq$HTTP_*\n\"HTTP_USER_AGENT\"\nAll of the HTTP headers sent with the request\n\n\nreq$bodyRaw\ncharToRaw(\"a = 1\")\nThe raw() contents of the request body\n\n\n\nResponse Objects\n\nTable of response object names, examples, and descriptions\n\n\n\n\n\n\n\nName\nExample\nDescription\n\n\n\n\nres$headers\nlist(header = \"abc\")\nHTTP headers to include in the response\n\n\nres$setHeader()\nsetHeader(\"foo\", \"bar\")\nSets an HTTP header\n\n\nres$setCookie()\nsetCookie(\"foo\", \"bar\")\nSets an HTTP cookie on the client\n\n\nres$removeCookie()\nremoveCookie(\"foo\")\nRemoves an HTTP cooki4\n\n\nres$body\n\"{\\\"a\\\":[1]}\"\nSerialized output\n\n\nres$status\n200\nThe response HTTP status code\n\n\nres$toResponse()\ntoResponse()\nA list of status, headers, and body\n\n\n\n\n\nAsync Plumber\nPlumber supports asynchronous execution via the future R package. This pattern allows Plumber to concurrently process multiple requests.\n\nlibrary(plumber)\n\n# Set the execution plan\nfuture::plan(\"multisession\")\n\n#* @get /slow\nfunction() {\n  promises::future_promise({\n    slow_calc() # Slow calculation\n  })\n}\n\n\n\nMounting Routers\nPlumber routers can be combined by mounting routers into other routers. This can be beneficial when building routers that involve several different endpoints and you want to break each component out into a separate router. These separate routers can even be separate files loaded using plumb().\n\nlibrary(plumber)\n\n# Create an initial router\nroute &lt;- pr() |&gt;\n  pr_get(\"/foo\", function() \"foo\")\n\n#* @plumber\nfunction(pr) {\n  pr |&gt;\n    pr_mount(\"/bar\", route)\n}\n\nIn the above example, the final route is /bar/foo.\n\n\nRunning Examples\nSome packages, like the Plumber package itself, may include example Plumber APIs. Available APIs can be viewed using available_apis(). These example APIs can be run with plumb_api() combined with pr_run().\n\nlibrary(plumber)\n\nplumb_api(package = \"plumber\", # package name\n          name = \"01-append\", # API name\n          edit = TRUE) |&gt; # optionally open the file for editing\n  pr_run() # run the example API"
  },
  {
    "objectID": "html/plumber.html#deploying-plumber-apis",
    "href": "html/plumber.html#deploying-plumber-apis",
    "title": "REST APIs with plumber :: Cheatsheet",
    "section": "Deploying Plumber APIs",
    "text": "Deploying Plumber APIs\nOnce Plumber APIs have been developed, they often need to be deployed somewhere to be useful. Plumber APIs can be deployed in a variety of different ways. One of the easiest way to deploy Plumber APIs is using Posit Connect, which supports push button publishing from the RStudio IDE.\n\nCC BY SA Posit Software, PBC • info@posit.co • posit.co\nLearn more at rplumber.io.\nUpdated: 2024-05.\n\npackageVersion(\"plumber\")\n\n[1] '1.2.2'"
  },
  {
    "objectID": "html/purrr.html",
    "href": "html/purrr.html",
    "title": "Apply functions with purrr :: Cheatsheet",
    "section": "",
    "text": "Download PDF\n\n  \n\nTranslations (PDF)\n\n\nKorean\nPortuguese\nRussian\nSpanish\nUkrainian\nVietnamese\npurrr enhances R’s functional programming (FP) toolkit by providing a complete and consistent set of tools for working with functions and vectors. If you’ve never heard of FP before, the best place to start is the family of map() functions which allow you to replace many for loops with code that is both more succinct and easier to read. The best place to learn about the map() functions is the iterationchapter in R for Data Science.\nlibrary(purrr)"
  },
  {
    "objectID": "html/purrr.html#map-functions",
    "href": "html/purrr.html#map-functions",
    "title": "Apply functions with purrr :: Cheatsheet",
    "section": "Map Functions",
    "text": "Map Functions\n\nx &lt;- list(a = 1:10, b = 11:20, c = 21:30)\ny &lt;- list(1, 2, 3)\nz &lt;- list(4, 5, 6)\nl1 &lt;- list(x = c(\"a\", \"b\"), y = c(\"c\", \"d\"))\nl2 &lt;- list(x = \"a\", y = \"z\")\n\n\nmap(.x, .f, ...): Apply a function to each element of a list of vector, and return a list.\n\nmap(l1, sort, decreasing = TRUE)\n\nmap2(.x, .y, .f, ...): Apply a function pairs of elements from two lists or vectors, return a list.\n\nmap2(x, y, \\(x, y) x*y)\n\nimap(.x, .f, ...) is shorthand for map2(.x, names(.x), .f) or map2(.x, seq_along(.x), .f) depending on whether .x is named or not.\npmap(.l, .f, ...): Apply a function to groups of elements from a list of lists or vectors, return a list.\n\npmap(list(x, y, z), function(first, second, third) first * (second + third))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOne list\nTwo lists\nMany lists\n\n\n\n\nLogical\nReturns a logical vector.\nmap_lgl(x, is.integer)\nmap2_lgl(l2, l1, `%in%`)\npmap_lgl(list(l2, l1), `%in%`)\n\n\nInteger\nReturns an integer vector.\nmap_int(x, length)\nmap2_int(y, z, `+`)\npmap_int(list(y, z), `+`)\n\n\nDouble\nReturns a double vector.\nmap_dbl(x, mean)\nmap2_dbl(y, z, ~ .x / .y)\npmap_dbl(list(y, z), ~ .x / .y)\n\n\nCharacter\nReturns a character vector.\nmap_chr(l1, paste, collapse = \"\")\nmap2_chr(l1, l2, paste, collapse = \",\", sep = \":\")\npmap_chr(list(l1, l2), paste, collapse = \",\", sep = \":\")\n\n\nVector\nReturns a vector that is of the simplest common type.\nmap_vec(l1, paste, collapse = \"\")\nmap2_vec(l1, l2, paste, collapse = \",\", sep = \":\")\npmap_chr(list(l1, l2), paste, collapse = \",\", sep = \":\")\n\n\nNo output\nCalls .f for its side-effect.\nwalk(x, print)\nwalk2(objs, paths, save)\npwalk(list(objs, paths), save)\n\n\n\n\nFunction Shortcuts\n\nUse \\(x) with functions like map() that have single arguments. map(l, \\(x) x + 2) becomes map(l, function(x) x + 2).\nUse \\(x, y) with functions like map2() that have two arguments. map2(l, p, \\(x, y) x + y) becomes map2(l, p, function(l, p) l + p).\nUse \\(x, y, z) etc. with functions like pmap() that have many arguments. pmap(list(x, y, z), ⁠\\(x, y, z) x + y / z) becomes pmap(list(x, y, z), function(x, y, z) x * (y + z)).\nUse \\(x, y) with functions like imap(). x will get the list value and y with get the index, or name if available. imap(list(\"a\", \"b\", \"c\"), \\(x, y) paste0(y, \": \", x)) outputs index: value for each item.\nUse a string or integer with any map function to index list elements by name or position. map(l, \"name\") becomes map(l, function(x) x[[\"name\"]]).\n\n\n\nModify\n\nmodify(.x, .f, ...): Apply a function to each element. Also modify2() and imodify().\n\nmodify(x, ~ . + 2)\n\nmodify_at(.x, .at, .f, ...): Apply a function to selected elements. Also map_at().\n\nmodify_at(x, \"b\", ~ . + 2)\n\nmodify_if(.x, .p, .f, ...): Apply a function to elements that pass a test. Also map_if().\n\nmodify_if(x, is.numeric, ~ . + 2)\n\nmodify_depth(.x, .depth, .f, ...): Apply function to each element at a given level of a list. Also map_depth().\n\nmodify_depth(x, 1, ~ . + 2)\n\n\n\n\nReduce\n\nreduce(.x, .f, ..., .init, .dir = c(\"forward\", \"backward\")): Apply function recursively to each element of a list of vector. Also reduce2().\n\na &lt;- list(1, 2, 3, 4)\nreduce(a, sum)\n\naccumulate(.x, .f, ..., .init): Reduce a list, but also return intermediate results in a list. Also accumulate2().\n\na &lt;- list(1, 2, 3, 4)\naccumulate(a, sum)"
  },
  {
    "objectID": "html/purrr.html#vectors",
    "href": "html/purrr.html#vectors",
    "title": "Apply functions with purrr :: Cheatsheet",
    "section": "Vectors",
    "text": "Vectors\n\ncompact(.x, .p = identity): Discard empty elements.\n\ncompact(x)\n\nkeep_at(): Keep/discard elements based by name or position.\n\nkeep_at(x, \"a\")\nkeep_at(x, 2)\n\nset_names(x, nm = x): Set the names of a vector/list directly or with a function.\n\nset_names(x, c(\"p\", \"q\", \"r\"))\nset_names(x, tolower)\n\n\n\nPredicate functions\nA predicate function returns a single TRUE or FALSE and purrr provides\n\nkeep(.x, .p, ...) retains elements where the predicate is TRUE; discard(.x, .p, ...) drops elements where the predicate is TRUE.\n\nkeep(x, is.numeric)\ndiscard(x, is.numeric)\n\nhead_while(.x, .p, ...) keeps the first elements until one fails the predicate. Also tail_while().\n\nhead_while(x, is.character)\n\ndetect(.x, .f, ..., dir = c(\"forward\", \"backward\"), .right = NULL): Find first element to pass.\n\ndetect(x, is.character)\n\ndetect_index(.x, .f, ..., dir = c(\"forward\", \"backward\"), .right = NULL): Find index of first element to pass.\n\ndetect_index(x, is.character)\n\nevery(.x, .p, ...): Do all elements pass a test?\n\nevery(x, is.character)\n\nsome(.x, .p, ...): Do some elements pass a test?\n\nsome(x, is.character)\n\nnone(.x, .p, ...): Do no elements pass a test?\n\nnone(x, is.character)\n\nhas_element(.x, .y): Does a list contain an element?\n\nhas_element(x, \"foo\")\n\n\n\n\nPluck\n\npluck(.x, ..., .deault = NULL): Select an element by name or index. Also attr_getter() and chuck().\n\npluck(x, \"b\")\nx |&gt; pluck(\"b\")\n\nassign_in(x, where, value): Assign a value to a location using pluck selection.\n\nassign_in(x, \"b\", 5)\nx |&gt; assign_in(\"b\", 5)\n\nmodify_in(.x, .where,, .f): Apply a function to a value at a selected location.\n\nmodify_in(x, \"b\", abs)\n\n\n\n\nReshape\n\nlist_flatten(x): Remove a level of indexes from a list.\n\nlist_flatten(x)\n\nlist_transpose(x): Transposes the index order in a multi-level list.\n\nlist_transpose(x)\n\n\n\n\nConcatenate\n\nx1 &lt;- list(a = 1, b = 2, c = 3)\nx2 &lt;- list(\n  a = data.frame(x = 1:2),\n  b = data.frame(y = \"a\")\n)\n\n\nlist_c(): Combines elements into a vector by concatenating them together.\n\nlist_c(x1)\n\nlist_rbind(): Combines elements into a data frame by row-binding them together.\n\nlist_rbind(x2)\n\nlist_cbind(): Combines elements into a data frame by column-binding them together.\n\nlist_cbind(x2)\n\n\n\n\nList-Columns\nList-columns are columns of a data frame where each element is a list or vector instead of an atomic value. Columns can also be lists of data frames. See tidyr for more about nested data and list columns.\n\nWork With List-Columns\nManipulate list-columns like any other kind of column, using dplyr functions like mutate() and transmute(). Because each element is a list, use map functions within a column function to manipulate each element.\n\nmap(), map2(), or pmap() return lists and will create new list-columns. In this example, transmute() is a column function, map2() is a list function which returns a list, and vehicles and starships are list-columns.\n\ndplyr::starwars |&gt;\n  dplyr::mutate(ships = map2(vehicles, starships, append))\n\nSuffixed map functions like map_int() return an atomic data type and will simplify list-columns into regular columns. In this example, mutate() is a column function, map_int() is a list function which returns a column vector, and films is a list column.\n\ndplyr::starwars |&gt;\n  dplyr::mutate(n_films = map_int(films, length))\n\n\n\nCC BY SA Posit Software, PBC • info@posit.co • posit.co\nLearn more at purrr.tidyverse.org.\nUpdated: 2024-05.\n\npackageVersion(\"purrr\")\n\n[1] '1.0.2'"
  },
  {
    "objectID": "html/reticulate.html",
    "href": "html/reticulate.html",
    "title": "Use Python with R with reticulate :: Cheatsheet",
    "section": "",
    "text": "Download PDF\n\n  \n\nTranslations (PDF)\n\n\nSpanish\nThe reticulate package lets you use Python and R together seamlessly in R code, in R Markdown documents, and in the RStudio IDE.\nlibrary(reticulate)"
  },
  {
    "objectID": "html/reticulate.html#python-in-r-markdown",
    "href": "html/reticulate.html#python-in-r-markdown",
    "title": "Use Python with R with reticulate :: Cheatsheet",
    "section": "Python in R Markdown",
    "text": "Python in R Markdown\n(Optional) Build Python env to use.\nknitr versions &gt;= 1.18 will automatically use the reticulate engine for Python chunks. See ?reticulate::eng_python for a listing of supported knitr chunk options.\n```{{r}}\n#| label: setup\n#| include: false\n\nlibrary(reticulate) \nvirtualenv_create(\"fmri-proj\") \npy_install(\"seaborn\", envname = \"fmri-proj\") \nuse_virtualenv(\"fmri-proj\")`\n```\nBegin Python chunks with ```{python}. Chunk options like echo, include, etc. all work as expected.\n```{{python}}\n#| echo: false\n\nimport seaborn as sns \nfmri = sns.load_dataset(\"fmri\")`\n```\nUse the py object the access objects created in Python chunks from R chunks.\n``` {{r}}\nf1 &lt;- subset(py$fmri, region = \"parietal\")\n```\nPython chunks all execute within a single Python session so you have access to all objects created in previous chunks.\nUse the r object to access objects created in R chunks from Python chunks.\n``` {{python}}\nimport matplotlib as mpl\nsns.lmplot(\"timepoint\", \"signal\", data=r.f1)\nmpl.pyplot.show()\n```"
  },
  {
    "objectID": "html/reticulate.html#python-in-r",
    "href": "html/reticulate.html#python-in-r",
    "title": "Use Python with R with reticulate :: Cheatsheet",
    "section": "Python in R",
    "text": "Python in R\npython.r Example:\n\nlibrary(reticulate)\npy_install(\"seaborn\")\nuse_virtualenv(\"r-reticulate\")\n\nsns &lt;- import(\"seaborn\")\n\nfmri &lt;- sns$load_dataset(\"fmri\")\ndim(fmri)\n\n# creates tips\nsource_python(\"python.py\")\ndim(tips)\n\n# creates tips in main\npy_run_file(\"python.py\")\ndim(py$tips)\n\npy_run_string(\"print(tips.shape)\")\n\npython.py Example:\nimport seaborn as sns\ntips = sns.load_dataset(\"tips\")\nCall Python from R code in three ways:\n\nImport Python Modules\nUse import() to import any Python module. Access the attributes of a module with $.\n\nlibrary(reticulate)\npy_install(\"seaborn\")\nuse_virtualenv(\"r-reticulate\")\n\nsns &lt;- import(\"seaborn\")\n\ntips &lt;- sns$load_dataset(\"tips\")\ndim(tips)\n\n\nimport(module, as = NULL, convert = TRUE, delay_load = FALSE): Import a Python module. If convert = TRUE, Python objects are converted to their equivalent R types. Also import_from_path().\n\nimport(\"pandas\")\n\nimport_main(convert = TRUE): Import the main module, where Python executes code by default.\n\nimport_main()\n\nimport_builtings(convert = TRUE): Import Python’s built-in functions.\n\nimport_builtins()\n\n\n\n\nSource Python Files\nUse source_python() to source a Python script and make the Python functions and objects it creates available in the calling R environment.\n\nsource_python(\"python.py\")\ndim(py$tips)\n\n\nsource_python(file, envir = parent.frame(), convert = TRUE): Run a Python script, assigning objects to a specified R environment.\n\nsource_python(\"python.py\")\n\n\n\n\nRun Python Code\nExecute Python code into the main Python modules with py_run_file() or py_run_string().\n\npy_run_file(\"python.py\")\ndim(py$tips)\n\npy_run_string(\"print(tips.shape)\")\n\n\npy_run_string(code, local = FALSE, convert = TRUE): Run Python code (passed as a string) in the main module.\n\npy_run_string(\"x = 10\")\npy$x\n\npy_run_file(file, local = FALSE, convert = TRUE): Run Python file in the main module.\n\npy_run_file(\"python.py\")\n\npy_eval(code, convert = TRUE): Run a Python expression, return the result. Also py_call().\n\npy_eval(\"1 + 1\")\n\n\nAccess the results, and anything else in Python’s main module, with py.\n\npy: An R object that contains the Python main module and the results stored there.\n\npy$x"
  },
  {
    "objectID": "html/reticulate.html#object-conversion",
    "href": "html/reticulate.html#object-conversion",
    "title": "Use Python with R with reticulate :: Cheatsheet",
    "section": "Object Conversion",
    "text": "Object Conversion\nTip: To index Python objects begin at 0, use integers, e.g. OL\nReticulate provides automatic built-in conversion between Python and R for many Python types.\n\nTable of data types in R and their Python equivalents.\n\n\nR\nPython\n\n\n\n\nSingle-element vector\nScalar\n\n\nMulti-element vector\nList\n\n\nList of multiple types\nTuple\n\n\nNamed List\nDict\n\n\nMatrix/Array\nNumPy ndarray\n\n\nData Frame\nPandas DataFrame\n\n\nFunction\nPython function\n\n\nNULL, TRUE, FALSE\nNone, True, False\n\n\n\nOr, if you like, you can convert manually with\n\npy_to_r(x): Convert a Python object to an R object. Also r_to_py().\n\npy_to_r(py)\n\ntuple(..., convert = FALSE): Create a Python tuple.\n\ntuple(\"a\", \"b\", \"c\")\n\ndict(..., convert = FALSE): Create a Python dictionary object. Also py_dict() to make a dictionary that uses Python objects as keys.\n\ndict(foo = \"bar\", index = 42L)\n\nnp_array(data, dtype = NULL, order = \"C\"): Create NumPy arrays.\n\nnp_array(c(1:8), dtype = \"float16\")\n\narray_reshape(x, dim, order = c(\"C\", \"F\")): Reshape a Python array.\n\nx &lt;- 1:4\narray_reshape(x, c(2,2))\n\npy_func(f): Wrap an R function in a Python function with the same signature.\n\npy_func(xor)\n\npy_main_thread_func(f): Create a function that will always be called on the main thread.\niterate(it, f = base::identity, simplify = TRUE): Apply an R function to each value of a Python iterator or return the values as an R vector, draining the iterator as you go. Also iter_next() and as_iterator().\n\niterate(iter, print)\n\npy_interator(fn, completed = NULL): Create a Python iterator from an R function.\n\nseq_gen &lt;- function(x) {\n  n &lt;- x;\n  function() {\n    n &lt;&lt;- n + 1;\n    n\n  }\n}\npy_iterator(seq_gen(9))"
  },
  {
    "objectID": "html/reticulate.html#helpers",
    "href": "html/reticulate.html#helpers",
    "title": "Use Python with R with reticulate :: Cheatsheet",
    "section": "Helpers",
    "text": "Helpers\n\npy_capture_output(expr, type = c(\"stdout\", \"stderr\")): Capture and return Python output. Also py_supress_warnings().\n\npy_capture_output(\"x\")\n\npy_get_attr(x, name, silent = FALSE): Get an attribute of a Python object. Also py_set_attr(), py_has_attr(), and py_list_attributes().\n\npy_get_attr(x)\n\n\n\n\npy_help(object): Open the documentation page for a Python object.\n\npy_help(sns)\n\npy_last_error(): Get the last Python error encountered. Also py_clear_last_error() to clear the last error.\n\npy_last_error()\n\npy_save_object(object, filename, pickle = \"pickle\", ...): Save and load Python objects with pickle. Also py_load_object().\n\npy_save_objects(x, \"x.pickle\")\n\nwith(data, expr, as = NULL, ...): Evaluate an expression within a Python context manager.\n\npy &lt;- import_builtins()\nwith(py$open(\"output.txt\", \"w\") %as% file,\n     {file$write(\"Hello, there!\")})"
  },
  {
    "objectID": "html/reticulate.html#python-in-the-ide",
    "href": "html/reticulate.html#python-in-the-ide",
    "title": "Use Python with R with reticulate :: Cheatsheet",
    "section": "Python in the IDE",
    "text": "Python in the IDE\nRequires reticulate plus RStudio v1.2+. Some features require v1.4+.\n\n\n\n\n\n\n\nExpand to read about reticulate features in the RStudio IDE\n\n\n\n\n\nreticulate features in the RStudio IDE\n\nSyntax highlighting for Python scripts and chunks.\nTab completion for Python functions and objects (and Python modules imported in R scripts).\nSource Python scripts.\nExecute Python code line by line with Cmd + Enter (Ctrl + Enter).\nView Python objects in the Environment Pane.\nView Python objects in the Data Viewer.\nA Python REPL opens in the console when you run Python code with a keyboard shortcut. Type exit to close.\nmatplotlib plots display in plots pane.\nPress F1 over a Python symbol to display the help topic for that symbol."
  },
  {
    "objectID": "html/reticulate.html#python-repl",
    "href": "html/reticulate.html#python-repl",
    "title": "Use Python with R with reticulate :: Cheatsheet",
    "section": "Python REPL",
    "text": "Python REPL\nRStudio IDE Window:\nA REPL (Read, Eval, Print Loop) is a command line where you can run Python code and view the results.\n\nOpen in the console with repl_python(), or by running code in a Python script with Cmd + Enter (Ctrl + Enter).\n\nrepl_python(module = NULL, quiet = getOption(\"reticulate.repl.quiet\", default = FALSE), input = NULL): Launch a Python REPL. Run exit to close.\n\nrepl_python()\n\n\nType commands at &gt;&gt;&gt; prompt.\nPress Enter to run code.\nType exit to close and return to R console.\n&gt; reticulate::repl_python()\nPython 3.9.16 (/Users/mine/.virtualenvs/r-reticulate/bin/python)\nReticulate 1.28 REPL -- A Python interpreter in R.\nEnter 'exit' or 'quit' to exit the REPL and return to R.\n&gt;&gt;&gt; import seaborn as sns\n&gt;&gt;&gt; tips = sns.load_dataset(\"tips\")\n&gt;&gt;&gt; tips.shape\n(244, 7)\n&gt;&gt;&gt; exit\n&gt;"
  },
  {
    "objectID": "html/reticulate.html#configure-python",
    "href": "html/reticulate.html#configure-python",
    "title": "Use Python with R with reticulate :: Cheatsheet",
    "section": "Configure Python",
    "text": "Configure Python\nReticulate binds to a local instance of Python when you first call import() directly or implicitly from an R session. To control the process, find or build your desired Python instance. Then suggest your instance to reticulate. Restart R to unbind.\n\nFind Python\n\ninstall_python(version, list = FALSE, force = FALSE): Download and install Python.\n\ninstall_python(\"3.9.16\")\n\npy_available(initialize = FALSE): Check if Python is available on your system. Also py_module_available() and py_numpy_module().\n\npy_available()\n\npy_discover_config(): Return the detected installation of Python. Use py_config() to check which version has been loaded.\n\npy_config()\n\nvirtualenv_list(): List all available virtual environments. Also virtualenv_root().\n\nvirtualenv_list()\n\nconda_list(conda = \"auto\"): List all available conda envs. Also conda_binary() and conda_version().\n\nconda_list()\n\n\n\n\nCreate a Python env\n\nvirtualenv_create(envname = NULL, ...): Create a new virtual environment.\n\nvirtualenv_create(\"r-pandas\")\n\nconda_create(envname = NULL, ...): Create a new conda environment.\n\nconda_create(\"r-pandas\", packages = \"pandas\")\n\n\n\n\nInstall Packages\nInstall Python packages with R (below) or the shell:\npip install SciPy\nconda install SciPy\n\npy_install(packages, envname, ...): Install Python packages into a Python env.\n\npy_install(\"pandas\")\n\nvirtualenv_install(envname, packages, ...): Install a package within a virtual environment. Also virtualenv_remove().\n\nvirtualenv_install(\"r-pandas\", packages = \"pandas\")\n\nconda_installs(envname, packages, ...): Install a package within a conda environment. Also conda_remove().\n\nconda_install(\"r-pandas\", packages = \"plotly\")\n\n\n\n\nSuggest an env to use\nSet a default Python interpreter in the RStudio IDE Global or Project Options. Go to Tools &gt; Global Options … &gt; Python for Global Options. Within a project, go to Tools &gt; Project Options… &gt; Python.\nOtherwise, to choose an instance of Python to bind to, reticulate scans the instances on your computer in the following order, stopping at the first instance that contains the module called by import().\n\nThe instance referenced by the environment variable RETICULATE_PYTHON (if specified). Tip: set in .Renviron file.\n\nSys.setenv(RETICULATE_PYTHON = PATH): Set default Python binary. Persists across sessions! Undo with Sys.unsetenv().\n\nSys.setenv(RETICULATE_PYTHON = \"/usr/local/bin/python\")\n\n\nThe instances referenced by use_ functions if called before import().\n\nuse_python(python): Path to a Python binary.\n\nuse_python(\"usr/local/bin/python\")\n\nuse_virtualenv(virtualenv): Path to or name of a Python virtualenv.\n\nuse_virtualenv(\"~/myenv\")\n#| eval: false\nuse_virtualenv(\"~/myenv\") # path to venv\nuse_virtualenv(\"r-keras\") # name of venv\n\n\nA virtual env found in the current working directory: “./.venv”\nEnvironments that are named after the imported module. e.g. “~/.virtualenvs/r-scipy/” for import(\"scipy\")\nThe package default virtualenv, “r-reticulate”.\nAt the location of the Python binary discovered on the system PATH (i.e. Sys.which(\"python\"))\n\n\nCC BY SA Posit Software, PBC • info@posit.co • posit.co\nLearn more at rstudio.github.io/reticulate.\nUpdated: 2024-06.\n\npackageVersion(\"reticulate\")\n\n[1] '1.37.0'"
  },
  {
    "objectID": "html/rstudio-ide.html",
    "href": "html/rstudio-ide.html",
    "title": "RStudio IDE :: Cheatsheet",
    "section": "",
    "text": "Download PDF\n\n  \n\nTranslations (PDF)\n\n\nFrench\nGreek\nItalian\nJapanese\nPortuguese\nSpanish\nVietnamese"
  },
  {
    "objectID": "html/rstudio-ide.html#documents-and-apps",
    "href": "html/rstudio-ide.html#documents-and-apps",
    "title": "RStudio IDE :: Cheatsheet",
    "section": "Documents and Apps",
    "text": "Documents and Apps\nOpen Shiny, Quarto, R Markdown, knitr, Sweave, LaTeX, .Rd files and more in Source Pane.\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the features in the RStudio Source Pane\n\n\n\n\n\nFeatures within the RStudio Source Pane\n\nCheck spelling\nRender output\nChoose output format\nConfigure render options\nInsert code chunk\nPublish to server\nJump to previous chunk\nJump to next chunk\nRun code\nShow file outline\nVisual Editor (reverse side)\nJump to section or chunk\nRun this and all previous code chunks\nRun this code chunk\nSet knitr chunk options\n\n\n\n\nAccess markdown guide at Help &gt; Markdown Quick Reference.\nSee below for more on Visual Editor."
  },
  {
    "objectID": "html/rstudio-ide.html#source-editor",
    "href": "html/rstudio-ide.html#source-editor",
    "title": "RStudio IDE :: Cheatsheet",
    "section": "Source Editor",
    "text": "Source Editor\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the features in the Source Editor\n\n\n\n\n\nFeatures within the Source Editor\n\nNavigate backwards/forwards\nOpen in new window\nSave\nFind and replace\nCompile as notebook\nRun selected code\nRe-run previous code\nSource with or without Echo or as a Local Job\nShow file outline\nMultiple cursors/column selection with Alt + mouse drag.\nCode diagnostics that appear in the margin. Hover over diagnostic symbols for details.\nSyntax highlighting based on your file’s extension\nTab completion to finish function names, file paths, arguments, and more.\nMulti-language code snippets to quickly use common blocks of code.\nJump to function in file\nChange file type\nWorking Directory\nRun scripts in separate sessions\nMaximize, minimize panes\nCtrl/Cmd + ↑ to see history\nR Markdown Build Log\nDrag pane boundaries"
  },
  {
    "objectID": "html/rstudio-ide.html#tab-panes",
    "href": "html/rstudio-ide.html#tab-panes",
    "title": "RStudio IDE :: Cheatsheet",
    "section": "Tab Panes",
    "text": "Tab Panes\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the features in the Tab Panes\n\n\n\n\n\nFeatures within the Tab Panes\n\nImport data with wizard\nHistory of past commands to run/copy\nManage external databases\nView memory usage\nR tutorials\nLoad workspace\nSave workspace\nClear R workspace\nSearch inside environment\nChoose environment to display from list of parent environments\nDisplay objects as list or grid\nDisplays saved objects by type with short description\nView in data viewer\nView function source code\nCreate folder\nPath to displayed directory\nDelete file\nRename file\nMore file options\nChange directory\nA File browser keyed to your working directory. Click on file or directory name to open."
  },
  {
    "objectID": "html/rstudio-ide.html#version-control",
    "href": "html/rstudio-ide.html#version-control",
    "title": "RStudio IDE :: Cheatsheet",
    "section": "Version Control",
    "text": "Version Control\nTurn on at Tools &gt; Project Options &gt; Git/SVN\n\n\nA - Added\n\n\nD - Deleted\n\n\nM - Modified\n\n\nR - Renamed\n\n\n? - Untracked\n\n\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the features in the version control view\n\n\n\n\n\nFeatures within the version control view\n\nStage files\nCommit staged files\nPush/Pull to remote\nView History\nCurrent branch\nShow file diff to view file differences"
  },
  {
    "objectID": "html/rstudio-ide.html#package-development",
    "href": "html/rstudio-ide.html#package-development",
    "title": "RStudio IDE :: Cheatsheet",
    "section": "Package Development",
    "text": "Package Development\nCreate a new package with File &gt; New Project &gt; New Directory &gt; R Package\nEnable roxygen documentation with Tools &gt; Project Options &gt; Build Tools\nRoxygen guide at Help &gt; Roxygen Quick Reference\nSee package information in the Build Tab\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the features in the Build Tab\n\n\n\n\n\nFeatures within the Build Tab\n\nInstall package and restart R\nRun devtools::load_all() and reload changes\nRun R CMD check\nClear output and rebuild\nCustomize package build options\nRun package tests\n\n\n\n\nRStudio opens plots in a dedicated Plots pane\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the features in the Plots\n\n\n\n\n\nFeatures within the Plots pane\n\nNavigate recent plots\nOpen in window\nExport plot\nDelete plot\nDelete all plots\n\n\n\n\nGUI Package manager lists every installed package\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the features in the Package manager\n\n\n\n\n\nFeatures within the Package manager\n\nInstall Packages\nUpdate Packages\nBrowse package site\nClick to load package with library(). Unclick to detach package with detach().\nPackage version installed\nDelete from library\n\n\n\n\nRStudio opens documentation in a dedicated Help pane\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the features in the Help pane\n\n\n\n\n\nFeatures within the Help pane\n\nHome page of helpful links\nSearch within help file\nSearch for help file\n\n\n\n\nViewer pane displays HTML content, such as Shiny apps, R Markdown reports, and interactive visualizations\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the features in the Viewer pane\n\n\n\n\n\nFeatures within the Viewer pane\n\nStop Shiny apps\nPublish to shinyapps.io, Posit Connect, Posit Cloud, …\nRefresh\n\n\n\n\nView(&lt;data&gt;) opens spreadsheet like view of data set\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the features in the data set spreadsheet\n\n\n\n\n\nFeatures within the data set spreadsheet\n\nFilter rows by value or value range\nSort by values\nSearch for value"
  },
  {
    "objectID": "html/rstudio-ide.html#debug-mode",
    "href": "html/rstudio-ide.html#debug-mode",
    "title": "RStudio IDE :: Cheatsheet",
    "section": "Debug Mode",
    "text": "Debug Mode\nUse debug(), browser(), or a breakpoint and execute your code to open the debugger mode.\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the features in the debug console\n\n\n\n\n\nFeatures within the debug console\n\nLaunch debugger mode from origin of error\nOpen traceback to examine the functions that R called before the error occurred\nClick next to line number to add/remove a breakpoint.\nHighlighted line shows where execution has paused\nRun commands in environment where execution has paused\nExamine variables in executing environment\nSelect function in traceback to debug\nStep through code one line at a time\nStep into and out of functions to run\nResume execution\nQuit debug mode"
  },
  {
    "objectID": "html/rstudio-ide.html#keyboard-shortcuts",
    "href": "html/rstudio-ide.html#keyboard-shortcuts",
    "title": "RStudio IDE :: Cheatsheet",
    "section": "Keyboard Shortcuts",
    "text": "Keyboard Shortcuts\nView the Keyboard Shortcut Quick Reference with Tools &gt; Keyboard Shortcuts or Alt/Option + Shift + K\n\n\n\n\n\nSearch for keyboard shortcuts with Tools &gt; Show Command Palette or Ctrl/Cmd + Shift + P."
  },
  {
    "objectID": "html/rstudio-ide.html#visual-editor",
    "href": "html/rstudio-ide.html#visual-editor",
    "title": "RStudio IDE :: Cheatsheet",
    "section": "Visual Editor",
    "text": "Visual Editor\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the features in the Visual Editor\n\n\n\n\n\nFeatures within the Visual Editor\n\nCheck spelling\nRender output\nChoose output format\nChoose output location\nInsert code chunk\nJump to previous chunk\nJump to next chunk\nRun selected lines\nPublish to server\nShow file outline\nBlock format\nBack to Source Editor (front page)\nInsert verbatim code\nClear formatting\nLists and block quotes\nLinks\nCitations\nImages\nMore formatting\nInsert blocks, citations, equations, and special characters\nInsert and edit tables\nFile outline\nAdd/Edit attributes\nJump to chunk or header\nSet knitr chunk options\nRun this and all previous code chunks\nRun this code chunk"
  },
  {
    "objectID": "html/rstudio-ide.html#posit-workbench",
    "href": "html/rstudio-ide.html#posit-workbench",
    "title": "RStudio IDE :: Cheatsheet",
    "section": "Posit Workbench",
    "text": "Posit Workbench\n\nWhy Posit Workbench?\nExtend the open source server with a commercial license, support, and more:\n\nopen and run multiple R sessions at once\ntune your resources to improve performance\nadministrative tools for managing user sessions\ncollaborate real-time with others in shared projects\nswitch easily from one version of R to a different version\nintegrate with your authentication, authorization, and audit practices\nwork in the RStudio IDE, JupyterLab, Jupyter Notebooks, or VS Code\n\nDownload a free 45 day evaluation."
  },
  {
    "objectID": "html/rstudio-ide.html#share-projects",
    "href": "html/rstudio-ide.html#share-projects",
    "title": "RStudio IDE :: Cheatsheet",
    "section": "Share Projects",
    "text": "Share Projects\nFile &gt; New Project\nRStudio saves the call history, workspace, and working directory associated with a project. It reloads each when you re-open a project.\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the features in the Share Project\n\n\n\n\n\nFeatures within the Share Project\n\nStart new R Session in current project\nClose R Session in project\nActive shared collaborators\nName of current project\nShare Project with Collaborators\nSelect R Version"
  },
  {
    "objectID": "html/rstudio-ide.html#run-remote-jobs",
    "href": "html/rstudio-ide.html#run-remote-jobs",
    "title": "RStudio IDE :: Cheatsheet",
    "section": "Run Remote Jobs",
    "text": "Run Remote Jobs\nRun R on remote clusters (Kubernetes/Slurm) via the Job Launcher\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the features in the Job Launcher\n\n\n\n\n\nFeatures within the Job Launcher\n\nLaunch a job\nMonitor launcher jobs\nRun launcher jobs remotely\n\n\n\n\n\nCC BY SA Posit Software, PBC • info@posit.co • posit.co\nLearn more at docs.posit.co/ide/user.\nUpdated: 2024-05.\nRStudio IDE 2024.04.1+748."
  },
  {
    "objectID": "html/shiny.html",
    "href": "html/shiny.html",
    "title": "Shiny for R :: Cheatsheet",
    "section": "",
    "text": "Download PDF\n\n  \n\nTranslations (PDF)\n\n\nFrench\nGerman\nSpanish\nSpanish\nTurkish\nVietnamese"
  },
  {
    "objectID": "html/shiny.html#building-an-app",
    "href": "html/shiny.html#building-an-app",
    "title": "Shiny for R :: Cheatsheet",
    "section": "Building an App",
    "text": "Building an App\nA Shiny app is a web page (ui) connected to a computer running a live R session (server).\n\nlibrary(shiny)\n\nUsers can manipulate the UI, which will cause the server to update the UI’s display (by running R code).\nSave your template as app.R. Keep your app in a directory along with optional extra files.\n\napp-name: The directory name is the app name\napp.R\nDESCRIPTION and README: (optional) used in showcase mode\nR/: (optional) directory of supplemental .R files that are sourced automatically, must be named R\nwww/: (optional) directory of files to share with web browsers (images, CSS, .js, etc.), must be named www\n\nLaunch apps stored in a directory with runApp(&lt;path to directory&gt;).\nTo generate the template, type shinyApp and press Tab in the RStudio IDE or go to File &gt; New Project &gt; New Directory &gt; Shiny Application.\n\n# app.R \nlibrary(shiny)\n\n#In ui nest R functions to build an HTML interface\nui &lt;- fluidPage(\n  numericInput(inputId = \"n\", \"Sample size\", value = 25),\n  plotOutput(outputId = \"hist\")\n)\n# Customize the UI with Layout Functions\n# Add Inputs with *Input() functions\n# Add Outputs with *Output() functions\n\n\n# Tell the server how to render outputs and respond to inputs with R\nserver &lt;- function(input, output, session) {\n  output$hist &lt;- renderPlot({\n    hist(rnorm(input$n))\n  })\n}\n# Wrap code in render*() functions before saving to output\n# Refer to UI inputs with input$&lt;id&gt; and outputs with output$&lt;id&gt;\n  \n# Call shinyApp() to combine ui and server into an interactive app!\nshinyApp(ui = ui, server = server)\n\nSee annotated examples of Shiny apps by running runExample(&lt;example name&gt;). Run runExample() with no arguments for a list of example names."
  },
  {
    "objectID": "html/shiny.html#share",
    "href": "html/shiny.html#share",
    "title": "Shiny for R :: Cheatsheet",
    "section": "Share",
    "text": "Share\nShare your app in three ways:\n\nHost it on shinyapps.io, a cloud based service from Posit. To deploy Shiny apps:\n\nCreate a free or professional account at shinyapps.io\nClick the Publish icon in RStudio IDE, or run: rsconnect::deployApp(\"&lt;path to directory&gt;\")\n\nPurchase Posit Connect, a publishing platform for R and Python. posit.co/products/enterprise/connect/\nBuild your own Shiny Server. posit.co/products/open-source/shinyserver/"
  },
  {
    "objectID": "html/shiny.html#outputs",
    "href": "html/shiny.html#outputs",
    "title": "Shiny for R :: Cheatsheet",
    "section": "Outputs",
    "text": "Outputs\nrender*() and *Output() functions work together to add R output to the UI.\n\nTable of render*() functions and their associated *Output() functions.\n\n\n\n\n\n\nrender*() Functions\n*Output() Functions\n\n\n\n\nDT::renderDataTable(expr, options, searchDelay, callback, escape, env, quoted, outputArgs)\ndataTableOutput(outputId)\n\n\nrenderImage(expr, env, quoted, deleteFile, outputArgs)\nimageOutput(outputId, width, height, click, dblclick, hover, brush, inline)\n\n\nrenderPlot(expr, width, height, res, …, alt, env, quoted, execOnResixe, outputArgs\nplotOutput(outputId, width, height, click, dblclick, hover, brush, inline)\n\n\nrenderPrint(expr, env, quoted, width, outputArgs)\nverbatimTextOutput(outputId, placeholder)\n\n\nrenderTable(expr, striped, hover, bordered, spacing, width, align, rownames, colnames, digits, na, …, env, quoted, outputArgs)\ntableOutput(outputId)\n\n\nrenderText(expr, env, quoted, outputArgs, sep)\ntextOutput(outputId, container, inline)\n\n\nrenderUI(expr, env, quoted, outputArgs)\nuiOutput(outputId, inline, container, …)\nhtmlOutput(outputId, inline, container, …)\n\n\n\nThese are the core output types. See htmlwidgets.org for many more options."
  },
  {
    "objectID": "html/shiny.html#inputs",
    "href": "html/shiny.html#inputs",
    "title": "Shiny for R :: Cheatsheet",
    "section": "Inputs",
    "text": "Inputs\nCollect values from the user.\nAccess the current value of an input object with input$&lt;inputId&gt;. Input values are reactive.\n\nactionButton(inputId, label, icon, width, ...)\nactionLink(inputId, label, icon, ...)\ncheckboxGroupInput(inputId, label, choices, selected, inline, width, choiceNames, choiceValues)\ncheckboxInput(inputId, label, value, width)\ndateInput(inputId, label, value, min, max, format, startview, weekstart, language, width, autoclose, datesdisabled, daysofweekdisabled)\ndateRangeInput(inputId, label, start, end, min, max, format, startview, weekstart, language, separator, width, autoclose)\nfileInput(inputId, label, multiple, accept, width, buttonLabel, placeholder)\nnumericInput(inputId, label, value, min, max, step, width)\npasswordInput(inputId, label, value, width, placeholder)\nradioButtons(inputId, label, choices, selected, inline, width, choiceNames, choiceValues)\nselectInput(inputId, label, choices, selected, multiple, selectize, width, size): Also selectizeInput()\nsliderInput(inputId, label, min, max, value, step, round, format, locale, ticks, animate, width, sep, pre, post, timeFormat, timezone, dragRange)\ntextInput(inputId, label, value, width, placeholder): Also textAreaInput()"
  },
  {
    "objectID": "html/shiny.html#reactivity",
    "href": "html/shiny.html#reactivity",
    "title": "Shiny for R :: Cheatsheet",
    "section": "Reactivity",
    "text": "Reactivity\nReactive values work together with reactive functions. Call a reactive value from within the arguments of one of these functions to avoid the error Operation not allowed without an active reactive context.\n\n\n\n\n\n\n\n\n\n\n\nExpand to read about the reactivity diagram\n\n\n\n\n\nPhases in the reactivity diagram\n\nCreate your own reactive values\n\nreactiveValues()\nreactiveFileReader()\nreactivePoll()\n*Input()\n\nPerform side effects\n\nobserveEvent()\nobserve()\n\nSchedule updates\n\ninvalidateLater()\n\nCreate reactive expressions\n\nreactive()\n\nRemove reactivity\n\nisolate()\n\nReact based on event\n\neventReactive()\n\nRender reactive output\n\nrender*()\n\n\n\n\n\n\nCreate Your own Reactive Values\n\n*Input() functions: Each input function creates a reactive value stored as input$&lt;inputId&gt;.\n\n# *Input() example\nui &lt;- fluidPage(\n  textInput(\"a\",\"\",\"A\")\n)\n\nreactiveVal(): Creates a single reactive values object.\nreactiveValues(...): Creates a list of reactive values whose values you can set.\n\n# reactiveVal example\nserver &lt;- function(input,output){\n  rv &lt;- reactiveValues() \n  rv$number &lt;- 5\n}\n\n\n\n\nCreate Reactive Expressions\n\nreactive(x, env, quoted, label, domain):\n\nReactive expressions:\n\ncache their value to reduce computation\ncan be called elsewhere\nnotify dependencies when invalidated\n\n\nCall the expression with function syntax, e.g. re().\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  textInput(\"a\",\"\",\"A\"), \n  textInput(\"z\",\"\",\"Z\"), \n  textOutput(\"b\")\n  )\n\nserver &lt;- function(input,output){\n  re &lt;- reactive({ \n    paste(input$a,input$z)\n  })\n  output$b &lt;- renderText({\n    re()\n  }) \n}\n\nshinyApp(ui, server)\n\n\n\n\nReact Based on Event\n\neventReactive(eventExpr, valueExpr, event.env, event.quoted, value.env, value.quoted, ..., label, domain, ignoreNULL, ignoreInit): Creates reactive expression with code in 2nd argument that only invalidates when reactive values in 1st argument change.\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  textInput(\"a\",\"\",\"A\"), \n  actionButton(\"go\",\"Go\"), \n  textOutput(\"b\")\n)\n\nserver &lt;- function(input,output){\n  re &lt;- eventReactive(\n    input$go,{input$a}\n  )\n  output$b &lt;- renderText({\n    re()\n  }) \n}\n\n\n\n\nRender Reactive Output\n\nrender*() functions: (see front page) Builds an object to display. Will rerun code in body to rebuild the object whenever a reactive value in the code changes. Save the results to output$&lt;outputId&gt;.\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  textInput(\"a\",\"\",\"A\"), \n  textOutput(\"b\")\n)\n\nserver &lt;- function(input,output){\n  output$b &lt;-\n    renderText({\n      input$a\n  })\n}\n\nshinyApp(ui, server)\n\n\n\n\nPerform Side Effects\n\nobserve(x, env): Creates an observer from the given expression.\nobserveEvent(eventExpr, handlerExpr, event.env, event.quoted, handler.env, handler.quoted, ..., label, suspended, priority, domain, autoDestroy, ignoreNULL, ignoreInit, once): Runs code in 2nd argument when reactive values in 1st argument change. Alternative to observe``().\n\nlibrary(shiny)\n\nui &lt;- fluidPage(textInput(\"a\",\"\",\"A\"), actionButton(\"go\",\"Go\"))\n\nserver &lt;- function(input,output){\n  observeEvent(input$go, {\n    print(input$a)\n  })\n}\n\nshinyApp(ui, server)\n\n\n\n\nRemove Reactivity\n\nisolate(expr): Runs a code block. Returns a non-reactive copy of the results.\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  textInput(\"a\",\"\",\"A\"), \n  textOutput(\"b\")\n)\n\nserver &lt;- function(input,output){ \n  output$b &lt;- \n    renderText({\n      isolate({input$a})\n    })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "html/shiny.html#ui",
    "href": "html/shiny.html#ui",
    "title": "Shiny for R :: Cheatsheet",
    "section": "UI",
    "text": "UI\nAn app’s UI is an HTML document.\nUse Shiny’s functions to assemble this HTML with R.\n\nfluidPage(\n  textInput(\"a\",\"\")\n)\n\nReturns HTML:\n&lt;div class=\"container-fluid\"&gt;\n  &lt;div class=\"form-group shiny-input-container\"&gt;\n    &lt;label for=\"a\"&gt;&lt;/label&gt;\n    &lt;input id=\"a\" type=\"text\" class=\"form-control\" value=\"\"/&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\nAdd static HTML elements with tags, a list of functions that parallel common HTML tags, e.g. tags$a(). Unnamed arguments will be passed into the tag; named arguments will become tag attributes.\nRun names(tags) for a complete list. tags$h1(\"Header\") -&gt; &lt;h1&gt;Header&lt;/h1&gt;\nThe most common tags have wrapper functions. You do not need to prefix their names with tags$.\n\nui &lt;- fluidPage(\n  h1(\"Header 1\"), # &lt;h1&gt;Header 1&lt;/h1&gt;\n  hr(), # &lt;hr&gt;\n  br(), # &lt;br&gt;\n  p(strong(\"bold\")), # &lt;p&gt;&lt;strong&gt;bold&lt;/strong&gt;&lt;/p&gt;\n  p(em(\"italic\")), # &lt;p&gt;&lt;em&gt;italic&lt;/em&gt;&lt;/p&gt;\n  p(code(\"code\")), # &lt;p&gt;&lt;code&gt;code&lt;/code&gt;&lt;/p&gt;\n  a(href=\"\", \"link\"), # &lt;a href=\"\"&gt;link&lt;/a&gt;\n  HTML(\"&lt;p&gt;Raw html&lt;/p&gt;\") # display raw html\n)\n\nTo include a CSS file, use includeCSS(), or\n\nPlace the file in the www subdirectory\nLink to it with:\n\ntags$head(\n  tags$link(\n    rel = \"stylesheet\", \n    type = \"text/css\", \n    href = \"&lt;file name&gt;\"\n    )\n  )\n\n\nTo include JavaScript, use includeScript(), or\n\nPlace the file in the www subdirectory\nLink to it with:\n\ntags$head(tags$script(src = \"&lt;file name&gt;\"))\n\n\nTo include an image:\n\nPlace the file in the www subdirectory\nLink to it with:\n\nimg(src = \"&lt;file name&gt;\")"
  },
  {
    "objectID": "html/shiny.html#layouts",
    "href": "html/shiny.html#layouts",
    "title": "Shiny for R :: Cheatsheet",
    "section": "Layouts",
    "text": "Layouts\nUse the bslib package to lay out the your app and its components.\n\nPage layouts\n\nDashboard layouts\n\npage_sidebar() - A sidebar page\npage_navbar() - Multi-page app with a top navigation bar\npage_fillable() - A screen-filling page layout\n\n\n\nBasic layouts\n\npage()\npage_fluid()\npage_fixed()\n\n\n\n\nUser interface layouts\n\nMultiple columns\n\nlayout_columns() - Organize UI elements into Bootstrap’s 12-column CSS grid\nlayout_column_wrap() - Organize elements into a grid of equal-width columns\n\n\n\nMultiple panels\n\nnavset_tab() - Tabbed navigation container\nnavset_pill() - Creates a navigation container that behaves exactly like navset_tab(), but the tab toggles are pills or button-shaped\nnavset_underline() - Creates a navigation container that behaves exactly like navset_tab() and navset_pill(), but the active/focused navigation links are styled with an underline\nnav_panel() - Content to display when given item is selected\nnav_menu() - Create a menu of nav items\nnav_item() - Place arbitrary content in the nav panel\nnav_spacer() - Add spacing between nav items\n\nAlso dynamically update nav containers with nav_select(), nav_insert(), nav_remove(), nav_show(), nav_hide().\n\n\nSidebar layout\n\nsidebar()\nlayout_sidebar()\ntoggle_sidebar()"
  },
  {
    "objectID": "html/shiny.html#themes",
    "href": "html/shiny.html#themes",
    "title": "Shiny for R :: Cheatsheet",
    "section": "Themes",
    "text": "Themes\nUse the bslib package to add existing themes to your Shiny app ui, or make your own.\n\nlibrary(bslib)\nui &lt;- fluidPage(\n  theme = bs_theme(\n    boothswatch = \"darkly\",\n    ...\n  )\n)\n\n\nbootswatch_themes(): Get a list of themes.\n\nBuild your own theme by customizing individual arguments.\n\nbs_theme(\n  bg = \"#558AC5\",\n  fg = \"#F9B02D\",\n  ...\n)\n\n\n?bs_theme for a full list of arguments.\nbs_themer(): Place within the server function ot use the interactive theming widget.\n\n\nCC BY SA Posit Software, PBC • info@posit.co • posit.co\nLearn more at shiny.rstudio.com\nUpdated: 2025-07.\n\npackageVersion(\"shiny\")\n\n[1] '1.11.1'"
  },
  {
    "objectID": "html/strings.html",
    "href": "html/strings.html",
    "title": "String manipulation with stringr :: Cheatsheet",
    "section": "",
    "text": "Download PDF\n\n  \n\nTranslations (PDF)\n\n\nPortuguese\nSpanish\nVietnamese\nThe stringr package provides a set of internally consistent tools for working with character strings, i.e. sequences of characters surrounded by quotation marks.\nlibrary(stringr)"
  },
  {
    "objectID": "html/strings.html#detect-matches",
    "href": "html/strings.html#detect-matches",
    "title": "String manipulation with stringr :: Cheatsheet",
    "section": "Detect Matches",
    "text": "Detect Matches\n\nstr_detect(string, pattern, negate = FALSE): Detect the presence of a pattern match in a string. Also str_like().\n\nstr_detect(fruit, \"a\")\n\nstr_starts(string, pattern, negate = FALSE): Detect the presence of a pattern match at the beginning of a string. Also str_ends().\n\nstr_starts(fruit, \"a\")\n\nstr_which(string, pattern, negate = FALSE): Find the indexes of strings that contain a pattern match.\n\nstr_which(fruit, \"a\")\n\nstr_locate(string, pattern): Locate the positions of pattern matches in a string. Also str_locate_all().\n\nstr_locate(fruit, \"a\")\n\nstr_count(string, pattern): Count the number of matches in a string.\n\nstr_count(fruit, \"a\")"
  },
  {
    "objectID": "html/strings.html#mutate-strings",
    "href": "html/strings.html#mutate-strings",
    "title": "String manipulation with stringr :: Cheatsheet",
    "section": "Mutate Strings",
    "text": "Mutate Strings\n\nstr_sub() &lt;- value: Replace substrings by identifying the substrings with str_sub() and assigning into the results.\n\nstr_sub(fruit, 1, 3) &lt;- \"str\"\n\nstr_replace(string, pattern, replacement): Replace the first matched pattern in each string. Also str_remove().\n\nstr_replace(fruit, \"p\", \"-\")\n\nstr_replace_all(string, pattern, replacement): Replace all matched patterns in each string. Also str_remove_all().\n\nstr_replace_all(fruit, \"p\", \"-\")\n\nstr_to_lower(string, locale = \"en\")1: Convert strings to lower case.\n\nstr_to_lower(sentences)\n\nstr_to_upper(string, locale = \"en\")1: Convert strings to upper case.\n\nstr_to_upper(sentences)\n\nstr_to_title(string, locale = \"en\")1: Convert strings to title case. Also str_to_setence().\n\nstr_to_title(sentences)"
  },
  {
    "objectID": "html/strings.html#subset-strings",
    "href": "html/strings.html#subset-strings",
    "title": "String manipulation with stringr :: Cheatsheet",
    "section": "Subset Strings",
    "text": "Subset Strings\n\nstr_sub(string, start = 1L, end = -1L): Extract substrings from a character vector.\n\nstr_sub(fruit, 1, 3)\nstr_sub(fruit, -2)\n\nstr_subset(string, pattern, negate = FALSE): Return only the strings that contain a pattern match.\n\nstr_subset(fruit, \"p\")\n\nstr_extract(string, pattern): Return the first pattern match found in each string, as a vector. Also str_extract_all() to return every pattern match.\n\nstr_extract(fruit, \"[aeiou]\")\n\nstr_match(string, pattern): Return the first pattern match found in each string, as a matrix with a column for each ( ) group in pattern. Also str_match_all().\n\nstr_match(sentences, \"(a|the) ([^ +])\")"
  },
  {
    "objectID": "html/strings.html#join-and-split",
    "href": "html/strings.html#join-and-split",
    "title": "String manipulation with stringr :: Cheatsheet",
    "section": "Join and Split",
    "text": "Join and Split\n\nstr_c(..., sep = \"\", collapse = NULL): Join multiple strings into a single string.\n\nstr_c(letters, LETTERS)\n\nstr_flatten(string, collapse = \"\"): Combines into a single string, separated by collapse.\n\nstr_flatten(fruit, \", \")\n\nstr_dup(string, times): Repeat strings times times. Also str_unique() to remove duplicates.\n\nstr_dup(fruit, times = 2)\n\nstr_split_fixed(string, pattern, n): Split a vector of strings into a matrix of substrings (splitting at occurrences of a pattern match). Also str_split() to return a list of substrings and str_split_i() to return the ith substring.\n\nstr_split_fixed(sentences, \" \", n = 3)\n\nstr_glue(..., .sep = \"\", .envir = parent.frame()): Create a string from strings and {expressions} to evaluate.\n\nstr_glue(\"Pi is {pi}\")\n\nstr_glue_data(.x, ..., .sep = \"\", .envir = parent.frame(), .na = \"NA\"): Use a data frame, list, or environment to create a string from strings and {expressions} to evaluate.\n\nstr_glue_data(mtcars, \"{rownames(mtcars)} has {hp} hp\")"
  },
  {
    "objectID": "html/strings.html#manage-lengths",
    "href": "html/strings.html#manage-lengths",
    "title": "String manipulation with stringr :: Cheatsheet",
    "section": "Manage Lengths",
    "text": "Manage Lengths\n\nstr_length(string): The width of strings (i.e. number of code points, which generally equals the number of characters).\n\nstr_length(fruit)\n\nstr_pad(string, width, side = c(\"left\", \"right\", \"both\"), pad = \" \"): Pad strings to constant width.\n\nstr_pad(fruit, 17)\n\nstr_trunc(string, width, side = c(\"left\", \"right\", \"both\"), ellipsis = \"...\"): Truncate the width of strings, replacing content with ellipsis.\n\nstr_trunc(sentences, 6)\n\nstr_trim(string, side = c(\"left\", \"right\", \"both\")): Trim whitespace from the start and/or end of a string.\n\nstr_trim(str_pad(fruit, 17))\n\nstr_squish(string): Trim white space from each end and collapse multiple spaces into single spaces.\n\nstr_squish(str_pad(fruit, 17, \"both\"))"
  },
  {
    "objectID": "html/strings.html#order-strings",
    "href": "html/strings.html#order-strings",
    "title": "String manipulation with stringr :: Cheatsheet",
    "section": "Order Strings",
    "text": "Order Strings\n\nstr_order(x, decreasing = FALSE, na_last = TRUE, locale = \"en\", numeric = FALSE, ...)^1^: Return the vector of indexes that sorts a character vector.\n\nfruit[str_order(fruit)]\n\nstr_sort(x, decreasing = FALSE, na_last = TRUE, locale = \"en\", numeric = FALSE, ...)^1^: Sort a character vector.\n\nstr_sort(fruit)"
  },
  {
    "objectID": "html/strings.html#helpers",
    "href": "html/strings.html#helpers",
    "title": "String manipulation with stringr :: Cheatsheet",
    "section": "Helpers",
    "text": "Helpers\n\nstr_conv(string, encoding): Override the encoding of a string.\n\nstr_conv(fruit, \"ISO-8859-1\")\n\nstr_view(string, pattern, match = NA): View HTML rendering of all regex matches. Also str_view() to see only the first match.\n\nstr_view(sentences, \"[aeiou]\")\n\nstr_equal(x, y, locale = \"en\", ignore_case = FALSE, ...)1: Determine if two strings are equivalent.\n\nstr_equal(c(\"a\", \"b\"), c(\"a\", \"c\"))\n\nstr_wrap(string, width = 80, indent = 0, exdent = 0): Wrap strings into nicely formatted paragraphs.\n\nstr_wrap(sentences, 20)\n\n\n1 See http://bit.ly/ISO639-1 for a complete list of locales."
  },
  {
    "objectID": "html/strings.html#regular-expressions",
    "href": "html/strings.html#regular-expressions",
    "title": "String manipulation with stringr :: Cheatsheet",
    "section": "Regular Expressions",
    "text": "Regular Expressions\nRegular expressions, or regexps, are a concise language for describing patterns in strings.\n\nNeed to Know\nPattern arguments in stringr are interpreted as regular expressions after any special characters have been parsed.\nIn R, you write regular expressions as strings, sequences of characters surrounded by quotes(\"\") or single quotes ('').\nSome characters cannot be directly represented in an R string. These must be represented as special characters, sequences of characters that have a specific meaning, e.g. \\\\ represents \\, \\\" represents \", and \\n represents a new line. Run ?\"'\" to see a complete list.\nBecause of this, whenever a \\ appears in a regular expression, you must write it as \\\\ in the string that represents the regular expression.\nUse writeLines() to see how R views your string after all special characters have been parsed.\nFor example, writeLines(\"\\\\.\") will be parsed as \\.\nand writeLines(\"\\\\ is a backslash\") will be parsed as \\ is a backslash.\n\n\nInterpretation\nPatterns in stringr are interpreted as regexs. To change this default, wrap the pattern in one of:\n\nregex(pattern, ignore_case = FALSE, multiline = FALSE, comments = FALSE, dotall = FALSE, ...): Modifies a regex to ignore cases, match end of lines as well as end of strings, allow R comments within regexs, and/or to have . match everthing including \\n.\n\nstr_detect(\"I\", regex(\"i\", TRUE))\n\nfixed(): Matches raw bytes but will miss some characters that can be represented in multiple ways (fast).\n\nstr_detect(\"\\u0130\", fixed(\"i\"))\n\ncoll(): Matches raw bytes and will use locale specific collation rules to recognize characters that can be represented in multiple ways (slow).\n\nstr_detect(\"\\u0130\", coll(\"i\", TRUE, locale = \"tr\"))\n\nboundary(): Matches boundaries between characters, line_breaks, sentences, or words.\n\nstr_split(sentences, boundary(\"word\"))\n\n\n\n\nMatch Characters\n\nsee &lt;- function(rx) str_view(\"abc ABC 123\\t.!?\\\\(){}\\n\", rx)\n\n\n1Many base R functions require classes to be wrapped in a second set of [ ], e.g. [[:digit:]]\n\n\n\n\n\n\n\n\n\nstring\n(type this)\nregex\n(to mean this)\nmatches\n(which matches this)\nexample\nexample output (highlighted characters are in &lt;&gt;)\n\n\n\n\n\na (etc.)\na (etc.)\nsee(\"a\")\n&lt;a&gt;bc ABC 123\\t.!?\\(){}\\n\n\n\n\\\\.\n\\.\n.\nsee(\"\\\\.\")``\nabc ABC 123\\t&lt;.&gt;!?\\(){}\\n\n\n\n\\\\!\n\\!\n!\nsee(\"\\\\!\")\nabc ABC 123\\t.&lt;!&gt;?\\(){}\\n\n\n\n\\\\?\n\\?\n?\nsee(\"\\\\?\")\nabc ABC 123\\t.!&lt;?&gt;\\(){}\\n\n\n\n\\\\\\\\\n\\\\\n\\\nsee(\"\\\\\\\\\")\nabc ABC 123\\t.!?&lt;\\&gt;(){}\\n\n\n\n\\\\(\n\\(\n(\nsee(\"\\\\(\")\nabc ABC 123\\t.!?\\&lt;(&gt;){}\\n\n\n\n\\\\)\n\\)\n)\nsee(\"\\\\)\")\nabc ABC 123\\t.!?\\(&lt;)&gt;{}\\n\n\n\n\\\\{\n\\{\n{\nsee(\"\\\\{\")\nabc ABC 123\\t.!?\\()&lt;{&gt;}\\n\n\n\n\\\\}\n\\}\n}\nsee(\"\\\\}\")\nabc ABC 123\\t.!?\\(){&lt;}&gt;\\n\n\n\n\\\\n\n\\n\nnew line (return)\nsee(\"\\\\n\")\nabc ABC 123\\t.!?\\(){}&lt;\\n&gt;\n\n\n\\\\t\n\\t\ntab\nsee(\"\\\\t\")\nabc ABC 123&lt;\\t&gt;.!?\\(){}\\n\n\n\n\\\\s\n\\s\nany whitespace\n(\\S for non-whitespaces)\nsee(\"\\\\s\")\nabc&lt; &gt;ABC&lt; &gt;123&lt;\\t&gt;.!?\\(){}&lt;\\n&gt;\n\n\n\\\\d\n\\d\nany digit\n(\\D for non-digits)\nsee(\"\\\\d\")\nabc ABC &lt;1&gt;&lt;2&gt;&lt;3&gt;\\t.!?\\(){}\\n\n\n\n\\\\w\n\\w\nany word character\n(\\W for non-word characters)\nsee(\"\\\\w\")\n&lt;a&gt;&lt;b&gt;&lt;c&gt; &lt;A&gt;&lt;B&gt;&lt;C&gt; &lt;1&gt;&lt;2&gt;&lt;3&gt;\\t.!?\\(){}\\n\n\n\n\\\\b\n\\b\nword boundaries\nsee(\"\\\\b\")\n&lt;&gt;abc&lt;&gt; &lt;&gt;ABC&lt;&gt; &lt;&gt;123&lt;&gt;\\t.!?\\(){}\\n\n\n\n\n[:digit:]1\ndigits\nsee(\"[:digit:]\")\nabc ABC &lt;1&gt;&lt;2&gt;&lt;3&gt;\\t.!?\\(){}\\n\n\n\n\n[:alpha:]1\nletters\nsee(\"[:alpha:]\")\n&lt;a&gt;&lt;b&gt;&lt;c&gt; &lt;A&gt;&lt;B&gt;&lt;C&gt; 123\\t.!?\\(){}\\n\n\n\n\n[:lower:]1\nlowercase letters\nsee(\"[:lower:]\")\n&lt;a&gt;&lt;b&gt;&lt;c&gt; ABC 123\\t.!?\\(){}\\n\n\n\n\n[:upper:]1\nuppercase letters\nsee(\"[:upper:]\")\nabc &lt;A&gt;&lt;B&gt;&lt;C&gt; 123\\t.!?\\(){}\\n\n\n\n\n[:alnum:]1\nletters and numbers\nsee(\"[:alnum:]\")\n&lt;a&gt;&lt;b&gt;&lt;c&gt; &lt;A&gt;&lt;B&gt;&lt;C&gt; &lt;1&gt;&lt;2&gt;&lt;3&gt;\\t.!?\\(){}\\n\n\n\n\n[:punct:]1\npunctuation\nsee(\"[:punct:]\")\nabc ABC 123\\t&lt;.&gt;&lt;!&gt;&lt;?&gt;&lt;\\&gt;&lt;(&gt;&lt;)&gt;&lt;{&gt;&lt;}&gt;\\n\n\n\n\n[:graph:]1\nletters, numbers, and punctuation\nsee(\"[:graph:]\")\n&lt;a&gt;&lt;b&gt;&lt;c&gt; &lt;A&gt;&lt;B&gt;&lt;C&gt; &lt;1&gt;&lt;2&gt;&lt;3&gt;\\t&lt;.&gt;&lt;!&gt;&lt;?&gt;&lt;\\&gt;&lt;(&gt;&lt;)&gt;&lt;{&gt;&lt;}&gt;\\n\n\n\n\n[:space:]1\nspace characters (i.e. \\s)\nsee(\"[:space:]\")\nabc&lt; &gt;ABC&lt; &gt;123&lt;\\t&gt;.!?\\(){}&lt;\\n&gt;\n\n\n\n[:blank:]1\nspace and tab (but not new line)\nsee(\"[:blank:]\")\nabc&lt; &gt;ABC&lt; &gt;123&lt;\\t&gt;.!?\\(){}\\n\n\n\n\n.\nevery character except a new line\nsee(\".\")\n&lt;a&gt;&lt;b&gt;&lt;c&gt;&lt; &gt;&lt;A&gt;&lt;B&gt;&lt;C&gt;&lt; &gt;&lt;1&gt;&lt;2&gt;&lt;3&gt;&lt;\\t&gt;&lt;.&gt;&lt;!&gt;&lt;?&gt;&lt;\\&gt;&lt;(&gt;&lt;)&gt;&lt;{&gt;&lt;}&gt;&lt;\\n&gt;\n\n\n\n\nClasses\n\nThe [:space:] class includes new line, and the [:blank:] class\n\nThe [:blank:] class includes space and tab (\\t)\n\nThe [:graph:] class contains all non-space characters, including [:punct:], [:symbol:], [:alnum:], [:digit:], [:alpha:], [:lower:], and [:upper:]\n\n[:punct:] contains punctuation: . , : ; ? ! / * @ # - _ \" [ ] { } ( )\n[:symbol:] contains symbols: | ` = + ^ ~ &lt; &gt; $\n[:alnum:] contains alphanumeric characters, including [:digit:], [:alpha:], [:lower:], and [:upper:]\n\n[:digit:] contains the digits 0 through 9\n[:alpha:] contains letters, including [:upper:] and [:lower:]\n\n[:upper:] contains uppercase letters and [:lower:] contains lowercase letters\n\n\n\nThe regex . contains all characters in the above classes, except new line.\n\n\n\n\nAlternates\nalt &lt;- function(rx) str_view(\"abcde\", rx)\n\nAlternates\n\n\n\n\n\n\n\n\nregexp\nmatches\nexample\nexample output\n(highlighted characters are in &lt;&gt;)\n\n\n\n\nab|d\nor\nalt(\"ab|d\")\n&lt;ab&gt;c&lt;d&gt;e\n\n\n[abe]\none of\nalt(\"[abe]\"\n&lt;a&gt;&lt;b&gt;cd&lt;e&gt;\n\n\n[^abe]\nanything but\nalt(\"[^abe]\")\nab&lt;c&gt;&lt;d&gt;e\n\n\n[a-c]\nrange\nalt(\"[a-c]\")\n&lt;a&gt;&lt;b&gt;&lt;c&gt;de\n\n\n\n\n\nAnchors\nanchor &lt;- function(rx) str_view(\"aaa\", rx)\n\nAnchors\n\n\n\n\n\nregexp | matches | example | example output\n| | | (highlighted characters are in &lt;&gt;)\n\n\n\n\n^a | start of string | anchor(\"^a\") | |                 |                | &lt;a&gt;aa             |                 |                |\n\n\na$ | end of string | anchor(\"a$\") | |                 |                | aa&lt;a&gt;             |                 |                |\n\n\n\n\n\nLook Arounds\nlook &lt;- function(rx) str_view(\"bacad\", rx)\n\nLook arounds\n\n\n\n\n\n\n\n\nregexp\nmatches\nexample\nexample output\n(highlighted characters are in &lt;&gt;)\n\n\n\n\na(?=c)\nfollowed by\nlook(\"a(?=c)\")\nb&lt;a&gt;cad\n\n\na(?!c)\nnot followed by\nlook(\"a(?!c)\")\nbac&lt;a&gt;d\n\n\n(?&lt;=b)a\npreceded by\nlook(\"(?&lt;=b)a\")\nb&lt;a&gt;cad\n\n\n(?&lt;!b)a\nnot preceded by\nlook(\"(?&lt;!b)a\")\nbac&lt;a&gt;d\n\n\n\n\n\nQuantifiers\nquant &lt;- function(rx) str_view(\".a.aa.aaa\", rx)\n\nQuantifiers\n\n\n\n\n\n\n\n\nregexp\nmatches\nexample\nexample output\n(highlighted characters are in &lt;&gt;)\n\n\n\n\na?\nzero or one\nquant(\"a?\")\n&lt;&gt;.&lt;a&gt;&lt;&gt;.&lt;a&gt;&lt;a&gt;&lt;&gt;.&lt;a&gt;&lt;a&gt;&lt;a&gt;&lt;&gt;\n\n\na*\nzero or more\nquant(\"a*\")\n&lt;&gt;.&lt;a&gt;&lt;&gt;.&lt;aa&gt;&lt;&gt;.&lt;aaa&gt;&lt;&gt;\n\n\na+\none or more\nquant(\"a+\")\n.&lt;a&gt;.&lt;aa&gt;.&lt;aaa&gt;\n\n\na{n}\nexactly n\nquant(\"a{2}\")\n.a.&lt;aa&gt;.&lt;aa&gt;a\n\n\na{n, }\nn or more\nquant(\"a{2,}\")\n.a.&lt;aa&gt;.&lt;aaa&gt;\n\n\na{n, m}\nbetween n and m\nquant(\"a{2,4}\")\n.a.&lt;aa&gt;.&lt;aaa&gt;\n\n\n\n\n\nGroups\nref &lt;- function(rx) str_view(\"abbaab\", rx)\nUse parentheses to set precedent (order of evaluation) and create groups\n\nGroups\n\n\n\n\n\n\n\n\nregexp\nmatches\nexample\nexample output\n(highlighted characters are in &lt;&gt;)\n\n\n\n\n(ab|d)e\nsets precedence\nalt(\"(ab|d)e\")\nabc&lt;de&gt;\n\n\n\nUse an escaped number to refer to and duplicate parentheses groups that occur earlier in a pattern. Refer to each group by its order of appearance\n\nMore groups\n\n\n\n\n\n\n\n\n\nstring\n(type this)\nregexp\n(to mean this)\nmatches\n(which matches this)\nexample\n(the result is the same as ref(\"abba\"))\nexample output\n(highlighted characters are in &lt;&gt;)\n\n\n\n\n\\\\1\n\\1 (etc.)\nfirst () group, etc.\nref(\"(a)(b)\\\\2\\\\1\")\n&lt;abba&gt;ab\n\n\n\n\nCC BY SA Posit Software, PBC • info@posit.co • posit.co\nLearn more at stringr.tidyverse.org.\nUpdated: 2025-07.\n\npackageVersion(\"stringr\")\n\n[1] '1.5.1'"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posit Cheatsheets",
    "section": "",
    "text": "HTML versions of our popular cheatsheets. PDF versions are available to download on each cheatsheet page. There are also non-English translations available for many cheatsheets, contributed by the community.\n\n\n\n\n\n\n\n\n\n\n\n\nRStudio IDE :: Cheatsheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData visualization with ggplot2 :: Cheat Sheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData transformation with dplyr :: Cheatsheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData import with the tidyverse :: Cheatsheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData tidying with tidyr :: Cheatsheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApply functions with purrr :: Cheatsheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFactors with forcats :: Cheatsheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDates and times with lubridate :: Cheatsheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nString manipulation with stringr :: Cheatsheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShiny for R :: Cheatsheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShiny for Python :: Cheatsheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPackage Development :: Cheatsheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPublish and Share with Quarto :: Cheatsheet\n\n\nQMD Edition\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrmarkdown :: Cheatsheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDeep Learning with Keras :: Cheatsheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nREST APIs with plumber :: Cheatsheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Python with R with reticulate :: Cheatsheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData science in Spark with sparklyr :: Cheatsheet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPosit Team :: Cheatsheet\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  }
]